{
  if (cache.containsKey(callback)) {
    return cache.get(callback);
  }
  ClassWriter cw=new ClassWriter(0);
  MethodVisitor mv;
  String name=getUniqueName(callback);
  String desc=name.replace('.','/');
  String instType=Type.getInternalName(callback.getDeclaringClass());
  String eventType=Type.getInternalName(callback.getParameterTypes()[0]);
  cw.visit(V1_6,ACC_PUBLIC | ACC_SUPER,desc,null,"java/lang/Object",new String[]{HANDLER_DESC});
  cw.visitSource(".dynamic",null);
{
    cw.visitField(ACC_PUBLIC,"instance","Ljava/lang/Object;",null,null).visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"<init>","(Ljava/lang/Object;)V",null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitMethodInsn(INVOKESPECIAL,"java/lang/Object","<init>","()V");
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitFieldInsn(PUTFIELD,desc,"instance","Ljava/lang/Object;");
    mv.visitInsn(RETURN);
    mv.visitMaxs(2,2);
    mv.visitEnd();
  }
{
    mv=cw.visitMethod(ACC_PUBLIC,"invoke",HANDLER_FUNC_DESC,null,null);
    mv.visitCode();
    mv.visitVarInsn(ALOAD,0);
    mv.visitFieldInsn(GETFIELD,desc,"instance","Ljava/lang/Object;");
    mv.visitTypeInsn(CHECKCAST,instType);
    mv.visitVarInsn(ALOAD,1);
    mv.visitTypeInsn(CHECKCAST,eventType);
    mv.visitMethodInsn(INVOKEVIRTUAL,instType,callback.getName(),Type.getMethodDescriptor(callback));
    mv.visitInsn(RETURN);
    mv.visitMaxs(2,2);
    mv.visitEnd();
  }
  cw.visitEnd();
  Class<?> ret=LOADER.define(name,cw.toByteArray());
  cache.put(callback,ret);
  return ret;
}
