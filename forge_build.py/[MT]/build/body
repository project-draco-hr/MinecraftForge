def build(build_num=0):
    version = load_version(build_num)
    print ('=================================== Build %d.%d.%d.%d Start =================================' % (version['major'], version['minor'], version['revision'], version['build']))
    if os.path.isdir(src_dir):
        shutil.rmtree(src_dir)
    inject_version(os.path.join(forge_dir, 'forge_common', 'net', 'minecraft', 'src', 'forge', 'ForgeHooks.java'), build_num)
    print 'src_work -> src'
    copytree(os.path.join(mcp_dir, 'src_work'), src_dir)
    print '\nforge_client -> minecraft'
    copytree(os.path.join(forge_dir, 'forge_client', 'src'), os.path.join(src_dir, 'minecraft'), (-1))
    print '\nforge_server -> minecraft_server'
    copytree(os.path.join(forge_dir, 'forge_server', 'src'), os.path.join(src_dir, 'minecraft_server'), (-1))
    print '\nforge_common -> minecraft'
    copytree(os.path.join(forge_dir, 'forge_common'), os.path.join(src_dir, 'minecraft'), (-1))
    print '\nforge_common -> minecraft_server'
    copytree(os.path.join(forge_dir, 'forge_common'), os.path.join(src_dir, 'minecraft_server'), (-1))
    print 
    error_level = 0
    try:
        os.chdir(mcp_dir)
        reset_logger()
        recompile(None)
        reset_logger()
        os.chdir(forge_dir)
    except SystemExit as e:
        print ('Recompile Exception: %d ' % e.code)
        error_level = e.code
    print ('=================================== Build Finished %d =================================' % error_level)
    return error_level
