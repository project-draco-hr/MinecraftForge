{
  if (stack == null)   return null;
  int slot1=getSlot(inv,slot,side);
  if (slot1 == -1)   return stack;
  if (!inv.isItemValidForSlot(slot1,stack) || !inv.canInsertItem(slot1,stack,side))   return stack;
  ItemStack stackInSlot=inv.getStackInSlot(slot1);
  int m;
  if (stackInSlot != null) {
    if (!ItemHandlerHelper.canItemStacksStack(stack,stackInSlot))     return stack;
    m=Math.min(stack.getMaxStackSize(),inv.getInventoryStackLimit()) - stackInSlot.stackSize;
    if (stack.stackSize <= m) {
      if (!simulate) {
        ItemStack copy=stack.copy();
        copy.stackSize+=stackInSlot.stackSize;
        inv.setInventorySlotContents(slot1,copy);
      }
      return null;
    }
 else {
      stack=stack.copy();
      if (!simulate) {
        ItemStack copy=stack.splitStack(m);
        copy.stackSize+=stackInSlot.stackSize;
        inv.setInventorySlotContents(slot1,copy);
        return stack;
      }
 else {
        stack.stackSize-=m;
        return stack;
      }
    }
  }
 else {
    m=Math.min(stack.getMaxStackSize(),inv.getInventoryStackLimit());
    if (m < stack.stackSize) {
      stack=stack.copy();
      if (!simulate) {
        inv.setInventorySlotContents(slot1,stack.splitStack(m));
        return stack;
      }
 else {
        stack.stackSize-=m;
        return stack;
      }
    }
 else {
      if (!simulate)       inv.setInventorySlotContents(slot1,stack);
      return null;
    }
  }
}
