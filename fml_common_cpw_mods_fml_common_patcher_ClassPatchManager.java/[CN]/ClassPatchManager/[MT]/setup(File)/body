{
  File[] patchFiles=dirToScan.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return Files.getFileExtension(new File(dir,name).getPath()).equals("binpatch");
    }
  }
);
  if (patchFiles == null) {
    return;
  }
  patches=ArrayListMultimap.create();
  for (  File patch : patchFiles) {
    FMLLog.finest("Reading patch data from %s",patch.getAbsolutePath());
    ByteArrayDataInput input;
    try {
      input=ByteStreams.newDataInput(Files.toByteArray(patch));
    }
 catch (    IOException e) {
      FMLLog.log(Level.WARNING,e,"Unable to read binpatch file %s - ignoring",patch.getAbsolutePath());
      continue;
    }
    String name=input.readUTF();
    String sourceClassName=input.readUTF();
    String targetClassName=input.readUTF();
    boolean exists=input.readBoolean();
    int patchLength=input.readInt();
    byte[] patchBytes=new byte[patchLength];
    input.readFully(patchBytes);
    ClassPatch cp=new ClassPatch(name,sourceClassName,targetClassName,exists,patchBytes);
    patches.put(name,cp);
  }
  FMLLog.fine("Read %d binary patches from %s",patches.size(),dirToScan.getAbsolutePath());
}
