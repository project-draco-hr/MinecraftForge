{
  int pattern_offset;
  int num_channels, num_notes;
  int row_idx, channel_idx, note_idx;
  int token, key, volume_column, effect, effect_param;
  byte[] pattern_data;
  Pattern pattern;
  num_channels=0;
  for (channel_idx=0; channel_idx < 32; channel_idx++) {
    if (channel_map[channel_idx] >= num_channels) {
      num_channels=channel_idx + 1;
    }
  }
  num_notes=num_channels * 64;
  pattern_data=new byte[num_notes * 5];
  row_idx=0;
  pattern_offset=get_pattern_offset(s3m_file,pattern_idx) + 2;
  while (row_idx < 64) {
    token=s3m_file[pattern_offset] & 0xFF;
    pattern_offset+=1;
    if (token > 0) {
      channel_idx=channel_map[token & 0x1F];
      note_idx=(num_channels * row_idx + channel_idx) * 5;
      if ((token & 0x20) == 0x20) {
        if (channel_idx >= 0) {
          key=s3m_file[pattern_offset] & 0xFF;
          if (key == 255) {
            key=0;
          }
 else           if (key == 254) {
            key=97;
          }
 else {
            key=((key & 0xF0) >> 4) * 12 + (key & 0x0F) + 1;
            while (key > 96) {
              key=key - 12;
            }
          }
          pattern_data[note_idx]=(byte)key;
          pattern_data[note_idx + 1]=s3m_file[pattern_offset + 1];
        }
        pattern_offset+=2;
      }
      if ((token & 0x40) == 0x40) {
        if (channel_idx >= 0) {
          volume_column=(s3m_file[pattern_offset] & 0xFF) + 0x10;
          pattern_data[note_idx + 2]=(byte)volume_column;
        }
        pattern_offset+=1;
      }
      if ((token & 0x80) == 0x80) {
        if (channel_idx >= 0) {
          effect=s3m_file[pattern_offset] & 0xFF;
          effect_param=s3m_file[pattern_offset + 1] & 0xFF;
          effect=effect_map[effect & 0x1F];
          if (effect == 0xFF) {
            effect=0;
            effect_param=0;
          }
          if (effect == 0x0E) {
            effect=effect_s_map[(effect_param & 0xF0) >> 4];
            effect_param=effect_param & 0x0F;
switch (effect) {
case 0x08:
              effect=0x08;
            effect_param=effect_param * 17;
          break;
case 0x09:
        effect=0x08;
      if (effect_param > 7) {
        effect_param-=8;
      }
 else {
        effect_param+=8;
      }
    effect_param=effect_param * 17;
  break;
case 0xFF:
effect=0;
effect_param=0;
break;
default :
effect_param=((effect & 0x0F) << 4) | (effect_param & 0x0F);
effect=0x0E;
break;
}
}
pattern_data[note_idx + 3]=(byte)effect;
pattern_data[note_idx + 4]=(byte)effect_param;
}
pattern_offset+=2;
}
}
 else {
row_idx+=1;
}
}
pattern=new Pattern();
pattern.num_rows=64;
pattern.set_pattern_data(pattern_data);
return pattern;
}
