{
  if (args.length != 3) {
    System.out.println("Usage: AccessTransformer <MapFile> <minecraft.jar> <minecraft_server.jar>");
    return;
  }
  File map_file=new File(args[0]);
  File client_jar=new File(args[1]);
  File server_jar=new File(args[2]);
  File client_jar_tmp=new File(args[1] + ".MergeBack");
  File server_jar_tmp=new File(args[2] + ".MergeBack");
  if (client_jar_tmp.exists() && !client_jar_tmp.delete()) {
    System.out.println("Could not delete temp file: " + client_jar_tmp);
  }
  if (server_jar_tmp.exists() && !server_jar_tmp.delete()) {
    System.out.println("Could not delete temp file: " + server_jar_tmp);
  }
  if (!client_jar.exists()) {
    System.out.println("Could not find minecraft.jar: " + client_jar);
    return;
  }
  if (!server_jar.exists()) {
    System.out.println("Could not find minecraft_server.jar: " + server_jar);
    return;
  }
  if (!client_jar.renameTo(client_jar_tmp)) {
    System.out.println("Could not rename file: " + client_jar + " -> "+ client_jar_tmp);
    return;
  }
  if (!server_jar.renameTo(server_jar_tmp)) {
    System.out.println("Could not rename file: " + server_jar + " -> "+ server_jar_tmp);
    return;
  }
  if (!readMapFile(map_file)) {
    System.out.println("Could not read map file: " + map_file);
    return;
  }
  try {
    processJar(client_jar_tmp,server_jar_tmp,client_jar,server_jar);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (!client_jar_tmp.delete()) {
    System.out.println("Could not delete temp file: " + client_jar_tmp);
  }
  if (!server_jar_tmp.delete()) {
    System.out.println("Could not delete temp file: " + server_jar_tmp);
  }
}
