{
  if (type.getRawType() != ITimeValue.class) {
    return null;
  }
  return (TypeAdapter<T>)new TypeAdapter<ITimeValue>(){
    public void write(    JsonWriter out,    ITimeValue parameter) throws IOException {
      if (parameter instanceof ConstValue) {
        out.value(((ConstValue)parameter).output);
      }
 else       if (parameter instanceof SimpleExprValue) {
        SimpleExprValue p=(SimpleExprValue)parameter;
        out.beginArray();
        out.value(p.operators);
        for (        ITimeValue v : p.args) {
          write(out,v);
        }
        out.endArray();
      }
 else       if (parameter instanceof CompositionValue) {
        CompositionValue p=(CompositionValue)parameter;
        out.beginArray();
        out.value("compose");
        write(out,p.g);
        write(out,p.f);
        out.endArray();
      }
 else       if (parameter instanceof IStringSerializable) {
        out.value("#" + ((IStringSerializable)parameter).getName());
      }
    }
    public ITimeValue read(    JsonReader in) throws IOException {
switch (in.peek()) {
case NUMBER:
        return new ConstValue((float)in.nextDouble());
case BEGIN_ARRAY:
      in.beginArray();
    String type=in.nextString();
  ITimeValue p;
if (SimpleExprValue.opsPattern.matcher(type).matches()) {
  ImmutableList.Builder<ITimeValue> builder=ImmutableList.builder();
  while (in.peek() != JsonToken.END_ARRAY) {
    builder.add(read(in));
  }
  p=new SimpleExprValue(type,builder.build());
}
 else if ("compose".equals(type)) {
  p=new CompositionValue(read(in),read(in));
}
 else {
  throw new IOException("Unknown TimeValue type \"" + type + "\"");
}
in.endArray();
return p;
case STRING:
String string=in.nextString();
if (string.equals("#identity")) {
return IdentityValue.INSTANCE;
}
if (!string.startsWith("#")) {
throw new IOException("Expected TimeValue reference, got \"" + string + "\"");
}
return new ParameterValue(string.substring(1),valueResolver.get());
default :
throw new IOException("Expected TimeValue, got " + in.peek());
}
}
}
;
}
