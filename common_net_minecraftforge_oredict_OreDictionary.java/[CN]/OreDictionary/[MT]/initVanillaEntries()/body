{
  if (!hasInit) {
    registerOre("logWood",new ItemStack(Block.wood,1,WILDCARD_VALUE));
    registerOre("plankWood",new ItemStack(Block.planks,1,WILDCARD_VALUE));
    registerOre("slabWood",new ItemStack(Block.woodSingleSlab,1,WILDCARD_VALUE));
    registerOre("stairWood",Block.stairsWoodOak);
    registerOre("stairWood",Block.stairsWoodBirch);
    registerOre("stairWood",Block.stairsWoodJungle);
    registerOre("stairWood",Block.stairsWoodSpruce);
    registerOre("stickWood",Item.stick);
    registerOre("treeSapling",new ItemStack(Block.sapling,1,WILDCARD_VALUE));
    registerOre("treeLeaves",new ItemStack(Block.leaves,1,WILDCARD_VALUE));
    registerOre("oreGold",Block.oreGold);
    registerOre("oreIron",Block.oreIron);
    registerOre("oreLapis",Block.oreLapis);
    registerOre("oreDiamond",Block.oreDiamond);
    registerOre("oreRedstone",Block.oreRedstone);
    registerOre("oreEmerald",Block.oreEmerald);
    registerOre("oreQuartz",Block.oreNetherQuartz);
    registerOre("stone",Block.stone);
    registerOre("cobblestone",Block.cobblestone);
    registerOre("record",Item.record13);
    registerOre("record",Item.recordCat);
    registerOre("record",Item.recordBlocks);
    registerOre("record",Item.recordChirp);
    registerOre("record",Item.recordFar);
    registerOre("record",Item.recordMall);
    registerOre("record",Item.recordMellohi);
    registerOre("record",Item.recordStal);
    registerOre("record",Item.recordStrad);
    registerOre("record",Item.recordWard);
    registerOre("record",Item.record11);
    registerOre("record",Item.recordWait);
  }
  Map<ItemStack,String> replacements=new HashMap<ItemStack,String>();
  replacements.put(new ItemStack(Block.planks,1,WILDCARD_VALUE),"plankWood");
  replacements.put(new ItemStack(Item.stick),"stickWood");
  replacements.put(new ItemStack(Block.stone),"stone");
  replacements.put(new ItemStack(Block.cobblestone),"cobblestone");
  String[] dyes={"dyeBlack","dyeRed","dyeGreen","dyeBrown","dyeBlue","dyePurple","dyeCyan","dyeLightGray","dyeGray","dyePink","dyeLime","dyeYellow","dyeLightBlue","dyeMagenta","dyeOrange","dyeWhite"};
  for (int i=0; i < 16; i++) {
    ItemStack dye=new ItemStack(Item.dyePowder,1,i);
    if (!hasInit) {
      registerOre(dyes[i],dye);
    }
    replacements.put(dye,dyes[i]);
  }
  hasInit=true;
  ItemStack[] replaceStacks=replacements.keySet().toArray(new ItemStack[replacements.keySet().size()]);
  ItemStack[] exclusions=new ItemStack[]{new ItemStack(Block.blockLapis),new ItemStack(Item.cookie),new ItemStack(Block.stoneBrick),new ItemStack(Block.stoneSingleSlab),new ItemStack(Block.stairsCobblestone),new ItemStack(Block.cobblestoneWall)};
  List recipes=CraftingManager.getInstance().getRecipeList();
  List<IRecipe> recipesToRemove=new ArrayList<IRecipe>();
  List<IRecipe> recipesToAdd=new ArrayList<IRecipe>();
  for (  Object obj : recipes) {
    if (obj instanceof ShapedRecipes) {
      ShapedRecipes recipe=(ShapedRecipes)obj;
      ItemStack output=recipe.getRecipeOutput();
      if (output != null && containsMatch(false,exclusions,output)) {
        continue;
      }
      if (containsMatch(true,recipe.recipeItems,replaceStacks)) {
        recipesToRemove.add(recipe);
        recipesToAdd.add(new ShapedOreRecipe(recipe,replacements));
      }
    }
 else     if (obj instanceof ShapelessRecipes) {
      ShapelessRecipes recipe=(ShapelessRecipes)obj;
      ItemStack output=recipe.getRecipeOutput();
      if (output != null && containsMatch(false,exclusions,output)) {
        continue;
      }
      if (containsMatch(true,(ItemStack[])recipe.recipeItems.toArray(new ItemStack[recipe.recipeItems.size()]),replaceStacks)) {
        recipesToRemove.add((IRecipe)obj);
        IRecipe newRecipe=new ShapelessOreRecipe(recipe,replacements);
        recipesToAdd.add(newRecipe);
      }
    }
  }
  recipes.removeAll(recipesToRemove);
  recipes.addAll(recipesToAdd);
  if (recipesToRemove.size() > 0) {
    System.out.println("Replaced " + recipesToRemove.size() + " ore recipies");
  }
}
