{
  int quantaRemaining=quantaPerBlock - ((Integer)state.getValue(LEVEL)).intValue();
  int expQuanta=-101;
  if (quantaRemaining < quantaPerBlock) {
    if (world.getBlockState(pos.add(0,-densityDir,0)).getBlock() == this || world.getBlockState(pos.add(-1,-densityDir,0)).getBlock() == this || world.getBlockState(pos.add(1,-densityDir,0)).getBlock() == this || world.getBlockState(pos.add(0,-densityDir,-1)).getBlock() == this || world.getBlockState(pos.add(0,-densityDir,1)).getBlock() == this) {
      expQuanta=quantaPerBlock - 1;
    }
 else {
      int maxQuanta=-100;
      maxQuanta=getLargerQuanta(world,pos.add(-1,0,0),maxQuanta);
      maxQuanta=getLargerQuanta(world,pos.add(1,0,0),maxQuanta);
      maxQuanta=getLargerQuanta(world,pos.add(0,0,-1),maxQuanta);
      maxQuanta=getLargerQuanta(world,pos.add(0,0,1),maxQuanta);
      expQuanta=maxQuanta - 1;
    }
    if (expQuanta != quantaRemaining) {
      quantaRemaining=expQuanta;
      if (expQuanta <= 0) {
        world.setBlockToAir(pos);
      }
 else {
        world.setBlockState(pos,state.withProperty(LEVEL,quantaPerBlock - expQuanta),2);
        world.scheduleUpdate(pos,this,tickRate);
        world.notifyNeighborsOfStateChange(pos,this);
      }
    }
  }
 else   if (quantaRemaining >= quantaPerBlock) {
    world.setBlockState(pos,this.getDefaultState(),2);
  }
  if (canDisplace(world,pos.up(densityDir))) {
    flowIntoBlock(world,pos.up(densityDir),1);
    return;
  }
  int flowMeta=quantaPerBlock - quantaRemaining + 1;
  if (flowMeta >= quantaPerBlock) {
    return;
  }
  if (isSourceBlock(world,pos) || !isFlowingVertically(world,pos)) {
    if (world.getBlockState(pos.down(densityDir)).getBlock() == this) {
      flowMeta=1;
    }
    boolean flowTo[]=getOptimalFlowDirections(world,pos);
    if (flowTo[0])     flowIntoBlock(world,pos.add(-1,0,0),flowMeta);
    if (flowTo[1])     flowIntoBlock(world,pos.add(1,0,0),flowMeta);
    if (flowTo[2])     flowIntoBlock(world,pos.add(0,0,-1),flowMeta);
    if (flowTo[3])     flowIntoBlock(world,pos.add(0,0,1),flowMeta);
  }
}
