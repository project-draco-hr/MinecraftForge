{
  if (name == null) {
    throw new NullPointerException(String.format("Can't use a null-name for the registry, object %s.",thing));
  }
  if (thing == null) {
    throw new NullPointerException(String.format("Can't add null-object to the registry, name %s.",name));
  }
  if (optionalDefaultKey != null && optionalDefaultKey.equals(name) && this.optionalDefaultObject == null) {
    this.optionalDefaultObject=thing;
  }
  if (getPersistentSubstitutions().containsValue(thing)) {
    throw new IllegalArgumentException(String.format("The object %s (%s) cannot be added to the registry. It is already being used as a substitute for %s",thing.getClass(),name,getPersistentSubstitutions().inverse().get(thing)));
  }
  int idToUse=id;
  if (idToUse < 0 || availabilityMap.get(idToUse)) {
    idToUse=availabilityMap.nextClearBit(minId);
  }
  if (idToUse > maxId) {
    throw new RuntimeException(String.format("Invalid id %d - maximum id range exceeded.",idToUse));
  }
  if (getRaw(name) == thing) {
    FMLLog.bigWarning("The object %s has been registered twice for the same name %s.",thing,name);
    return getId(thing);
  }
  if (getRaw(name) != null) {
    throw new IllegalArgumentException(String.format("The name %s has been registered twice, for %s and %s.",name,getRaw(name),thing));
  }
  if (getId(thing) >= 0) {
    int foundId=getId(thing);
    I otherThing=getRaw(foundId);
    throw new IllegalArgumentException(String.format("The object %s{%x} has been registered twice, using the names %s and %s. (Other object at this id is %s{%x})",thing,System.identityHashCode(thing),getNameForObject(thing),name,otherThing,System.identityHashCode(otherThing)));
  }
  if (PersistentRegistryManager.isFrozen(this)) {
    FMLLog.bigWarning("The object %s (name %s) is being added too late.",thing,name);
  }
  if (activeSubstitutions.containsKey(name)) {
    I oldThing=thing;
    thing=activeSubstitutions.get(name);
    if (DEBUG) {
      FMLLog.getLogger().log(Level.DEBUG,"Active substitution: {} {}@{} -> {}@{}",name,oldThing.getClass().getName(),System.identityHashCode(oldThing),thing.getClass().getName(),System.identityHashCode(thing));
    }
  }
  addObjectRaw(idToUse,name,thing);
  if (isDelegated) {
    getExistingDelegate(thing).setResourceName(name);
  }
  if (this.dummiedLocations.remove(name) && DEBUG) {
    FMLLog.fine("Registry Dummy Remove: %s",name);
  }
  if (DEBUG) {
    FMLLog.finer("Registry add: %s %d %s (req. id %d)",name,idToUse,thing,id);
  }
  return idToUse;
}
