{
  if (this.superType != otherRegistry.superType) {
    throw new IllegalArgumentException("incompatible registry");
  }
  final Map<ResourceLocation,Object> slaves=Maps.newHashMap(this.slaves);
  slaves.put(PersistentRegistryManager.SUBSTITUTION_ORIGINALS,substitutionOriginals);
  if (this.clearCallback != null)   this.clearCallback.onClear(this,slaves);
  this.optionalDefaultKey=otherRegistry.optionalDefaultKey;
  this.maxId=otherRegistry.maxId;
  this.minId=otherRegistry.minId;
  this.aliases.clear();
  this.aliases.putAll(otherRegistry.aliases);
  this.persistentSubstitutions.clear();
  this.persistentSubstitutions.putAll(otherRegistry.getPersistentSubstitutions());
  this.activeSubstitutions.clear();
  this.substitutionOriginals.clear();
  this.dummiedLocations.clear();
  this.dummiedLocations.addAll(otherRegistry.dummiedLocations);
  underlyingIntegerMap.clear();
  registryObjects.clear();
  for (  I thing : otherRegistry.typeSafeIterable()) {
    ResourceLocation name=otherRegistry.getNameForObject(thing);
    if (otherRegistry.activeSubstitutions.containsKey(name))     addObjectRaw(otherRegistry.getId(thing),name,otherRegistry.substitutionOriginals.get(name));
 else     addObjectRaw(otherRegistry.getId(thing),name,thing);
  }
  for (  ResourceLocation resloc : otherRegistry.activeSubstitutions.keySet()) {
    activateSubstitution(resloc);
  }
}
