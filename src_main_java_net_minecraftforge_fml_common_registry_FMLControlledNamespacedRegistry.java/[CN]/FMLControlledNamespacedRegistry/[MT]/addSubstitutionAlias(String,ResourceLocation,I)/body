{
  if (getPersistentSubstitutions().containsKey(nameToReplace) || getPersistentSubstitutions().containsValue(replacement)) {
    FMLLog.severe("The substitution of %s has already occurred. You cannot duplicate substitutions",nameToReplace);
    throw new ExistingSubstitutionException(nameToReplace,replacement);
  }
  I original=getRaw(nameToReplace);
  if (original == null) {
    throw new NullPointerException("The replacement target is not present. This won't work");
  }
  if (!original.getClass().isAssignableFrom(replacement.getClass())) {
    FMLLog.severe("The substitute %s for %s (type %s) is type incompatible. This won't work",replacement.getClass().getName(),nameToReplace,original.getClass().getName());
    throw new IncompatibleSubstitutionException(nameToReplace,replacement,original);
  }
  int existingId=getId(replacement);
  if (existingId != -1) {
    FMLLog.severe("The substitute %s for %s is registered into the game independently. This won't work",replacement.getClass().getName(),nameToReplace);
    throw new IllegalArgumentException("The object substitution is already registered. This won't work");
  }
  FMLLog.log(Level.DEBUG,"Adding substitution %s with %s (name %s)",original,replacement,nameToReplace);
  getPersistentSubstitutions().put(nameToReplace,replacement);
}
