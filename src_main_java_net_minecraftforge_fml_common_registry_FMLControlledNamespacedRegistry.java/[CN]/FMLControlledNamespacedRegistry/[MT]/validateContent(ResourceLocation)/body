{
  for (  I obj : typeSafeIterable()) {
    int id=getId(obj);
    ResourceLocation name=getNameForObject(obj);
    boolean isSubstituted=activeSubstitutions.containsKey(name);
    if (name == null)     throw new IllegalStateException(String.format("Registry entry for %s %s, id %d, doesn't yield a name.",registryName,obj,id));
    if (!isSubstituted && id < 0)     throw new IllegalStateException(String.format("Registry entry for %s %s, name %s, doesn't yield an id.",registryName,obj,name));
    if (id > maxId)     throw new IllegalStateException(String.format("Registry entry for %s %s, name %s uses the too large id %d.",registryName,obj,name,id));
    if (isSubstituted)     continue;
    if (getRaw(id) != obj)     throw new IllegalStateException(String.format("Registry entry for id %d, name %s, doesn't yield the expected %s %s.",id,name,registryName,obj));
    if (getRaw(name) != obj)     throw new IllegalStateException(String.format("Registry entry for name %s, id %d, doesn't yield the expected %s %s.",name,id,registryName,obj));
    if (getId(name) != id)     throw new IllegalStateException(String.format("Registry entry for name %s doesn't yield the expected id %d.",name,id));
    if (blockedIds.contains(id))     throw new IllegalStateException(String.format("Registry entry for %s %s, id %d, name %s, marked as dangling.",registryName,obj,id,name));
  }
}
