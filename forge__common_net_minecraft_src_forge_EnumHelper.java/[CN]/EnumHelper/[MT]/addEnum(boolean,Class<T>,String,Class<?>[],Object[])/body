{
  if (!isSetup) {
    setup();
  }
  Field valuesField=null;
  Field[] fields=enumType.getDeclaredFields();
  int flags=Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL| 0x1000;
  String valueType=String.format("[L%s;",enumType.getName().replace('.','/'));
  for (  Field field : fields) {
    if (decompiled) {
      if (field.getName().contains("$VALUES")) {
        valuesField=field;
        break;
      }
    }
 else {
      if ((field.getModifiers() & flags) == flags && field.getType().getName().replace('.','/').equals(valueType)) {
        valuesField=field;
        break;
      }
    }
  }
  valuesField.setAccessible(true);
  try {
    T[] previousValues=(T[])valuesField.get(enumType);
    List<T> values=new ArrayList<T>(Arrays.asList(previousValues));
    T newValue=(T)makeEnum(decompiled,enumType,enumName,values.size(),paramTypes,paramValues);
    values.add(newValue);
    setFailsafeFieldValue(valuesField,null,values.toArray((T[])Array.newInstance(enumType,0)));
    cleanEnumCache(enumType);
    return newValue;
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e.getMessage(),e);
  }
}
