def rename_class(data, indent='3', MCP=False):
    METHOD_REG = ('^ {%s}(\\w+\\s+\\S.*\\.*(|static )(?:\\{|\\);|})$' % indent)
    CATCH_REG = 'catch \\((.*)\\) {'
    if MCP:
        if (indent == '3'):
            indent = '4'
        METHOD_REG = ('^ {%s}(\\w+\\s+\\S.*\\(.*|static)$' % indent)
        CATCH_REG = 'catch \\((.*)\\)$'
    lines = data.split('\n')
    output = ''
    inside_method = False
    method = ''
    method_variables = []
    skip = False
    for line in lines:
        line += '\n'
        if (re.search(METHOD_REG, line) and (not re.search('=', line)) and (not re.search('\\(.*\\(', line))):
            if re.search('\\(.+\\)', line):
                method_variables += [s.strip() for s in re.search('\\((.+)\\)', line).group(1).split(',')]
            method += line
            skip = True
            if (not re.search('(}|\\);|throws .+?;)$', line)):
                inside_method = True
        elif re.search(('^ {%s}}$' % indent), line):
            inside_method = False
        if inside_method:
            if skip:
                skip = False
                continue
            method += line
            m = re.search(CATCH_REG, line)
            if m:
                method_variables += [m.group(1)]
            else:
                method_variables += map((lambda x: x.group(0)), filter((lambda x: ((not re.match('^(return)', x.group(0))) and (not re.match('^(throw)', x.group(0))))), re.finditer('([a-z_$][a-z0-9_\\[\\]]+ var\\d+)', line, re.I)))
        else:
            if method:
                namer = VarNamer()
                todo = map((lambda x: [x, namer.get_name(x.split(' ')[0], x)]), method_variables)
                todo.reverse()
                for mapping in todo:
                    if (not (' ' in mapping[0])):
                        continue
                    original = mapping[0].split(' ')[1]
                    to = mapping[1]
                    if (not re.match('var\\d+', original)):
                        continue
                    method = method.replace(original, to)
                output += method
                method = ''
                method_variables = []
            if skip:
                skip = False
                continue
            output += line
    return output[:(-1)]
