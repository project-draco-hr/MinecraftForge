{
  NBTTagCompound fmlData=new NBTTagCompound();
  NBTTagList modList=new NBTTagList();
  for (  ModContainer mc : Loader.instance().getActiveModList()) {
    NBTTagCompound mod=new NBTTagCompound();
    mod.setString("ModId",mc.getModId());
    mod.setString("ModVersion",mc.getVersion());
    modList.appendTag(mod);
  }
  fmlData.setTag("ModList",modList);
  NBTTagCompound registries=new NBTTagCompound();
  fmlData.setTag("Registries",registries);
  FMLLog.fine("Gathering id map for writing to world save %s",info.getWorldName());
  GameData.GameDataSnapshot dataSnapshot=GameData.takeSnapshot();
  for (  Map.Entry<String,GameData.GameDataSnapshot.Entry> e : dataSnapshot.entries.entrySet()) {
    NBTTagCompound data=new NBTTagCompound();
    registries.setTag(e.getKey(),data);
    NBTTagList ids=new NBTTagList();
    for (    Entry<String,Integer> item : e.getValue().ids.entrySet()) {
      NBTTagCompound tag=new NBTTagCompound();
      tag.setString("K",item.getKey());
      tag.setInteger("V",item.getValue());
      ids.appendTag(tag);
    }
    data.setTag("ids",ids);
    NBTTagList aliases=new NBTTagList();
    for (    Entry<String,String> entry : e.getValue().aliases.entrySet()) {
      NBTTagCompound tag=new NBTTagCompound();
      tag.setString("K",entry.getKey());
      tag.setString("V",entry.getValue());
      aliases.appendTag(tag);
    }
    data.setTag("aliases",aliases);
    NBTTagList subs=new NBTTagList();
    for (    String entry : e.getValue().substitutions) {
      NBTTagCompound tag=new NBTTagCompound();
      tag.setString("K",entry);
      subs.appendTag(tag);
    }
    data.setTag("substitutions",subs);
    int[] blocked=new int[e.getValue().blocked.size()];
    int idx=0;
    for (    Integer i : e.getValue().blocked) {
      blocked[idx++]=i;
    }
    data.setIntArray("blocked",blocked);
  }
  return fmlData;
}
