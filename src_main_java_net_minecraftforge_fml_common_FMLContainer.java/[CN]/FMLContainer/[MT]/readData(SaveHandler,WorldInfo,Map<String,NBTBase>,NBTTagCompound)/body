{
  if (tag.hasKey("ModList")) {
    NBTTagList modList=tag.getTagList("ModList",(byte)10);
    for (int i=0; i < modList.tagCount(); i++) {
      NBTTagCompound mod=modList.getCompoundTagAt(i);
      String modId=mod.getString("ModId");
      String modVersion=mod.getString("ModVersion");
      ModContainer container=Loader.instance().getIndexedModList().get(modId);
      if (container == null) {
        FMLLog.log("fml.ModTracker",Level.ERROR,"This world was saved with mod %s which appears to be missing, things may not work well",modId);
        continue;
      }
      if (!modVersion.equals(container.getVersion())) {
        FMLLog.log("fml.ModTracker",Level.INFO,"This world was saved with mod %s version %s and it is now at version %s, things may not work well",modId,modVersion,container.getVersion());
      }
    }
  }
  List<String> failedElements=null;
  if (tag.hasKey("ModItemData")) {
    StartupQuery.notify("This save predates 1.7.10, it can no longer be loaded here. Please load in 1.7.10 or 1.8 first");
    StartupQuery.abort();
  }
 else   if (tag.hasKey("ItemData")) {
    if (!tag.hasKey("BlockedItemIds")) {
      StartupQuery.notify("This save predates 1.7.10, it can no longer be loaded here. Please load in 1.7.10 or 1.8 first");
      StartupQuery.abort();
    }
    PersistentRegistryManager.GameDataSnapshot snapshot=new PersistentRegistryManager.GameDataSnapshot();
    PersistentRegistryManager.GameDataSnapshot.Entry blocks=new PersistentRegistryManager.GameDataSnapshot.Entry();
    PersistentRegistryManager.GameDataSnapshot.Entry items=new PersistentRegistryManager.GameDataSnapshot.Entry();
    snapshot.entries.put(PersistentRegistryManager.BLOCKS,blocks);
    snapshot.entries.put(PersistentRegistryManager.ITEMS,items);
    NBTTagList list=tag.getTagList("ItemData",10);
    for (int i=0; i < list.tagCount(); i++) {
      NBTTagCompound e=list.getCompoundTagAt(i);
      String name=e.getString("K");
      if (name.charAt(0) == '\u0001')       blocks.ids.put(new ResourceLocation(name.substring(1)),e.getInteger("V"));
 else       if (name.charAt(0) == '\u0002')       items.ids.put(new ResourceLocation(name.substring(1)),e.getInteger("V"));
    }
    Set<Integer> blockedIds=new HashSet<Integer>();
    for (    int id : tag.getIntArray("BlockedItemIds")) {
      blockedIds.add(id);
    }
    blocks.blocked.addAll(blockedIds);
    items.blocked.addAll(blockedIds);
    list=tag.getTagList("BlockAliases",10);
    for (int i=0; i < list.tagCount(); i++) {
      NBTTagCompound dataTag=list.getCompoundTagAt(i);
      blocks.aliases.put(new ResourceLocation(dataTag.getString("K")),new ResourceLocation(dataTag.getString("V")));
    }
    if (tag.hasKey("BlockSubstitutions",9)) {
      list=tag.getTagList("BlockSubstitutions",10);
      for (int i=0; i < list.tagCount(); i++) {
        NBTTagCompound dataTag=list.getCompoundTagAt(i);
        blocks.substitutions.add(new ResourceLocation(dataTag.getString("K")));
      }
    }
    list=tag.getTagList("ItemAliases",10);
    for (int i=0; i < list.tagCount(); i++) {
      NBTTagCompound dataTag=list.getCompoundTagAt(i);
      items.aliases.put(new ResourceLocation(dataTag.getString("K")),new ResourceLocation(dataTag.getString("V")));
    }
    if (tag.hasKey("ItemSubstitutions",9)) {
      list=tag.getTagList("ItemSubstitutions",10);
      for (int i=0; i < list.tagCount(); i++) {
        NBTTagCompound dataTag=list.getCompoundTagAt(i);
        items.substitutions.add(new ResourceLocation(dataTag.getString("K")));
      }
    }
    failedElements=PersistentRegistryManager.injectSnapshot(snapshot,true,true);
  }
 else   if (tag.hasKey("Registries")) {
    PersistentRegistryManager.GameDataSnapshot snapshot=new PersistentRegistryManager.GameDataSnapshot();
    NBTTagCompound regs=tag.getCompoundTag("Registries");
    for (    String key : regs.getKeySet()) {
      PersistentRegistryManager.GameDataSnapshot.Entry entry=new PersistentRegistryManager.GameDataSnapshot.Entry();
      ResourceLocation entryLoc;
      if ("fml:blocks".equals(key))       entryLoc=PersistentRegistryManager.BLOCKS;
 else       if ("fml:items".equals(key))       entryLoc=PersistentRegistryManager.ITEMS;
 else       if ("fmlgr:villagerprofessions".equals(key))       entryLoc=new ResourceLocation("minecraft:villagerprofessions");
 else       entryLoc=new ResourceLocation(key);
      snapshot.entries.put(entryLoc,entry);
      NBTTagList list=regs.getCompoundTag(key).getTagList("ids",10);
      for (int x=0; x < list.tagCount(); x++) {
        NBTTagCompound e=list.getCompoundTagAt(x);
        entry.ids.put(new ResourceLocation(e.getString("K")),e.getInteger("V"));
      }
      list=regs.getCompoundTag(key).getTagList("aliases",10);
      for (int x=0; x < list.tagCount(); x++) {
        NBTTagCompound e=list.getCompoundTagAt(x);
        entry.aliases.put(new ResourceLocation(e.getString("K")),new ResourceLocation(e.getString("V")));
      }
      list=regs.getCompoundTag(key).getTagList("substitutions",10);
      for (int x=0; x < list.tagCount(); x++) {
        NBTTagCompound e=list.getCompoundTagAt(x);
        entry.substitutions.add(new ResourceLocation(e.getString("K")));
      }
      int[] blocked=regs.getCompoundTag(key).getIntArray("blocked");
      for (      int i : blocked) {
        entry.blocked.add(i);
      }
    }
    failedElements=PersistentRegistryManager.injectSnapshot(snapshot,true,true);
  }
  if (failedElements != null && !failedElements.isEmpty()) {
    String text="Forge Mod Loader could not load this save.\n\n" + "There are " + failedElements.size() + " unassigned blocks and items in this save.\n"+ "You will not be able to load until they are present again.\n\n"+ "Missing Blocks/Items:\n";
    for (    String s : failedElements)     text+=s + "\n";
    StartupQuery.notify(text);
    StartupQuery.abort();
  }
}
