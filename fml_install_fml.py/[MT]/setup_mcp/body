def setup_mcp(fml_dir, mcp_dir, dont_gen_conf=True):
    backup = os.path.join(mcp_dir, 'runtime', 'commands.py.bck')
    runtime = os.path.join(mcp_dir, 'runtime', 'commands.py')
    patch = os.path.join(fml_dir, 'commands.patch')
    print 'Setting up MCP'
    if os.path.isfile(backup):
        print '> Restoring commands.py backup'
        if os.path.exists(runtime):
            os.remove(runtime)
        shutil.copy(backup, runtime)
    else:
        print '> Backing up commands.py'
        shutil.copy(runtime, backup)
    if (not os.path.isfile(patch)):
        return
    temp = os.path.abspath('temp.patch')
    cmd = ('patch -i "%s" ' % temp)
    windows = (os.name == 'nt')
    if windows:
        applydiff = os.path.abspath(os.path.join(mcp_dir, 'runtime', 'bin', 'applydiff.exe'))
        cmd = ('"%s" -uf -i "%s"' % (applydiff, temp))
    if (os.sep == '\\'):
        cmd = cmd.replace('\\', '\\\\')
    cmd = shlex.split(cmd)
    if windows:
        print ('Patching file %s' % os.path.normpath(runtime))
    fix_patch(patch, temp)
    process = subprocess.Popen(cmd, cwd=os.path.join(mcp_dir, 'runtime'), bufsize=(-1))
    process.communicate()
    if os.path.isfile(temp):
        os.remove(temp)
    mcp_conf = os.path.join(mcp_dir, 'conf')
    mcp_conf_bak = os.path.join(mcp_dir, 'conf.bak')
    fml_conf = os.path.join(fml_dir, 'conf')
    if (not dont_gen_conf):
        if os.path.isdir(mcp_conf_bak):
            print 'Reverting old conf backup folder'
            shutil.rmtree(mcp_conf)
            os.rename(mcp_conf_bak, mcp_conf)
        get_conf_copy(mcp_dir, fml_dir)
        print 'Backing up MCP Conf'
        os.rename(mcp_conf, mcp_conf_bak)
    else:
        shutil.rmtree(mcp_conf)
    print 'Copying FML conf'
    shutil.copytree(fml_conf, mcp_conf)
    print 'Fixing MCP Workspace'
    merge_tree(os.path.join(fml_dir, 'eclipse'), os.path.join(mcp_dir, 'eclipse'))
