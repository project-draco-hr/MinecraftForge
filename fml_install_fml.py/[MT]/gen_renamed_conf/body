def gen_renamed_conf(mcp_dir, fml_dir):
    pkg_file = os.path.join(fml_dir, 'conf', 'packages.csv')
    srg_in = os.path.join(mcp_dir, 'conf', 'joined.srg')
    srg_out = os.path.join(mcp_dir, 'conf', 'packaged.srg')
    exc_in = os.path.join(mcp_dir, 'conf', 'joined.exc')
    exc_out = os.path.join(mcp_dir, 'conf', 'packaged.exc')
    pkgs = {}
    if os.path.isfile(pkg_file):
        with open(pkg_file) as fh:
            reader = csv.DictReader(fh)
            for line in reader:
                pkgs[line['class']] = line['package']
    print 'Creating re-packaged srg'
    with open(srg_in, 'r') as inf:
        with open(srg_out, 'wb') as outf:
            for line in inf:
                pts = line.rstrip('\r\n').split(' ')
                if (pts[0] == 'PK:'):
                    outf.write((' '.join(pts) + '\n'))
                elif (pts[0] == 'CL:'):
                    pts[2] = repackage_class(pkgs, pts[2])
                    outf.write(('CL: %s %s\n' % (pts[1], pts[2])))
                elif (pts[0] == 'FD:'):
                    tmp = pts[2].rsplit('/', 1)
                    tmp[0] = repackage_class(pkgs, tmp[0])
                    outf.write(('FD: %s %s/%s\n' % (pts[1], tmp[0], tmp[1])))
                elif (pts[0] == 'MD:'):
                    tmp = pts[3].rsplit('/', 1)
                    pts[3] = ('%s/%s' % (repackage_class(pkgs, tmp[0]), tmp[1]))
                    pts[4] = repackage_signature(pkgs, pts[4])
                    outf.write(('MD: %s %s %s %s\n' % (pts[1], pts[2], pts[3], pts[4])))
                else:
                    print ('Line unknown in SRG: ' + line)
                    outf.write(line)
    excre = re.compile('([\\[ZBCSIJFDV]|L([\\w\\/]+);)')
    print 'Creating re-packaged exc'
    with open(exc_in, 'r') as inf:
        with open(exc_out, 'wb') as outf:
            for line in inf:
                line = line.rstrip('\r\n')
                cls = line.split('.')[0]
                named = line.rsplit('=', 1)[1]
                line = line[(len(cls) + 1):(((-1) * len(named)) - 1)]
                func = line.split('(')[0]
                tmp = named.split('|', 1)
                if (len(tmp[0]) > 0):
                    excs = tmp[0].split(',')
                    for x in range(len(excs)):
                        excs[x] = repackage_class(pkgs, excs[x])
                    named = ('%s|%s' % (','.join(excs), tmp[1]))
                sig = repackage_signature(pkgs, line[len(func):])
                cls = repackage_class(pkgs, cls)
                outf.write(('%s.%s%s=%s\n' % (cls, func, sig, named)))
    print 'Creating re-packaged MCP patches'

    def fix_patches(patch_in, patch_tmp):
        regnms = re.compile('net\\\\minecraft\\\\src\\\\(\\w+)')
        with open(patch_in, 'r') as fh:
            buf = fh.read()

            def mapname(match):
                return repackage_class(pkgs, match.group(0).replace('\\', '/')).replace('/', '\\')
            buf = regnms.sub(mapname, buf)
        with open(patch_tmp, 'w') as fh:
            fh.write(buf)
        shutil.move(patch_tmp, patch_in)
    patch_dir = os.path.join(mcp_dir, 'conf', 'patches')
    fix_patches(os.path.join(patch_dir, 'minecraft_ff.patch'), os.path.join(patch_dir, 'tmp.patch'))
    fix_patches(os.path.join(patch_dir, 'minecraft_server_ff.patch'), os.path.join(patch_dir, 'tmp.patch'))
