def create_merged_srg(mcp_dir, fml_dir):
    client_file = os.path.join(mcp_dir, 'conf', 'client.srg')
    server_file = os.path.join(mcp_dir, 'conf', 'server.srg')
    if ((not os.path.isfile(client_file)) or (not os.path.isfile(server_file))):
        print ('    Could not find client and server srg files in "%s"' % mcp_dir)
        return False
    client = load_srg(client_file)
    server = load_srg(server_file)
    common = {'PK:': {}, 'CL:': {}, 'FD:': {}, 'MD:': {}, }
    for type in common:
        for (key, value) in client[type].items():
            if (key in server[type]):
                if (value == server[type][key]):
                    client[type].pop(key)
                    server[type].pop(key)
                    common[type][key] = value
    for type in common:
        for (key, value) in client[type].items():
            common[type][key] = (value + ' #C')
    for type in common:
        for (key, value) in server[type].items():
            common[type][key] = (value + ' #S')
    if (not (fml_dir is None)):
        with open(os.path.join(fml_dir, 'conf', 'joined.srg'), 'wb') as f:
            for type in ['PK:', 'CL:', 'FD:', 'MD:']:
                for key in sorted(common[type]):
                    f.write(('%s %s %s\n' % (type, key, common[type][key])))
    return common
