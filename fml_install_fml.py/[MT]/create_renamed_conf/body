def create_renamed_conf(mcp_dir, fml_dir):
    print 'Creating Repackaged data'
    pkg_file = os.path.join(fml_dir, 'conf', 'packages.csv')
    pkgs = {}
    if os.path.isfile(pkg_file):
        with closing(open(pkg_file)) as fh:
            reader = csv.DictReader(fh)
            for line in reader:
                pkgs[line['class']] = line['package']

    def repackage_class(pkgs, cls):
        if cls.startswith('net/minecraft/src/'):
            tmp = cls[18:]
            if (tmp in pkgs.keys()):
                return ('%s/%s' % (pkgs[tmp], tmp))
        return cls
    for ext in ['srg', 'exc']:
        regnms = re.compile('net/minecraft/src/(\\w+)')
        print ('    Creating re-packaged %s' % ext)
        buf = read_file(os.path.join(mcp_dir, 'conf', ('joined.%s' % ext)))

        def mapname(match):
            return repackage_class(pkgs, match.group(0))
        buf = regnms.sub(mapname, buf)
        with closing(open(os.path.join(mcp_dir, 'conf', ('packaged.%s' % ext)), 'wb')) as outf:
            outf.write(buf)
    print '    Creating re-packaged MCP patches'

    def fix_patches(patch_in, patch_tmp):
        regnms = re.compile('net\\\\minecraft\\\\src\\\\(\\w+)')
        with closing(open(patch_in, 'r')) as fh:
            buf = fh.read()

            def mapname(match):
                return repackage_class(pkgs, match.group(0).replace('\\', '/')).replace('/', '\\')
            buf = regnms.sub(mapname, buf)
        with closing(open(patch_tmp, 'w')) as fh:
            fh.write(buf)
        shutil.move(patch_tmp, patch_in)
    patch_dir = os.path.join(mcp_dir, 'conf', 'patches')
    fix_patches(os.path.join(patch_dir, 'minecraft_ff.patch'), os.path.join(patch_dir, 'tmp.patch'))
    fix_patches(os.path.join(patch_dir, 'minecraft_server_ff.patch'), os.path.join(patch_dir, 'tmp.patch'))
