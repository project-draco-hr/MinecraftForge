def merge_client_server(mcp_dir):
    client = os.path.join(mcp_dir, 'src', 'minecraft')
    shared = os.path.join(mcp_dir, 'src', 'common')
    client_jar = os.path.join(mcp_dir, 'jars', 'bin', 'minecraft.jar')
    server_jar = os.path.join(mcp_dir, 'jars', 'minecraft_server.jar')
    joined_srg = get_joined_srg(mcp_dir)['CL:']
    if ((not os.path.isfile(client_jar)) or (not os.path.isfile(server_jar))):
        return
    if (not os.path.isdir(shared)):
        os.makedirs(shared)
    server_classes = []
    zip = ZipFile(server_jar)
    for i in zip.filelist:
        if i.filename.endswith('.class'):
            server_classes.append(i.filename[:(-6)])
    for cls in server_classes:
        if (cls in joined_srg.keys()):
            cls = joined_srg[cls]
        cls += '.java'
        f_client = os.path.normpath(os.path.join(client, cls.replace('/', os.path.sep))).replace(os.path.sep, '/')
        f_shared = os.path.normpath(os.path.join(shared, cls.replace('/', os.path.sep))).replace(os.path.sep, '/')
        if (not os.path.isfile(f_client)):
            print ('Issue Merging File Not Found: ' + cls)
            continue
        if (not (cls.rfind('/') == (-1))):
            new_dir = os.path.join(shared, cls.rsplit('/', 1)[0])
            if (not os.path.isdir(new_dir)):
                os.makedirs(new_dir)
        shutil.move(f_client, f_shared)
    cleanDirs(client)
