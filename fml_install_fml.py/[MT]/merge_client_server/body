def merge_client_server(mcp_dir):
    client = os.path.join(mcp_dir, 'src', 'minecraft')
    server = os.path.join(mcp_dir, 'src', 'minecraft_server')
    shared = os.path.join(mcp_dir, 'src', 'common')
    if (not os.path.isdir(shared)):
        os.makedirs(shared)
    if ((not os.path.isdir(client)) or (not os.path.isdir(server))):
        return
    if (not os.path.isdir(shared)):
        os.makedirs(shared)
    special_cases = ['GuiStatsComponent.java', 'HttpUtilRunnable.java', 'PlayerUsageSnooper.java', 'RConThreadClient.java']
    for (path, _, filelist) in os.walk(client, followlinks=True):
        for cur_file in filelist:
            f_client = os.path.normpath(os.path.join(client, path[(len(client) + 1):], cur_file)).replace(os.path.sep, '/')
            f_server = os.path.normpath(os.path.join(server, path[(len(client) + 1):], cur_file)).replace(os.path.sep, '/')
            f_shared = os.path.normpath(os.path.join(shared, path[(len(client) + 1):], cur_file)).replace(os.path.sep, '/')
            if ((not os.path.isfile(f_client)) or (not os.path.isfile(f_server))):
                continue
            md5_c = ''
            md5_s = ''
            with open(f_client, 'rb') as fh:
                md5_c = md5(fh.read()).hexdigest()
            with open(f_server, 'rb') as fh:
                md5_s = md5(fh.read()).hexdigest()
            if ((md5_c != md5_s) and (not (cur_file in special_cases))):
                continue
            new_dir = os.path.join(shared, path[(len(client) + 1):])
            if (not os.path.isdir(new_dir)):
                os.makedirs(new_dir)
            shutil.move(f_client, f_shared)
            os.remove(f_server)
    cleanDirs(server)
    cleanDirs(client)
