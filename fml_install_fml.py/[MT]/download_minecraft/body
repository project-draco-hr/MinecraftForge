def download_minecraft(mcp_dir, fml_dir, version=None):
    mc_info = read_mc_versions(fml_dir, version=version, work_dir=os.path.join(mcp_dir, 'jars'))
    failed = False
    if mc_info['new_launcher']:
        if os.path.isdir(os.path.join(fml_dir, 'jsons')):
            json_file = os.path.join(fml_dir, 'jsons', ('%s-dev.json' % mc_info['version']))
        else:
            json_file = os.path.join(fml_dir, 'fml.json')
        version_json = None
        try:
            version_json = json.load(open(json_file))
        except Exception as e:
            print ('Failed to load version json: %s' % json_file)
            sys.exit(1)
        failed = (download_libraries(mcp_dir, version_json['libraries'], mc_info['natives_dir']) or failed)
        if os.path.isfile(mc_info['json_file']):
            os.remove(mc_info['json_file'])
        shutil.copy(json_file, mc_info['json_file'])
    else:
        failed = ((not download_list(mc_info['downloads'])) or failed)
    for type in ['client', 'server']:
        print ('Backing up %s' % type)
        file_backup(mc_info[('%s_file' % type)], mc_info[('%s_md5' % type)])
        failed = ((not download_file(mc_info[('%s_url' % type)], mc_info[('%s_file' % type)], mc_info[('%s_md5' % type)])) or failed)
        file_backup(mc_info[('%s_file' % type)], mc_info[('%s_md5' % type)])
    if failed:
        print 'Something failed verifying minecraft files, see log for details.'
        sys.exit(1)
