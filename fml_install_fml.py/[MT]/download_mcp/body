def download_mcp(fml_dir, mcp_dir, version=None):
    if os.path.isfile(os.path.join(mcp_dir, 'runtime', 'commands.py')):
        print 'MCP Detected already, not downloading'
        return True
    if os.path.isdir(mcp_dir):
        print ("Old MCP Directory exists, but MCP was not detected, please delete MCP directory at '%s'" % mcp_dir)
        sys.exit(1)
    mc_info = read_mc_versions(fml_dir, version=version)
    print 'Checking MCP zip (may take time to download)'
    if (not download_file(mc_info['mcp_url'], mc_info['mcp_file'], mc_info['mcp_md5'])):
        sys.exit(1)
    if (not os.path.isdir(mcp_dir)):
        _mkdir(mcp_dir)
    print ("Extracting MCP to '%s'" % mcp_dir)
    extract_zip(mc_info['mcp_file'], mcp_dir, filter=['eclipse'])
    if (os.name != 'nt'):
        for (path, _, filelist) in os.walk(mcp_dir):
            for cur_file in fnmatch.filter(filelist, '*.sh'):
                file_name = os.path.join(path, cur_file)
                process = subprocess.Popen(cmdsplit(('chmod +x "%s"' % file_name)), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=(-1))
                (output, _) = process.communicate()
        process = subprocess.Popen(cmdsplit(('chmod +x "%s/runtime/bin/astyle-osx"' % mcp_dir)), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=(-1))
        (output, _) = process.communicate()
    data_dir = os.path.join(fml_dir, 'mcp_data')
    if os.path.isdir(data_dir):
        print 'Moving mcp_data to MCP'
        merge_tree(data_dir, mcp_dir)
    return True
