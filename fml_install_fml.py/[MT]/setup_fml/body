def setup_fml(fml_dir, mcp_dir):
    sys.path.append(mcp_dir)
    from runtime.decompile import decompile
    from runtime.cleanup import cleanup
    from runtime.commands import Commands, CLIENT, SERVER
    src_dir = os.path.join(mcp_dir, 'src')
    if os.path.isdir(src_dir):
        os.chdir(mcp_dir)
        cleanup(None, False)
        reset_logger()
        os.chdir(fml_dir)
    if os.path.isdir(src_dir):
        print 'Please make sure to backup your modified files, and say yes when it asks you to do cleanup.'
        sys.exit(1)
    if (not download_deps(mcp_dir)):
        sys.exit(1)

    def applyrg_shunt(self, side, reobf=False, applyrg_real=Commands.applyrg):
        jars = {CLIENT: self.jarclient, SERVER: self.jarserver, }
        binDir = os.path.join(fml_dir, 'bin')
        if (not os.path.isdir(binDir)):
            os.makedirs(binDir)
        if (side == CLIENT):
            self.logger.info('> Compiling AccessTransformer')
            forkcmd = ('%s -Xlint:-options -deprecation -g -source 1.6 -target 1.6 -classpath "{classpath}" -sourcepath "{sourcepath}" -d "{outpath}" "{target}"' % self.cmdjavac).format(classpath=os.pathsep.join(['.', os.path.join(mcp_dir, 'lib', '*')]), sourcepath=os.path.join(fml_dir, 'common'), outpath=os.path.join(fml_dir, 'bin'), target=os.path.join(fml_dir, 'common', 'cpw', 'mods', 'fml', 'common', 'asm', 'transformers', 'AccessTransformer.java'))
            if (not runcmd(self, forkcmd, echo=False)):
                sys.exit(1)
            self.logger.info('> Compiling MCPMerger')
            forkcmd = ('%s -Xlint:-options -deprecation -g -source 1.6 -target 1.6 -classpath "{classpath}" -sourcepath "{sourcepath}" -d "{outpath}" "{target}"' % self.cmdjavac).format(classpath=os.pathsep.join(['.', os.path.join(mcp_dir, 'lib', '*')]), sourcepath=os.path.join(fml_dir, 'common'), outpath=os.path.join(fml_dir, 'bin'), target=os.path.join(fml_dir, 'common', 'cpw', 'mods', 'fml', 'common', 'asm', 'transformers', 'MCPMerger.java'))
            if (not runcmd(self, forkcmd, echo=False)):
                sys.exit(1)
            self.logger.info('> Running MCPMerger')
            forkcmd = ('%s -classpath "{classpath}" cpw.mods.fml.common.asm.transformers.MCPMerger "{mergecfg}" "{client}" "{server}"' % self.cmdjava).format(classpath=os.pathsep.join([os.path.join(mcp_dir, 'lib', '*'), binDir]), mergecfg=os.path.join(fml_dir, 'mcp_merge.cfg'), client=jars[CLIENT], server=jars[SERVER])
            if (not runcmd(self, forkcmd)):
                sys.exit(1)
        self.logger.info('> Running AccessTransformer')
        forkcmd = ('%s -classpath "{classpath}" cpw.mods.fml.common.asm.transformers.AccessTransformer "{jar}" "{fmlconfig}"' % self.cmdjava).format(classpath=os.pathsep.join([os.path.join(mcp_dir, 'lib', '*'), binDir]), jar=jars[side], fmlconfig=os.path.join(fml_dir, 'common', 'fml_at.cfg'))
        forge_cfg = os.path.join(mcp_dir, 'forge', 'common', 'forge_at.cfg')
        if os.path.isfile(forge_cfg):
            self.logger.info('   Forge config detected')
            forkcmd += (' "%s"' % forge_cfg)
        if (not runcmd(self, forkcmd)):
            sys.exit(1)
        self.logger.info('> Really Applying Retroguard')
        applyrg_real(self, side, reobf)

    def checkjars_shunt(self, side, checkjars_real=Commands.checkjars):
        self.jarclient = (self.jarclient + '.backup')
        self.jarserver = (self.jarserver + '.backup')
        ret = checkjars_real(self, side)
        self.jarclient = self.jarclient[:(-7)]
        self.jarserver = self.jarserver[:(-7)]
        return ret
    try:
        pre_decompile(mcp_dir, fml_dir)
        os.chdir(mcp_dir)
        Commands.applyrg = applyrg_shunt
        Commands.checkjars = checkjars_shunt
        decompile(None, False, False, True, True, False, True, False, False, False, False)
        reset_logger()
        os.chdir(fml_dir)
        post_decompile(mcp_dir, fml_dir)
    except SystemExit as e:
        print ('Decompile Exception: %d ' % e.code)
        raise e
    if (not os.path.isdir(src_dir)):
        print ('Something went wrong, src folder not found at: %s' % src_dir)
        sys.exit(1)
    cleanup_source(src_dir)
    merge_client_server(mcp_dir)
    os.chdir(mcp_dir)
    commands = Commands(verify=True)
    updatemd5_side(mcp_dir, commands, CLIENT)
    updatemd5_side(mcp_dir, commands, SERVER)
    reset_logger()
    os.chdir(fml_dir)
