def download_libraries(mcp_dir, libraries):
    lib_dir = os.path.join(mcp_dir, 'jars', 'libraries')
    base_url = 'https://s3.amazonaws.com/Minecraft.Download/libraries'
    downloads = []
    failed = False
    for lib in libraries:
        name = lib['name'].split(':')
        domain = name[0].split('.')
        root = name[1]
        version = name[2]
        path = (domain + [root, version])
        extract = None
        if ('extract' in lib.keys()):
            extract = lib['extract']
        file_names = [('%s-%s.jar' % (root, version))]
        if ('natives' in lib.keys()):
            file_names = []
            for (k, v) in lib['natives'].items():
                file_names.append(('%s-%s-%s.jar' % (root, version, v)))
        for file_name in file_names:
            url = ('%s/%s/%s' % (base_url, '/'.join(path), file_name))
            file_path = os.path.join(lib_dir, os.sep.join(path), file_name)
            headers = get_headers(url)
            if (headers is None):
                print ('Could not retreive headers for library: %s ( %s )' % (lib['name'], url))
                failed = True
            else:
                downloads.append({'url': url, 'file': file_path, 'md5': headers['ETag'], 'size': headers['Content-Length'], 'extract': extract, })
    natives_dir = os.path.join(lib_dir, 'natives')
    if (not os.path.isdir(natives_dir)):
        os.makedirs(natives_dir)
    missing = []
    for dl in downloads:
        if os.path.isfile(dl['file']):
            if ((dl['md5'] is None) or (not (get_md5(dl['file']) == dl['md5']))):
                missing.append(dl)
    if (len(missing) == 0):
        return failed
    print ('Downloading %s libraries' % len(missing))
    for dl in missing:
        if download_file(dl['url'], dl['file'], dl['md5'], prefix='    '):
            if (not (dl['extract'] is None)):
                excludes = []
                if ('exclude' in dl['extract'].keys()):
                    excludes = dl['extract']['exclude']

                def is_filtered(name, excludes):
                    for ex in excludes:
                        if name.startswith(ex):
                            return True
                    return name.endswith('/')
                zip = ZipFile(dl['file'])
                for name in zip.namelist():
                    if is_filtered(name, excludes):
                        continue
                    out_file = os.path.join(natives_dir, os.sep.join(name.split('/')))
                    if (not os.path.isfile(out_file)):
                        dir = os.path.dirname(out_file)
                        if (not os.path.isdir(dir)):
                            os.makedirs(dir)
                        print ('        Extracting %s' % name)
                        out = open(out_file, 'wb')
                        out.write(zip.read(name))
                        out.flush()
                        out.close()
                zip.close()
        else:
            failed = True
    return failed
