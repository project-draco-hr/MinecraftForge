def download_libraries(mcp_dir, libraries, natives_dir):
    lib_dir = os.path.join(mcp_dir, 'jars', 'libraries')
    default_url = 'https://s3.amazonaws.com/Minecraft.Download/libraries'
    downloads = []
    failed = False
    for lib in libraries:
        name = lib['name'].split(':')
        domain = name[0].split('.')
        root = name[1]
        version = name[2]
        path = (domain + [root, version])
        extract = None
        root_url = default_url
        if ('extract' in lib.keys()):
            extract = lib['extract']
        if ('url' in lib.keys()):
            root_url = lib['url']
        file_names = [('%s-%s.jar' % (root, version))]
        if ('natives' in lib.keys()):
            file_names = []
            for (k, v) in lib['natives'].items():
                file_names.append(('%s-%s-%s.jar' % (root, version, v)))
        for file_name in file_names:
            url = ('%s/%s/%s' % (root_url, '/'.join(path), file_name))
            file_path = os.path.join(lib_dir, os.sep.join(path), file_name)
            headers = get_headers(url)
            if (headers is None):
                print ('Could not retreive headers for library: %s ( %s )' % (lib['name'], url))
                failed = True
            else:
                downloads.append({'url': url, 'file': file_path, 'md5': headers['ETag'], 'size': headers['Content-Length'], 'extract': extract, })
    return download_list(downloads, natives_dir)
