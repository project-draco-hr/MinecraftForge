{
  if (PARENT != null && PARENT != this) {
    return;
  }
  BufferedReader buffer=null;
  UnicodeInputStreamReader input=null;
  try {
    if (file.getParentFile() != null) {
      file.getParentFile().mkdirs();
    }
    if (!file.exists() && !file.createNewFile()) {
      return;
    }
    if (file.canRead()) {
      input=new UnicodeInputStreamReader(new FileInputStream(file),defaultEncoding);
      defaultEncoding=input.getEncoding();
      buffer=new BufferedReader(input);
      String line;
      ConfigCategory currentCat=null;
      Property.Type type=null;
      ArrayList<String> tmpList=null;
      int lineNum=0;
      String name=null;
      while (true) {
        lineNum++;
        line=buffer.readLine();
        if (line == null) {
          break;
        }
        Matcher start=CONFIG_START.matcher(line);
        Matcher end=CONFIG_END.matcher(line);
        if (start.matches()) {
          fileName=start.group(1);
          categories=new TreeMap<String,ConfigCategory>();
          continue;
        }
 else         if (end.matches()) {
          fileName=end.group(1);
          Configuration child=new Configuration();
          child.categories=categories;
          this.children.put(fileName,child);
          continue;
        }
        int nameStart=-1, nameEnd=-1;
        boolean skip=false;
        boolean quoted=false;
        for (int i=0; i < line.length() && !skip; ++i) {
          if (Character.isLetterOrDigit(line.charAt(i)) || ALLOWED_CHARS.indexOf(line.charAt(i)) != -1 || (quoted && line.charAt(i) != '"')) {
            if (nameStart == -1) {
              nameStart=i;
            }
            nameEnd=i;
          }
 else           if (Character.isWhitespace(line.charAt(i))) {
          }
 else {
switch (line.charAt(i)) {
case '#':
              skip=true;
            continue;
case '"':
          if (quoted) {
            quoted=false;
          }
        if (!quoted && nameStart == -1) {
          quoted=true;
        }
      break;
case '{':
    name=line.substring(nameStart,nameEnd + 1);
  String qualifiedName=ConfigCategory.getQualifiedName(name,currentCat);
ConfigCategory cat=categories.get(qualifiedName);
if (cat == null) {
currentCat=new ConfigCategory(name,currentCat);
categories.put(qualifiedName,currentCat);
}
 else {
currentCat=cat;
}
name=null;
break;
case '}':
if (currentCat == null) {
throw new RuntimeException(String.format("Config file corrupt, attepted to close to many categories '%s:%d'",fileName,lineNum));
}
currentCat=currentCat.parent;
break;
case '=':
name=line.substring(nameStart,nameEnd + 1);
if (currentCat == null) {
throw new RuntimeException(String.format("'%s' has no scope in '%s:%d'",name,fileName,lineNum));
}
Property prop=new Property(name,line.substring(i + 1),type,true);
i=line.length();
currentCat.set(name,prop);
break;
case ':':
type=Property.Type.tryParse(line.substring(nameStart,nameEnd + 1).charAt(0));
nameStart=nameEnd=-1;
break;
case '<':
if (tmpList != null) {
throw new RuntimeException(String.format("Malformed list property \"%s:%d\"",fileName,lineNum));
}
name=line.substring(nameStart,nameEnd + 1);
if (currentCat == null) {
throw new RuntimeException(String.format("'%s' has no scope in '%s:%d'",name,fileName,lineNum));
}
tmpList=new ArrayList<String>();
skip=true;
break;
case '>':
if (tmpList == null) {
throw new RuntimeException(String.format("Malformed list property \"%s:%d\"",fileName,lineNum));
}
currentCat.set(name,new Property(name,tmpList.toArray(new String[tmpList.size()]),type));
name=null;
tmpList=null;
type=null;
break;
default :
throw new RuntimeException(String.format("Unknown character '%s' in '%s:%d'",line.charAt(i),fileName,lineNum));
}
}
}
if (quoted) {
throw new RuntimeException(String.format("Unmatched quote in '%s:%d'",fileName,lineNum));
}
 else if (tmpList != null && !skip) {
tmpList.add(line.trim());
}
}
}
}
 catch (IOException e) {
e.printStackTrace();
}
 finally {
if (buffer != null) {
try {
buffer.close();
}
 catch (IOException e) {
}
}
if (input != null) {
try {
input.close();
}
 catch (IOException e) {
}
}
}
}
