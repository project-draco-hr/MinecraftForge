def gen_merged_srg(mcp_dir, forge_dir):
    print 'Generating merged Retroguard data'
    srg_client = os.path.join(mcp_dir, 'conf', 'client.srg')
    srg_server = os.path.join(mcp_dir, 'conf', 'server.srg')
    if ((not os.path.isfile(srg_client)) or (not os.path.isfile(srg_server))):
        print ('Could not find client and server srg files in "%s"' % mcp_dir)
        return False
    client = {'PK:': {}, 'CL:': {}, 'FD:': {}, 'MD:': {}, }
    with open(srg_client, 'r') as fh:
        for line in fh:
            pts = line.rstrip('\r\n').split(' ')
            if (pts[0] == 'MD:'):
                client[pts[0]][((pts[1] + ' ') + pts[2])] = ((pts[3] + ' ') + pts[4])
            else:
                client[pts[0]][pts[1]] = pts[2]
    server = {'PK:': {}, 'CL:': {}, 'FD:': {}, 'MD:': {}, }
    with open(srg_server, 'r') as fh:
        for line in fh:
            pts = line.rstrip('\r\n').split(' ')
            if (pts[0] == 'MD:'):
                server[pts[0]][((pts[1] + ' ') + pts[2])] = ((pts[3] + ' ') + pts[4])
            else:
                server[pts[0]][pts[1]] = pts[2]
    common = {'PK:': {}, 'CL:': {}, 'FD:': {}, 'MD:': {}, }
    for type in common:
        for (key, value) in client[type].items():
            if (key in server[type]):
                if (value == server[type][key]):
                    client[type].pop(key)
                    server[type].pop(key)
                    common[type][key] = value
    for type in common:
        for (key, value) in client[type].items():
            common[type][key] = (value + ' #C')
    for type in common:
        for (key, value) in server[type].items():
            common[type][key] = (value + ' #S')
    with open(os.path.join(forge_dir, 'conf', 'joined.srg'), 'w') as f:
        for type in ['PK:', 'CL:', 'FD:', 'MD:']:
            for key in sorted(common[type]):
                f.write(('%s %s %s\n' % (type, key, common[type][key])))
