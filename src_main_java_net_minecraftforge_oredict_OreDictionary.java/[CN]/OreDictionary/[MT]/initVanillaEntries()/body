{
  if (!hasInit) {
    registerOre("logWood",new ItemStack(Blocks.log,1,WILDCARD_VALUE));
    registerOre("logWood",new ItemStack(Blocks.log2,1,WILDCARD_VALUE));
    registerOre("plankWood",new ItemStack(Blocks.planks,1,WILDCARD_VALUE));
    registerOre("slabWood",new ItemStack(Blocks.wooden_slab,1,WILDCARD_VALUE));
    registerOre("stairWood",Blocks.oak_stairs);
    registerOre("stairWood",Blocks.spruce_stairs);
    registerOre("stairWood",Blocks.birch_stairs);
    registerOre("stairWood",Blocks.jungle_stairs);
    registerOre("stairWood",Blocks.acacia_stairs);
    registerOre("stairWood",Blocks.dark_oak_stairs);
    registerOre("stickWood",Items.stick);
    registerOre("treeSapling",new ItemStack(Blocks.sapling,1,WILDCARD_VALUE));
    registerOre("treeLeaves",new ItemStack(Blocks.leaves,1,WILDCARD_VALUE));
    registerOre("treeLeaves",new ItemStack(Blocks.leaves2,1,WILDCARD_VALUE));
    registerOre("oreGold",Blocks.gold_ore);
    registerOre("oreIron",Blocks.iron_ore);
    registerOre("oreLapis",Blocks.lapis_ore);
    registerOre("oreDiamond",Blocks.diamond_ore);
    registerOre("oreRedstone",Blocks.redstone_ore);
    registerOre("oreEmerald",Blocks.emerald_ore);
    registerOre("oreQuartz",Blocks.quartz_ore);
    registerOre("oreCoal",Blocks.coal_ore);
    registerOre("stone",Blocks.stone);
    registerOre("cobblestone",Blocks.cobblestone);
    registerOre("record",Items.record_13);
    registerOre("record",Items.record_cat);
    registerOre("record",Items.record_blocks);
    registerOre("record",Items.record_chirp);
    registerOre("record",Items.record_far);
    registerOre("record",Items.record_mall);
    registerOre("record",Items.record_mellohi);
    registerOre("record",Items.record_stal);
    registerOre("record",Items.record_strad);
    registerOre("record",Items.record_ward);
    registerOre("record",Items.record_11);
    registerOre("record",Items.record_wait);
  }
  Map<ItemStack,String> replacements=new HashMap<ItemStack,String>();
  replacements.put(new ItemStack(Items.stick),"stickWood");
  replacements.put(new ItemStack(Blocks.planks),"plankWood");
  replacements.put(new ItemStack(Blocks.planks,1,WILDCARD_VALUE),"plankWood");
  replacements.put(new ItemStack(Blocks.stone),"stone");
  replacements.put(new ItemStack(Blocks.stone,1,WILDCARD_VALUE),"stone");
  replacements.put(new ItemStack(Blocks.cobblestone),"cobblestone");
  replacements.put(new ItemStack(Blocks.cobblestone,1,WILDCARD_VALUE),"cobblestone");
  String[] dyes={"dyeBlack","dyeRed","dyeGreen","dyeBrown","dyeBlue","dyePurple","dyeCyan","dyeLightGray","dyeGray","dyePink","dyeLime","dyeYellow","dyeLightBlue","dyeMagenta","dyeOrange","dyeWhite"};
  for (int i=0; i < 16; i++) {
    ItemStack dye=new ItemStack(Items.dye,1,i);
    if (!hasInit) {
      registerOre(dyes[i],dye);
    }
    replacements.put(dye,dyes[i]);
  }
  hasInit=true;
  ItemStack[] replaceStacks=replacements.keySet().toArray(new ItemStack[replacements.keySet().size()]);
  ItemStack[] exclusions=new ItemStack[]{new ItemStack(Blocks.lapis_block),new ItemStack(Items.cookie),new ItemStack(Blocks.stonebrick),new ItemStack(Blocks.stone_slab),new ItemStack(Blocks.stone_stairs),new ItemStack(Blocks.cobblestone_wall),new ItemStack(Blocks.oak_stairs),new ItemStack(Blocks.spruce_stairs),new ItemStack(Blocks.birch_stairs),new ItemStack(Blocks.jungle_stairs),new ItemStack(Blocks.acacia_stairs),new ItemStack(Blocks.dark_oak_stairs)};
  List recipes=CraftingManager.getInstance().getRecipeList();
  List<IRecipe> recipesToRemove=new ArrayList<IRecipe>();
  List<IRecipe> recipesToAdd=new ArrayList<IRecipe>();
  for (  Object obj : recipes) {
    if (obj instanceof ShapedRecipes) {
      ShapedRecipes recipe=(ShapedRecipes)obj;
      ItemStack output=recipe.getRecipeOutput();
      if (output != null && containsMatch(false,exclusions,output)) {
        continue;
      }
      if (containsMatch(true,recipe.recipeItems,replaceStacks)) {
        recipesToRemove.add(recipe);
        recipesToAdd.add(new ShapedOreRecipe(recipe,replacements));
      }
    }
 else     if (obj instanceof ShapelessRecipes) {
      ShapelessRecipes recipe=(ShapelessRecipes)obj;
      ItemStack output=recipe.getRecipeOutput();
      if (output != null && containsMatch(false,exclusions,output)) {
        continue;
      }
      if (containsMatch(true,(ItemStack[])recipe.recipeItems.toArray(new ItemStack[recipe.recipeItems.size()]),replaceStacks)) {
        recipesToRemove.add((IRecipe)obj);
        IRecipe newRecipe=new ShapelessOreRecipe(recipe,replacements);
        recipesToAdd.add(newRecipe);
      }
    }
  }
  recipes.removeAll(recipesToRemove);
  recipes.addAll(recipesToAdd);
  if (recipesToRemove.size() > 0) {
    FMLLog.info("Replaced %d ore recipies",recipesToRemove.size());
  }
}
