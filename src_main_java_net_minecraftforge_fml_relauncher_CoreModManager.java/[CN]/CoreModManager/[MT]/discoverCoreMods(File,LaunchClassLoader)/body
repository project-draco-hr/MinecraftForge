{
  ModListHelper.parseModList(mcDir);
  FMLRelaunchLog.fine("Discovering coremods");
  File coreMods=setupCoreModDir(mcDir);
  FilenameFilter ff=new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(".jar");
    }
  }
;
  FilenameFilter derpfilter=new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(".jar.zip");
    }
  }
;
  File[] derplist=coreMods.listFiles(derpfilter);
  if (derplist != null && derplist.length > 0) {
    FMLRelaunchLog.severe("FML has detected several badly downloaded jar files,  which have been named as zip files. You probably need to download them again, or they may not work properly");
    for (    File f : derplist) {
      FMLRelaunchLog.severe("Problem file : %s",f.getName());
    }
  }
  FileFilter derpdirfilter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.isDirectory() && new File(pathname,"META-INF").isDirectory();
    }
  }
;
  File[] derpdirlist=coreMods.listFiles(derpdirfilter);
  if (derpdirlist != null && derpdirlist.length > 0) {
    FMLRelaunchLog.log.getLogger().log(Level.FATAL,"There appear to be jars extracted into the mods directory. This is VERY BAD and will almost NEVER WORK WELL");
    FMLRelaunchLog.log.getLogger().log(Level.FATAL,"You should place original jars only in the mods directory. NEVER extract them to the mods directory.");
    FMLRelaunchLog.log.getLogger().log(Level.FATAL,"The directories below appear to be extracted jar files. Fix this before you continue.");
    for (    File f : derpdirlist) {
      FMLRelaunchLog.log.getLogger().log(Level.FATAL,"Directory {} contains {}",f.getName(),Arrays.asList(new File(f,"META-INF").list()));
    }
    RuntimeException re=new RuntimeException("Extracted mod jars found, loading will NOT continue");
    try {
      Class<?> crashreportclass=classLoader.loadClass("b");
      Object crashreport=crashreportclass.getMethod("a",Throwable.class,String.class).invoke(null,re,"FML has discovered extracted jar files in the mods directory.\nThis breaks mod loading functionality completely.\nRemove the directories and replace with the jar files originally provided.");
      File crashreportfile=new File(new File(coreMods.getParentFile(),"crash-reports"),String.format("fml-crash-%1$tY-%1$tm-%1$td_%1$tT.txt",Calendar.getInstance()));
      crashreportclass.getMethod("a",File.class).invoke(crashreport,crashreportfile);
      System.out.println("#@!@# FML has crashed the game deliberately. Crash report saved to: #@!@# " + crashreportfile.getAbsolutePath());
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    throw re;
  }
  File[] coreModList=coreMods.listFiles(ff);
  File versionedModDir=new File(coreMods,FMLInjectionData.mccversion);
  if (versionedModDir.isDirectory()) {
    File[] versionedCoreMods=versionedModDir.listFiles(ff);
    coreModList=ObjectArrays.concat(coreModList,versionedCoreMods,File.class);
  }
  coreModList=ObjectArrays.concat(coreModList,ModListHelper.additionalMods.values().toArray(new File[0]),File.class);
  coreModList=FileListHelper.sortFileList(coreModList);
  for (  File coreMod : coreModList) {
    FMLRelaunchLog.fine("Examining for coremod candidacy %s",coreMod.getName());
    JarFile jar=null;
    Attributes mfAttributes;
    try {
      jar=new JarFile(coreMod);
      if (jar.getManifest() == null) {
        continue;
      }
      ModAccessTransformer.addJar(jar);
      mfAttributes=jar.getManifest().getMainAttributes();
    }
 catch (    IOException ioe) {
      FMLRelaunchLog.log(Level.ERROR,ioe,"Unable to read the jar file %s - ignoring",coreMod.getName());
      continue;
    }
 finally {
      if (jar != null) {
        try {
          jar.close();
        }
 catch (        IOException e) {
        }
      }
    }
    String cascadedTweaker=mfAttributes.getValue("TweakClass");
    if (cascadedTweaker != null) {
      FMLRelaunchLog.info("Loading tweaker %s from %s",cascadedTweaker,coreMod.getName());
      Integer sortOrder=Ints.tryParse(Strings.nullToEmpty(mfAttributes.getValue("TweakOrder")));
      sortOrder=(sortOrder == null ? Integer.valueOf(0) : sortOrder);
      handleCascadingTweak(coreMod,jar,cascadedTweaker,classLoader,sortOrder);
      ignoredModFiles.add(coreMod.getName());
      continue;
    }
    List<String> modTypes=mfAttributes.containsKey(MODTYPE) ? Arrays.asList(mfAttributes.getValue(MODTYPE).split(",")) : ImmutableList.of("FML");
    if (!modTypes.contains("FML")) {
      FMLRelaunchLog.fine("Adding %s to the list of things to skip. It is not an FML mod,  it has types %s",coreMod.getName(),modTypes);
      ignoredModFiles.add(coreMod.getName());
      continue;
    }
    String modSide=mfAttributes.containsKey(MODSIDE) ? mfAttributes.getValue(MODSIDE) : "BOTH";
    if (!("BOTH".equals(modSide) || FMLLaunchHandler.side.name().equals(modSide))) {
      FMLRelaunchLog.fine("Mod %s has ModSide meta-inf value %s, and we're %s. It will be ignored",coreMod.getName(),modSide,FMLLaunchHandler.side.name());
      ignoredModFiles.add(coreMod.getName());
      continue;
    }
    String fmlCorePlugin=mfAttributes.getValue("FMLCorePlugin");
    if (fmlCorePlugin == null) {
      FMLRelaunchLog.fine("Not found coremod data in %s",coreMod.getName());
      continue;
    }
    try {
      classLoader.addURL(coreMod.toURI().toURL());
      if (!mfAttributes.containsKey(COREMODCONTAINSFMLMOD)) {
        FMLRelaunchLog.finer("Adding %s to the list of known coremods, it will not be examined again",coreMod.getName());
        ignoredModFiles.add(coreMod.getName());
      }
 else {
        FMLRelaunchLog.finer("Found FMLCorePluginContainsFMLMod marker in %s, it will be examined later for regular @Mod instances",coreMod.getName());
        candidateModFiles.add(coreMod.getName());
      }
    }
 catch (    MalformedURLException e) {
      FMLRelaunchLog.log(Level.ERROR,e,"Unable to convert file into a URL. weird");
      continue;
    }
    loadCoreMod(classLoader,fmlCorePlugin,coreMod);
  }
}
