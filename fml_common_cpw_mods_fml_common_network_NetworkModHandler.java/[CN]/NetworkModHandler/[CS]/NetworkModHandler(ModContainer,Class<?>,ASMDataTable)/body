{
  this.container=container;
  this.mod=networkModClass.getAnnotation(NetworkMod.class);
  if (this.mod == null) {
    return;
  }
  this.localId=assignedIds++;
  this.networkId=this.localId;
  Set<ASMData> versionCheckHandlers=table.getAnnotationsFor(container).get(Type.getDescriptor(NetworkMod.VersionCheckHandler.class));
  String versionCheckHandlerMethod=null;
  for (  ASMData vch : versionCheckHandlers) {
    if (vch.getClassName().equals(networkModClass.getName())) {
      versionCheckHandlerMethod=vch.getObjectName();
      break;
    }
  }
  if (versionCheckHandlerMethod != null) {
    try {
      Method checkHandlerMethod=networkModClass.getDeclaredMethod(versionCheckHandlerMethod,String.class);
      if (checkHandlerMethod.isAnnotationPresent(NetworkMod.VersionCheckHandler.class)) {
        this.checkHandler=checkHandlerMethod;
      }
    }
 catch (    Exception e) {
      FMLLog.log(Level.WARNING,e,"The declared version check handler method %s on network mod id %s is not accessible",versionCheckHandlerMethod,container.getModId());
    }
  }
  if (this.checkHandler == null) {
    String versionBounds=mod.versionBounds();
    if (!Strings.isNullOrEmpty(versionBounds)) {
      try {
        this.acceptableRange=VersionRange.createFromVersionSpec(versionBounds);
      }
 catch (      InvalidVersionSpecificationException e) {
        FMLLog.log(Level.WARNING,e,"Invalid bounded range %s specified for network mod id %s",versionBounds,container.getModId());
      }
    }
  }
}
