{
  time-=Math.floor(time);
  Vector3f translation=new Vector3f(0,0,0);
  Vector3f scale=new Vector3f(1,1,1);
  AxisAngle4f rotation=new AxisAngle4f(0,0,0,0);
  for (  MBVariableClip var : variables) {
    int length=loop ? var.samples.length : (var.samples.length - 1);
    float timeScaled=time * length;
    int s1=MathHelper.clamp_int((int)Math.round(Math.floor(timeScaled)),0,length - 1);
    float progress=timeScaled - s1;
    int s2=s1 + 1;
    if (s2 == length && loop)     s2=0;
    float value=0;
switch (var.interpolation) {
case LINEAR:
      if (var.variable == Variable.ANGLE) {
        float v1=var.samples[s1];
        float v2=var.samples[s2];
        float diff=((v2 - v1) % 360 + 540) % 360 - 180;
        value=v1 + diff * progress;
      }
 else {
        value=var.samples[s1] * (1 - progress) + var.samples[s2] * progress;
      }
    break;
case NEAREST:
  value=var.samples[progress < .5f ? s1 : s2];
break;
}
switch (var.variable) {
case X:
translation.x=value;
break;
case Y:
translation.y=value;
break;
case Z:
translation.z=value;
break;
case XROT:
rotation.x=value;
break;
case YROT:
rotation.y=value;
break;
case ZROT:
rotation.z=value;
break;
case ANGLE:
rotation.angle=(float)Math.toRadians(value);
break;
case SCALE:
scale.x=scale.y=scale.z=value;
break;
case XS:
scale.x=value;
break;
case YS:
scale.y=value;
break;
case ZS:
scale.z=value;
break;
}
}
Quat4f rot=new Quat4f();
rot.set(rotation);
return TRSRTransformation.blockCenterToCorner(new TRSRTransformation(translation,rot,scale,null));
}
