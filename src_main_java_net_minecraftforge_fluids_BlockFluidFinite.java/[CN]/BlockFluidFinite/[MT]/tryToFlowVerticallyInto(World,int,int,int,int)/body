{
  int otherY=y + densityDir;
  if (otherY < 0 || otherY >= world.getHeight()) {
    world.setBlock(x,y,z,Blocks.air);
    return 0;
  }
  int amt=getQuantaValueBelow(world,x,otherY,z,quantaPerBlock);
  if (amt >= 0) {
    amt+=amtToInput;
    if (amt > quantaPerBlock) {
      world.setBlock(x,otherY,z,this,quantaPerBlock - 1,3);
      world.scheduleBlockUpdate(x,otherY,z,this,tickRate);
      return amt - quantaPerBlock;
    }
 else     if (amt > 0) {
      world.setBlock(x,otherY,z,this,amt - 1,3);
      world.scheduleBlockUpdate(x,otherY,z,this,tickRate);
      world.setBlock(x,y,z,Blocks.air);
      return 0;
    }
    return amtToInput;
  }
 else {
    int density_other=getDensity(world,x,otherY,z);
    if (density_other == Integer.MAX_VALUE) {
      if (displaceIfPossible(world,x,otherY,z)) {
        world.setBlock(x,otherY,z,this,amtToInput - 1,3);
        world.scheduleBlockUpdate(x,otherY,z,this,tickRate);
        world.setBlock(x,y,z,Blocks.air);
        return 0;
      }
 else {
        return amtToInput;
      }
    }
    if (densityDir < 0) {
      if (density_other < density) {
        BlockFluidBase block=(BlockFluidBase)world.getBlock(x,otherY,z);
        int otherData=world.getBlockMetadata(x,otherY,z);
        world.setBlock(x,otherY,z,this,amtToInput - 1,3);
        world.setBlock(x,y,z,block,otherData,3);
        world.scheduleBlockUpdate(x,otherY,z,this,tickRate);
        world.scheduleBlockUpdate(x,y,z,block,block.tickRate(world));
        return 0;
      }
    }
 else {
      if (density_other > density) {
        BlockFluidBase block=(BlockFluidBase)world.getBlock(x,otherY,z);
        int otherData=world.getBlockMetadata(x,otherY,z);
        world.setBlock(x,otherY,z,this,amtToInput - 1,3);
        world.setBlock(x,y,z,block,otherData,3);
        world.scheduleBlockUpdate(x,otherY,z,this,tickRate);
        world.scheduleBlockUpdate(x,y,z,block,block.tickRate(world));
        return 0;
      }
    }
    return amtToInput;
  }
}
