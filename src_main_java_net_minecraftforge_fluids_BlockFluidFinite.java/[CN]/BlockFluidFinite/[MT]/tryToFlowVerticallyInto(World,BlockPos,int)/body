{
  IBlockState myState=world.getBlockState(pos);
  BlockPos other=pos.add(0,densityDir,0);
  if (other.getY() < 0 || other.getY() >= world.getHeight()) {
    world.setBlockToAir(pos);
    return 0;
  }
  int amt=getQuantaValueBelow(world,other,quantaPerBlock);
  if (amt >= 0) {
    amt+=amtToInput;
    if (amt > quantaPerBlock) {
      world.setBlockState(other,myState.withProperty(LEVEL,quantaPerBlock - 1),3);
      world.scheduleUpdate(other,this,tickRate);
      return amt - quantaPerBlock;
    }
 else     if (amt > 0) {
      world.setBlockState(other,myState.withProperty(LEVEL,amt - 1),3);
      world.scheduleUpdate(other,this,tickRate);
      world.setBlockToAir(pos);
      return 0;
    }
    return amtToInput;
  }
 else {
    int density_other=getDensity(world,other);
    if (density_other == Integer.MAX_VALUE) {
      if (displaceIfPossible(world,other)) {
        world.setBlockState(other,myState.withProperty(LEVEL,amtToInput - 1),3);
        world.scheduleUpdate(other,this,tickRate);
        world.setBlockToAir(pos);
        return 0;
      }
 else {
        return amtToInput;
      }
    }
    if (densityDir < 0) {
      if (density_other < density) {
        IBlockState state=world.getBlockState(other);
        world.setBlockState(other,myState.withProperty(LEVEL,amtToInput - 1),3);
        world.setBlockState(pos,state,3);
        world.scheduleUpdate(other,this,tickRate);
        world.scheduleUpdate(pos,state.getBlock(),state.getBlock().tickRate(world));
        return 0;
      }
    }
 else {
      if (density_other > density) {
        IBlockState state=world.getBlockState(other);
        world.setBlockState(other,myState.withProperty(LEVEL,amtToInput - 1),3);
        world.setBlockState(other,state,3);
        world.scheduleUpdate(other,this,tickRate);
        world.scheduleUpdate(other,state.getBlock(),state.getBlock().tickRate(world));
        return 0;
      }
    }
    return amtToInput;
  }
}
