{
  ZipFile cInJar=null;
  ZipFile sInJar=null;
  ZipOutputStream cOutJar=null;
  ZipOutputStream sOutJar=null;
  try {
    try {
      cInJar=new ZipFile(clientInFile);
      sInJar=new ZipFile(serverInFile);
    }
 catch (    FileNotFoundException e) {
      throw new FileNotFoundException("Could not open input file: " + e.getMessage());
    }
    try {
      cOutJar=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(clientOutFile)));
      sOutJar=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(serverOutFile)));
    }
 catch (    FileNotFoundException e) {
      throw new FileNotFoundException("Could not open output file: " + e.getMessage());
    }
    Hashtable<String,ZipEntry> cClasses=getClassEntries(cInJar,cOutJar);
    Hashtable<String,ZipEntry> sClasses=getClassEntries(sInJar,sOutJar);
    HashSet<String> cAdded=new HashSet<String>();
    HashSet<String> sAdded=new HashSet<String>();
    for (    Entry<String,ZipEntry> entry : cClasses.entrySet()) {
      String name=entry.getKey();
      ZipEntry cEntry=entry.getValue();
      ZipEntry sEntry=sClasses.get(name);
      if (sEntry == null) {
        if (!copyToServer.contains(name)) {
          copyClass(cInJar,cEntry,cOutJar,null,true);
          cAdded.add(name);
        }
 else {
          if (DEBUG) {
            System.out.println("Copy class c->s : " + name);
          }
          copyClass(cInJar,cEntry,cOutJar,sOutJar,true);
          cAdded.add(name);
          sAdded.add(name);
        }
        continue;
      }
      sClasses.remove(name);
      ClassInfo info=new ClassInfo(name);
      shared.put(name,info);
      byte[] cData=readEntry(cInJar,entry.getValue());
      byte[] sData=readEntry(sInJar,sEntry);
      byte[] data=processClass(cData,sData,info);
      ZipEntry newEntry=new ZipEntry(cEntry.getName());
      cOutJar.putNextEntry(newEntry);
      cOutJar.write(data);
      sOutJar.putNextEntry(newEntry);
      sOutJar.write(data);
      cAdded.add(name);
      sAdded.add(name);
    }
    for (    Entry<String,ZipEntry> entry : sClasses.entrySet()) {
      if (DEBUG) {
        System.out.println("Copy class s->c : " + entry.getKey());
      }
      copyClass(sInJar,entry.getValue(),cOutJar,sOutJar,false);
    }
    for (    String name : new String[]{SideOnly.class.getName(),Side.class.getName()}) {
      String eName=name.replace(".","/");
      byte[] data=getClassBytes(name);
      ZipEntry newEntry=new ZipEntry(name.replace(".","/").concat(".class"));
      if (!cAdded.contains(eName)) {
        cOutJar.putNextEntry(newEntry);
        cOutJar.write(data);
      }
      if (!sAdded.contains(eName)) {
        sOutJar.putNextEntry(newEntry);
        sOutJar.write(data);
      }
    }
  }
  finally {
    if (cInJar != null) {
      try {
        cInJar.close();
      }
 catch (      IOException e) {
      }
    }
    if (sInJar != null) {
      try {
        sInJar.close();
      }
 catch (      IOException e) {
      }
    }
    if (cOutJar != null) {
      try {
        cOutJar.close();
      }
 catch (      IOException e) {
      }
    }
    if (sOutJar != null) {
      try {
        sOutJar.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
