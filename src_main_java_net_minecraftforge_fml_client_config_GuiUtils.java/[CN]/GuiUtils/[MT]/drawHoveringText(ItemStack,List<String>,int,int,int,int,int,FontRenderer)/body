{
  if (!textLines.isEmpty()) {
    RenderTooltipEvent.Pre event=new RenderTooltipEvent.Pre(stack,textLines,mouseX,mouseY,screenWidth,screenHeight,maxTextWidth,font);
    if (MinecraftForge.EVENT_BUS.post(event)) {
      return;
    }
    mouseX=event.getX();
    mouseY=event.getY();
    screenWidth=event.getScreenWidth();
    screenHeight=event.getScreenHeight();
    maxTextWidth=event.getMaxWidth();
    font=event.getFontRenderer();
    GlStateManager.disableRescaleNormal();
    RenderHelper.disableStandardItemLighting();
    GlStateManager.disableLighting();
    GlStateManager.disableDepth();
    int tooltipTextWidth=0;
    for (    String textLine : textLines) {
      int textLineWidth=font.getStringWidth(textLine);
      if (textLineWidth > tooltipTextWidth) {
        tooltipTextWidth=textLineWidth;
      }
    }
    boolean needsWrap=false;
    int titleLinesCount=1;
    int tooltipX=mouseX + 12;
    if (tooltipX + tooltipTextWidth + 4 > screenWidth) {
      tooltipX=mouseX - 16 - tooltipTextWidth;
      if (tooltipX < 4) {
        if (mouseX > screenWidth / 2) {
          tooltipTextWidth=mouseX - 12 - 8;
        }
 else {
          tooltipTextWidth=screenWidth - 16 - mouseX;
        }
        needsWrap=true;
      }
    }
    if (maxTextWidth > 0 && tooltipTextWidth > maxTextWidth) {
      tooltipTextWidth=maxTextWidth;
      needsWrap=true;
    }
    if (needsWrap) {
      int wrappedTooltipWidth=0;
      List<String> wrappedTextLines=new ArrayList<String>();
      for (int i=0; i < textLines.size(); i++) {
        String textLine=textLines.get(i);
        List<String> wrappedLine=font.listFormattedStringToWidth(textLine,tooltipTextWidth);
        if (i == 0) {
          titleLinesCount=wrappedLine.size();
        }
        for (        String line : wrappedLine) {
          int lineWidth=font.getStringWidth(line);
          if (lineWidth > wrappedTooltipWidth) {
            wrappedTooltipWidth=lineWidth;
          }
          wrappedTextLines.add(line);
        }
      }
      tooltipTextWidth=wrappedTooltipWidth;
      textLines=wrappedTextLines;
      if (mouseX > screenWidth / 2) {
        tooltipX=mouseX - 16 - tooltipTextWidth;
      }
 else {
        tooltipX=mouseX + 12;
      }
    }
    int tooltipY=mouseY - 12;
    int tooltipHeight=8;
    if (textLines.size() > 1) {
      tooltipHeight+=(textLines.size() - 1) * 10;
      if (textLines.size() > titleLinesCount) {
        tooltipHeight+=2;
      }
    }
    if (tooltipY + tooltipHeight + 6 > screenHeight) {
      tooltipY=screenHeight - tooltipHeight - 6;
    }
    final int zLevel=300;
    final int backgroundColor=0xF0100010;
    drawGradientRect(zLevel,tooltipX - 3,tooltipY - 4,tooltipX + tooltipTextWidth + 3,tooltipY - 3,backgroundColor,backgroundColor);
    drawGradientRect(zLevel,tooltipX - 3,tooltipY + tooltipHeight + 3,tooltipX + tooltipTextWidth + 3,tooltipY + tooltipHeight + 4,backgroundColor,backgroundColor);
    drawGradientRect(zLevel,tooltipX - 3,tooltipY - 3,tooltipX + tooltipTextWidth + 3,tooltipY + tooltipHeight + 3,backgroundColor,backgroundColor);
    drawGradientRect(zLevel,tooltipX - 4,tooltipY - 3,tooltipX - 3,tooltipY + tooltipHeight + 3,backgroundColor,backgroundColor);
    drawGradientRect(zLevel,tooltipX + tooltipTextWidth + 3,tooltipY - 3,tooltipX + tooltipTextWidth + 4,tooltipY + tooltipHeight + 3,backgroundColor,backgroundColor);
    final int borderColorStart=0x505000FF;
    final int borderColorEnd=(borderColorStart & 0xFEFEFE) >> 1 | borderColorStart & 0xFF000000;
    drawGradientRect(zLevel,tooltipX - 3,tooltipY - 3 + 1,tooltipX - 3 + 1,tooltipY + tooltipHeight + 3 - 1,borderColorStart,borderColorEnd);
    drawGradientRect(zLevel,tooltipX + tooltipTextWidth + 2,tooltipY - 3 + 1,tooltipX + tooltipTextWidth + 3,tooltipY + tooltipHeight + 3 - 1,borderColorStart,borderColorEnd);
    drawGradientRect(zLevel,tooltipX - 3,tooltipY - 3,tooltipX + tooltipTextWidth + 3,tooltipY - 3 + 1,borderColorStart,borderColorStart);
    drawGradientRect(zLevel,tooltipX - 3,tooltipY + tooltipHeight + 2,tooltipX + tooltipTextWidth + 3,tooltipY + tooltipHeight + 3,borderColorEnd,borderColorEnd);
    MinecraftForge.EVENT_BUS.post(new RenderTooltipEvent.PostBackground(stack,textLines,tooltipX,tooltipY,font,tooltipTextWidth,tooltipHeight));
    int tooltipTop=tooltipY;
    for (int lineNumber=0; lineNumber < textLines.size(); ++lineNumber) {
      String line=textLines.get(lineNumber);
      font.drawStringWithShadow(line,(float)tooltipX,(float)tooltipY,-1);
      if (lineNumber + 1 == titleLinesCount) {
        tooltipY+=2;
      }
      tooltipY+=10;
    }
    MinecraftForge.EVENT_BUS.post(new RenderTooltipEvent.PostText(stack,textLines,tooltipX,tooltipTop,font,tooltipTextWidth,tooltipHeight));
    GlStateManager.enableLighting();
    GlStateManager.enableDepth();
    RenderHelper.enableStandardItemLighting();
    GlStateManager.enableRescaleNormal();
  }
}
