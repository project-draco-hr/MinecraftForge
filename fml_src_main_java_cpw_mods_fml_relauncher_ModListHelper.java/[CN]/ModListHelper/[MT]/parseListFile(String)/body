{
  File f=new File(listFile);
  if (!f.exists()) {
    FMLRelaunchLog.info("Failed to find modList file %s",listFile);
    return;
  }
  String json;
  try {
    json=Files.asCharSource(f,Charsets.UTF_8).read();
  }
 catch (  IOException e1) {
    FMLRelaunchLog.log(Level.INFO,e1,"Failed to read modList json file %s.",listFile);
    return;
  }
  Gson gsonParser=new Gson();
  JsonModList modList;
  try {
    modList=gsonParser.fromJson(json,JsonModList.class);
  }
 catch (  JsonSyntaxException e) {
    FMLRelaunchLog.log(Level.INFO,e,"Failed to parse modList json file %s.",listFile);
    return;
  }
  File repoRoot=new File(modList.repositoryRoot);
  if (!repoRoot.exists()) {
    FMLRelaunchLog.info("Failed to find the specified repository root %s",modList.repositoryRoot);
    return;
  }
  for (  String s : modList.modRef) {
    StringBuilder sb=new StringBuilder();
    String[] parts=s.split(":");
    sb.append(parts[0].replace('.',File.separatorChar));
    sb.append(File.separatorChar);
    sb.append(parts[1]).append(File.separatorChar);
    sb.append(parts[2]).append(File.separatorChar);
    sb.append(parts[1]).append('-').append(parts[2]);
    if (parts.length == 4) {
      sb.append('-').append(parts[3]);
    }
    sb.append(".jar");
    tryAddFile(sb.toString(),repoRoot,s);
  }
}
