{
  BiMap<Class<?>,String> typeReg=registryTypes.inverse();
  String name=typeReg.get(type);
  if (name == null) {
    Set<Class<?>> parents=Sets.newHashSet();
    findSuperTypes(type,parents);
    SetView<Class<?>> foundType=Sets.intersection(parents,registryTypes.values());
    if (foundType.isEmpty()) {
      FMLLog.severe("Unable to find registry for type %s",type.getName());
      throw new IllegalArgumentException("Attempt to register an object without an associated registry");
    }
    Class<?> regtype=Iterables.getOnlyElement(foundType);
    name=typeReg.get(regtype);
  }
  return genericRegistries.get(name);
}
