{
  output=result.copy();
  String shape="";
  int idx=0;
  if (recipe[idx] instanceof Boolean) {
    mirrored=(Boolean)recipe[idx];
    if (recipe[idx + 1] instanceof Object[]) {
      recipe=(Object[])recipe[idx + 1];
    }
 else {
      idx=1;
    }
  }
  if (recipe[idx] instanceof String[]) {
    String[] parts=((String[])recipe[idx++]);
    for (    String s : parts) {
      width=s.length();
      shape+=s;
    }
    height=parts.length;
  }
 else {
    while (recipe[idx] instanceof String) {
      String s=(String)recipe[idx++];
      shape+=s;
      width=s.length();
      height++;
    }
  }
  if (width * height != shape.length()) {
    String ret="Invalid shaped ore recipe: ";
    for (    Object tmp : recipe) {
      ret+=tmp + ", ";
    }
    ret+=output;
    throw new RuntimeException(ret);
  }
  HashMap<Character,Object> itemMap=new HashMap<Character,Object>();
  for (; idx < recipe.length; idx+=2) {
    Character chr=(Character)recipe[idx];
    Object in=recipe[idx + 1];
    if (in instanceof ItemStack) {
      itemMap.put(chr,((ItemStack)in).copy());
    }
 else     if (in instanceof Item) {
      itemMap.put(chr,new ItemStack((Item)in));
    }
 else     if (in instanceof Block) {
      itemMap.put(chr,new ItemStack((Block)in,1,-1));
    }
 else     if (in instanceof String) {
      itemMap.put(chr,OreDictionary.getOres((String)in));
    }
 else {
      String ret="Invalid shaped ore recipe: ";
      for (      Object tmp : recipe) {
        ret+=tmp + ", ";
      }
      ret+=output;
      throw new RuntimeException(ret);
    }
  }
  input=new Object[width * height];
  int x=0;
  for (  char chr : shape.toCharArray()) {
    input[x++]=itemMap.get(chr);
  }
}
