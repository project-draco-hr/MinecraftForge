{
  if (quads == null) {
    Node<Mesh> mesh=model.getNode();
    ImmutableList.Builder<BakedQuad> builder=ImmutableList.builder();
    for (    Node<?> child : mesh.getNodes().values()) {
      if (child.getKind() instanceof Mesh) {
        Node<Mesh> childMesh=(Node<Mesh>)child;
        builder.addAll(new BakedWrapper(new B3DLoader.Wrapper(model.getLocation(),model.getTextureMap(),childMesh),state,format,textures).getGeneralQuads());
      }
    }
    Multimap<Vertex,Pair<Float,Node<Bone>>> weightMap=mesh.getKind().getWeightMap();
    Collection<Face> faces=mesh.getKind().getFaces();
    faces=mesh.getKind().bake(new Function<Node<?>,Matrix4f>(){
      public Matrix4f apply(      Node<?> node){
        return state.apply(PartWrapper.create(node)).getMatrix();
      }
    }
);
    for (    Face f : faces) {
      buf.clear();
      List<Texture> textures=f.getBrush().getTextures();
      TextureAtlasSprite sprite;
      if (textures.isEmpty())       sprite=this.textures.get("missingno");
 else       sprite=this.textures.get(textures.get(0).getPath());
      putVertexData(f.getV1(),sprite);
      putVertexData(f.getV2(),sprite);
      putVertexData(f.getV3(),sprite);
      putVertexData(f.getV3(),sprite);
      buf.flip();
      int[] data=new int[VERTICES_IN_QUAD * format.getNextOffset() / BYTES_IN_INT];
      buf.asIntBuffer().get(data);
      builder.add(new BakedQuad(data,-1,EnumFacing.getFacingFromVector(f.getNormal().x,f.getNormal().y,f.getNormal().z)));
    }
    quads=builder.build();
  }
  return quads;
}
