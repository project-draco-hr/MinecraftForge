{
  for (  Node<?> child : node.getNodes().values()) {
    generateQuads(builder,child,state);
  }
  if (node.getKind() instanceof Mesh && meshes.contains(node.getName())) {
    Mesh mesh=(Mesh)node.getKind();
    Collection<Face> faces=mesh.bake(new Function<Node<?>,Matrix4f>(){
      private final TRSRTransformation global=state.apply(Optional.<IModelPart>absent()).or(TRSRTransformation.identity());
      private final LoadingCache<Node<?>,TRSRTransformation> localCache=CacheBuilder.newBuilder().maximumSize(32).build(new CacheLoader<Node<?>,TRSRTransformation>(){
        public TRSRTransformation load(        Node<?> node) throws Exception {
          return state.apply(Optional.of(new NodeJoint(node))).or(TRSRTransformation.identity());
        }
      }
);
      public Matrix4f apply(      Node<?> node){
        return global.compose(localCache.getUnchecked(node)).getMatrix();
      }
    }
);
    for (    Face f : faces) {
      UnpackedBakedQuad.Builder quadBuilder=new UnpackedBakedQuad.Builder(format);
      quadBuilder.setQuadOrientation(EnumFacing.getFacingFromVector(f.getNormal().x,f.getNormal().y,f.getNormal().z));
      List<Texture> textures=null;
      if (f.getBrush() != null)       textures=f.getBrush().getTextures();
      TextureAtlasSprite sprite;
      if (textures == null || textures.isEmpty())       sprite=this.textures.get("missingno");
 else       if (textures.get(0) == B3DModel.Texture.White)       sprite=ModelLoader.White.instance;
 else       sprite=this.textures.get(textures.get(0).getPath());
      quadBuilder.setTexture(sprite);
      putVertexData(quadBuilder,f.getV1(),f.getNormal(),sprite);
      putVertexData(quadBuilder,f.getV2(),f.getNormal(),sprite);
      putVertexData(quadBuilder,f.getV3(),f.getNormal(),sprite);
      putVertexData(quadBuilder,f.getV3(),f.getNormal(),sprite);
      builder.add(quadBuilder.build());
    }
  }
}
