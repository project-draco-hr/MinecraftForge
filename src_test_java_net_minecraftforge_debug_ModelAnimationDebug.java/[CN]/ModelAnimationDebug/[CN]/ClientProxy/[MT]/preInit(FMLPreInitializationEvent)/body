{
  super.preInit(event);
  B3DLoader.instance.addDomain(MODID);
  ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(GameRegistry.findBlock(MODID,blockName)),0,new ModelResourceLocation(MODID.toLowerCase() + ":" + blockName,"inventory"));
  ClientRegistry.bindTileEntitySpecialRenderer(Chest.class,new AnimationTESR<Chest>(){
    @Override public void handleEvents(    Chest chest,    float time,    Iterable<Event> pastEvents){
      chest.handleEvents(time,pastEvents);
    }
  }
);
  String entityName=MODID + ":entity_chest";
  EntityRegistry.registerModEntity(EntityChest.class,entityName,0,ModelAnimationDebug.instance,64,20,true,0xFFAAAA00,0xFFDDDD00);
  RenderingRegistry.registerEntityRenderingHandler(EntityChest.class,new IRenderFactory<EntityChest>(){
    public Render<EntityChest> createRenderFor(    RenderManager manager){
      try {
        IModel base=ModelLoaderRegistry.getModel(new ResourceLocation(ModelAnimationDebug.MODID,"block/engine"));
        IModel ring=ModelLoaderRegistry.getModel(new ResourceLocation(ModelAnimationDebug.MODID,"block/engine_ring"));
        ImmutableMap<String,String> textures=ImmutableMap.of("base","blocks/stone","front","blocks/log_oak","chamber","blocks/redstone_block","trunk","blocks/end_stone");
        base=ModelProcessingHelper.retexture(base,textures);
        ring=ModelProcessingHelper.retexture(base,textures);
        IModel model=new MultiModel(new ResourceLocation(ModelAnimationDebug.MODID,"builtin/engine"),ring,TRSRTransformation.identity(),ImmutableMap.of("base",Pair.<IModel,IModelState>of(base,TRSRTransformation.identity())));
        return new RenderLiving<EntityChest>(manager,new AnimationModelBase<EntityChest>(model,new VertexLighterSmoothAo(Minecraft.getMinecraft().func_184125_al())){
          @Override public void handleEvents(          EntityChest chest,          float time,          Iterable<Event> pastEvents){
            chest.handleEvents(time,pastEvents);
          }
        }
,0.5f){
          protected ResourceLocation getEntityTexture(          EntityChest entity){
            return TextureMap.locationBlocksTexture;
          }
        }
;
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
}
