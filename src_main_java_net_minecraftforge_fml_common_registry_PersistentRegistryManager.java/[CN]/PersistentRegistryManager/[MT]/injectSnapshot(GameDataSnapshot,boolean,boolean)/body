{
  FMLLog.info("Injecting existing block and item data into this %s instance",FMLCommonHandler.instance().getEffectiveSide().isServer() ? "server" : "client");
  final Map<ResourceLocation,Map<ResourceLocation,Integer[]>> remaps=Maps.newHashMap();
  final LinkedHashMap<ResourceLocation,Map<ResourceLocation,Integer>> missing=Maps.newLinkedHashMap();
  forAllRegistries(PersistentRegistry.ACTIVE,ValidateRegistryFunction.OPERATION);
  forAllRegistries(PersistentRegistry.ACTIVE,DumpRegistryFunction.OPERATION);
  forAllRegistries(PersistentRegistry.ACTIVE,ResetDelegatesFunction.OPERATION);
  GameData.getBlockStateIDMap().clear();
  Arrays.fill(Potion.potionTypes,null);
  for (  Map.Entry<ResourceLocation,GameDataSnapshot.Entry> snapshotEntry : snapshot.entries.entrySet()) {
    loadPersistentDataToStagingRegistry(injectFrozenData,remaps,missing,snapshotEntry,PersistentRegistry.ACTIVE.registrySuperTypes.inverse().get(snapshotEntry.getKey()));
  }
  List<String> missedMappings=Loader.instance().fireMissingMappingEvent(missing.get(BLOCKS),missing.get(ITEMS),isLocalWorld,remaps.get(BLOCKS),remaps.get(ITEMS));
  if (!missedMappings.isEmpty()) {
    return missedMappings;
  }
  if (injectFrozenData) {
    for (    Map.Entry<ResourceLocation,Integer> missingBlock : missing.get(BLOCKS).entrySet()) {
      ResourceLocation rl=missingBlock.getKey();
      Integer id=missingBlock.getValue();
      FMLLog.log(Level.DEBUG,"Replacing id %s named as %s with air block. If the mod becomes available again later, it can reload here",id,rl);
      PersistentRegistry.STAGING.getRegistry(BLOCKS,Block.class).add(id,rl,new BlockDummyAir());
    }
  }
  if (injectFrozenData) {
    for (    Map.Entry<ResourceLocation,FMLControlledNamespacedRegistry<?>> r : PersistentRegistry.ACTIVE.registries.entrySet()) {
      loadFrozenDataToStagingRegistry(remaps,r.getKey(),PersistentRegistry.ACTIVE.registrySuperTypes.inverse().get(r.getKey()));
    }
  }
  forAllRegistries(PersistentRegistry.STAGING,ValidateRegistryFunction.OPERATION);
  for (  Map.Entry<ResourceLocation,FMLControlledNamespacedRegistry<?>> r : PersistentRegistry.ACTIVE.registries.entrySet()) {
    loadRegistry(r.getKey(),PersistentRegistry.STAGING,PersistentRegistry.ACTIVE,PersistentRegistry.ACTIVE.registrySuperTypes.inverse().get(r.getKey()));
  }
  forAllRegistries(PersistentRegistry.ACTIVE,DumpRegistryFunction.OPERATION);
  Loader.instance().fireRemapEvent(remaps.get(BLOCKS),remaps.get(ITEMS),false);
  ObjectHolderRegistry.INSTANCE.applyObjectHolders();
  PersistentRegistry.STAGING.clean();
  return ImmutableList.of();
}
