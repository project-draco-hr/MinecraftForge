{
  FMLLog.info("Injecting existing block and item data into this %s instance",FMLCommonHandler.instance().getEffectiveSide().isServer() ? "server" : "client");
  final Map<ResourceLocation,Map<ResourceLocation,Integer[]>> remaps=Maps.newHashMap();
  final LinkedHashMap<ResourceLocation,Map<ResourceLocation,Integer>> missing=Maps.newLinkedHashMap();
  forAllRegistries(PersistentRegistry.ACTIVE,ValidateRegistryFunction.OPERATION);
  forAllRegistries(PersistentRegistry.ACTIVE,DumpRegistryFunction.OPERATION);
  forAllRegistries(PersistentRegistry.ACTIVE,ResetDelegatesFunction.OPERATION);
  List<ResourceLocation> missingRegs=Lists.newArrayList();
  for (  ResourceLocation name : snapshot.entries.keySet()) {
    name=getFixedName(name);
    if (PersistentRegistry.ACTIVE.getRegistry(name,null) == null) {
      missingRegs.add(name);
    }
  }
  if (missingRegs.size() > 0) {
    String text="Forge Mod Loader detected missing/unknown registrie(s).\n\n" + "There are " + missingRegs.size() + " missing registries in this save.\n"+ "If you continue the missing registries will get removed.\n"+ "This may cause issues, it is advised that you create a world backup before continuing.\n\n"+ "Missing Registries:\n";
    for (    ResourceLocation s : missingRegs)     text+=s.toString() + "\n";
    boolean confirmed=StartupQuery.confirm(text);
    if (!confirmed)     StartupQuery.abort();
  }
  for (  Map.Entry<ResourceLocation,GameDataSnapshot.Entry> snapshotEntry : snapshot.entries.entrySet()) {
    final Class<? extends IForgeRegistryEntry> registrySuperType=PersistentRegistry.ACTIVE.getRegistrySuperType(snapshotEntry.getKey());
    loadPersistentDataToStagingRegistry(injectFrozenData,remaps,missing,snapshotEntry,registrySuperType);
  }
  for (  ResourceLocation dummy : snapshot.entries.get(BLOCKS).dummied) {
    if (missing.get(BLOCKS).containsKey(dummy)) {
      Integer id=missing.get(BLOCKS).remove(dummy);
      PersistentRegistry.STAGING.getRegistry(BLOCKS,Block.class).markDummy(dummy,id,new BlockDummyAir());
    }
 else     if (isLocalWorld) {
      if (FMLControlledNamespacedRegistry.DEBUG) {
        FMLLog.log(Level.DEBUG,"Registry: Resuscitating dummy block %s",dummy);
      }
    }
 else {
      Integer id=PersistentRegistry.STAGING.getRegistry(BLOCKS,Block.class).getId(dummy);
      FMLLog.log(Level.WARN,"The ID %d is currently locally mapped - it will be replaced with air for this session",id);
      PersistentRegistry.STAGING.getRegistry(BLOCKS,Block.class).markDummy(dummy,id,new BlockDummyAir());
    }
  }
  List<String> missedMappings=Loader.instance().fireMissingMappingEvent(missing.get(BLOCKS),missing.get(ITEMS),isLocalWorld,remaps.get(BLOCKS),remaps.get(ITEMS));
  if (!missedMappings.isEmpty()) {
    return missedMappings;
  }
  if (injectFrozenData) {
    for (    Map.Entry<ResourceLocation,Integer> missingBlock : missing.get(BLOCKS).entrySet()) {
      ResourceLocation rl=missingBlock.getKey();
      Integer id=missingBlock.getValue();
      FMLLog.log(Level.DEBUG,"Replacing id %s named as %s with air block. If the mod becomes available again later, it can reload here",id,rl);
      PersistentRegistry.STAGING.getRegistry(BLOCKS,Block.class).markDummy(rl,id,new BlockDummyAir());
    }
  }
  if (injectFrozenData) {
    for (    Map.Entry<ResourceLocation,FMLControlledNamespacedRegistry<?>> r : PersistentRegistry.ACTIVE.registries.entrySet()) {
      final Class<? extends IForgeRegistryEntry> registrySuperType=PersistentRegistry.ACTIVE.getRegistrySuperType(r.getKey());
      loadFrozenDataToStagingRegistry(remaps,r.getKey(),registrySuperType);
    }
  }
  forAllRegistries(PersistentRegistry.STAGING,ValidateRegistryFunction.OPERATION);
  for (  Map.Entry<ResourceLocation,FMLControlledNamespacedRegistry<?>> r : PersistentRegistry.ACTIVE.registries.entrySet()) {
    final Class<? extends IForgeRegistryEntry> registrySuperType=PersistentRegistry.ACTIVE.getRegistrySuperType(r.getKey());
    loadRegistry(r.getKey(),PersistentRegistry.STAGING,PersistentRegistry.ACTIVE,registrySuperType);
  }
  forAllRegistries(PersistentRegistry.ACTIVE,DumpRegistryFunction.OPERATION);
  Loader.instance().fireRemapEvent(remaps.get(BLOCKS),remaps.get(ITEMS),false);
  ObjectHolderRegistry.INSTANCE.applyObjectHolders();
  PersistentRegistry.STAGING.clean();
  return ImmutableList.of();
}
