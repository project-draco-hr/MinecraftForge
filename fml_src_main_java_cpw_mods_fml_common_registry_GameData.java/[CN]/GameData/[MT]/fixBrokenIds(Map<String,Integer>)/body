{
  BitSet availabilityMap=new BitSet(32000);
  for (  Entry<String,Integer> entry : dataList.entrySet()) {
    String itemName=entry.getKey();
    if (itemName.charAt(0) == '\u0001') {
      availabilityMap.set(entry.getValue());
    }
  }
  Set<String> itemsToAllocate=new HashSet<String>();
  Map<String,Integer> itemsToRelocate=new HashMap<String,Integer>();
  for (  Entry<String,Integer> entry : dataList.entrySet()) {
    String itemName=entry.getKey();
    if (itemName.charAt(0) != '\u0001') {
      int oldId=entry.getValue();
      if (availabilityMap.get(oldId)) {
        String realName=itemName.substring(1);
        String blockName='\u0001' + realName;
        if (!dataList.containsKey(blockName) || (getMain().iItemRegistry.getRaw(realName) != null && !(getMain().iItemRegistry.getRaw(realName) instanceof ItemBlock))) {
          itemsToAllocate.add(itemName);
        }
 else         if (dataList.get(blockName) != oldId) {
          int newId=dataList.get(blockName);
          itemsToRelocate.put(entry.getKey(),newId);
        }
      }
 else {
        availabilityMap.set(oldId);
      }
    }
  }
  if (itemsToAllocate.isEmpty() && itemsToRelocate.isEmpty())   return;
  String text="Forge Mod Loader detected that this save is damaged.\n\n" + "It's likely that an automatic repair can successfully restore\n" + "most of it, except some items which may get swapped with others.\n\n"+ "A world backup will be created as a zip file in your saves\n"+ "directory automatically.";
  boolean confirmed=StartupQuery.confirm(text);
  if (!confirmed)   StartupQuery.abort();
  try {
    ZipperUtil.backupWorld();
  }
 catch (  IOException e) {
    StartupQuery.notify("The world backup couldn't be created.\n\n" + e);
    StartupQuery.abort();
  }
  for (  String itemName : itemsToAllocate) {
    int oldId=dataList.get(itemName);
    int newId=availabilityMap.nextClearBit(4096);
    dataList.put(itemName,newId);
    FMLLog.warning("Fixed Item %s conflicting with another block/item, old id %d, new id %d.",itemName.substring(1),oldId,newId);
  }
  for (  Map.Entry<String,Integer> entry : itemsToRelocate.entrySet()) {
    String itemName=entry.getKey();
    int newId=entry.getValue();
    int oldId=dataList.put(itemName,newId);
    FMLLog.warning("Fixed ItemBlock %s not using the id of its block, old id %d, new id %d.",itemName.substring(1),oldId,newId);
  }
}
