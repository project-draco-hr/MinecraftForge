{
  isLoading=true;
  loadBlocks();
  loadItems();
  try {
    missingModel=getModel(new ResourceLocation(MODEL_MISSING.getResourceDomain(),MODEL_MISSING.getResourcePath()));
  }
 catch (  IOException e) {
    Throwables.propagate(e);
  }
  stateModels.put(MODEL_MISSING,missingModel);
  textures.remove(TextureMap.LOCATION_MISSING_TEXTURE);
  textures.addAll(LOCATIONS_BUILTIN_TEXTURES);
  textureMap.loadSprites(resourceManager,new IIconCreator(){
    public void registerSprites(    TextureMap map){
      for (      ResourceLocation t : textures) {
        map.registerSprite(t);
      }
    }
  }
);
  Function<ResourceLocation,TextureAtlasSprite> textureGetter=new Function<ResourceLocation,TextureAtlasSprite>(){
    public TextureAtlasSprite apply(    ResourceLocation location){
      return Minecraft.getMinecraft().getTextureMapBlocks().getAtlasSprite(location.toString());
    }
  }
;
  IFlexibleBakedModel missingBaked=missingModel.bake(missingModel.getDefaultState(),Attributes.DEFAULT_BAKED_FORMAT,textureGetter);
  for (  Entry<ModelResourceLocation,IModel> e : stateModels.entrySet()) {
    if (e.getValue() == getMissingModel()) {
      bakedRegistry.putObject(e.getKey(),missingBaked);
    }
 else {
      bakedRegistry.putObject(e.getKey(),e.getValue().bake(e.getValue().getDefaultState(),Attributes.DEFAULT_BAKED_FORMAT,textureGetter));
    }
  }
  return bakedRegistry;
}
