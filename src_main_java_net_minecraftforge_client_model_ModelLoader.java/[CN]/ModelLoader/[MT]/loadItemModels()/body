{
  if (FluidRegistry.isUniversalBucketEnabled()) {
    setBucketModelDefinition(ForgeModContainer.getInstance().universalBucket);
  }
  registerVariantNames();
  List<String> itemVariants=Lists.newArrayList();
  for (  Item item : GameData.getItemRegistry().typeSafeIterable()) {
    itemVariants.addAll(getVariantNames(item));
  }
  Collections.sort(itemVariants);
  ProgressBar itemBar=ProgressManager.push("ModelLoader: items",itemVariants.size());
  for (  String s : itemVariants) {
    ResourceLocation file=getItemLocation(s);
    ModelResourceLocation memory=getInventoryVariant(s);
    itemBar.step(memory.toString());
    IModel model=null;
    try {
      model=getModel(file);
      if (model == null) {
        model=getMissingModel();
      }
      stateModels.put(memory,model);
    }
 catch (    FileNotFoundException e) {
      FMLLog.fine("Item json isn't found for '" + memory + "', trying to load the variant from the blockstate json");
      try {
        registerVariant(getModelBlockDefinition(memory),memory);
      }
 catch (      Exception exception) {
        storeException(memory,new Exception("Could not load item model either from the normal location " + file + " or from the blockstate",exception));
      }
    }
catch (    Exception exception) {
      storeException(memory,exception);
    }
  }
  ProgressManager.pop(itemBar);
  if (ForgeModContainer.replaceVanillaBucketModel) {
    if (!stateModels.containsKey(ModelDynBucket.LOCATION)) {
      try {
        registerVariant(getModelBlockDefinition(ModelDynBucket.LOCATION),ModelDynBucket.LOCATION);
      }
 catch (      Exception exception) {
        FMLLog.getLogger().error("Could not load the forge bucket model from the blockstate",exception);
        return;
      }
    }
    for (    String s : getVariantNames(Items.bucket)) {
      ModelResourceLocation memory=getInventoryVariant(s);
      try {
        IModel model=getModel(new ResourceLocation("forge","item/bucket"));
        stateModels.put(memory,model);
      }
 catch (      IOException e) {
      }
    }
    setBucketModel(Items.water_bucket);
    setBucketModel(Items.lava_bucket);
    if (FluidRegistry.isFluidRegistered("milk")) {
      Fluid milk=FluidRegistry.getFluid("milk");
      FluidStack milkStack=new FluidStack(milk,FluidContainerRegistry.BUCKET_VOLUME);
      if (FluidContainerRegistry.getContainerCapacity(milkStack,new ItemStack(Items.bucket)) == FluidContainerRegistry.BUCKET_VOLUME) {
        setBucketModel(Items.milk_bucket);
      }
    }
 else {
      for (      String s : getVariantNames(Items.milk_bucket)) {
        ModelResourceLocation memory=getInventoryVariant(s);
        try {
          IModel model=getModel(new ResourceLocation("forge","item/bucket_milk"));
          stateModels.put(memory,model);
        }
 catch (        IOException e) {
        }
      }
    }
  }
}
