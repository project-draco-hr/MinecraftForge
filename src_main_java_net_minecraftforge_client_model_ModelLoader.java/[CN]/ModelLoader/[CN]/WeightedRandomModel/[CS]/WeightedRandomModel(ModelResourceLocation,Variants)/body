{
  this.variants=variants.getVariants();
  ImmutableList.Builder<Pair<IModel,IModelState>> builder=ImmutableList.builder();
  for (  Variant v : variants.getVariants()) {
    ResourceLocation loc=v.getModelLocation();
    locations.add(loc);
    IModel model=null;
    try {
      model=getModel(loc);
    }
 catch (    Exception e) {
      FMLLog.warning("Unable to load block model: \'" + loc + "\' for variant: \'"+ parent+ "\': "+ e.toString());
      model=getMissingModel();
    }
    if (v instanceof ISmartVariant) {
      model=((ISmartVariant)v).process(model,ModelLoader.this);
      try {
        resolveDependencies(model);
      }
 catch (      IOException e) {
        FMLLog.getLogger().error("Exception resolving indirect dependencies for model" + loc,e);
      }
      textures.addAll(model.getTextures());
    }
    models.add(model);
    builder.add(Pair.of(model,v.getState()));
  }
  if (models.size() == 0) {
    IModel missing=getMissingModel();
    models.add(missing);
    builder.add(Pair.<IModel,IModelState>of(missing,TRSRTransformation.identity()));
  }
  defaultState=new MultiModelState(builder.build());
}
