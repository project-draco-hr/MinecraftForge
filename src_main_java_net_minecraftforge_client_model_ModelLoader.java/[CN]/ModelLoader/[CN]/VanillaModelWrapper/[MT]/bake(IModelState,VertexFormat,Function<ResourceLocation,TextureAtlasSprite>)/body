{
  if (!Attributes.moreSpecific(format,Attributes.DEFAULT_BAKED_FORMAT)) {
    throw new IllegalArgumentException("can't bake vanilla models to the format that doesn't fit into the default one: " + format);
  }
  ModelBlock model=this.model;
  if (model == null)   return getMissingModel().bake(getMissingModel().getDefaultState(),format,bakedTextureGetter);
  List<TRSRTransformation> newTransforms=Lists.newArrayList();
  for (int i=0; i < model.getElements().size(); i++) {
    BlockPart part=model.getElements().get(i);
    newTransforms.add(animation.getPartTransform(state,part,i));
  }
  ItemCameraTransforms transforms=model.func_181682_g();
  Map<TransformType,TRSRTransformation> tMap=Maps.newHashMap();
  tMap.putAll(IPerspectiveAwareModel.MapWrapper.getTransforms(transforms));
  tMap.putAll(IPerspectiveAwareModel.MapWrapper.getTransforms(state));
  IModelState perState=new SimpleModelState(ImmutableMap.copyOf(tMap));
  if (hasItemModel(model)) {
    return new ItemLayerModel(model).bake(perState,format,bakedTextureGetter);
  }
  if (isCustomRenderer(model))   return new BuiltInModel(transforms,model.func_187967_g());
  return bakeNormal(model,perState,state.apply(Optional.<IModelPart>absent()).or(TRSRTransformation.identity()),newTransforms,format,bakedTextureGetter,uvlock);
}
