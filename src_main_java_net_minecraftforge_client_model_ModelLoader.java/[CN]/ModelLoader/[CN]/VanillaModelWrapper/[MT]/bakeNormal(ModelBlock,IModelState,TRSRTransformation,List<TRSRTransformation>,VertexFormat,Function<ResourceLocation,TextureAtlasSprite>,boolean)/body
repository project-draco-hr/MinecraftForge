{
  TextureAtlasSprite particle=bakedTextureGetter.apply(new ResourceLocation(model.resolveTextureName("particle")));
  SimpleBakedModel.Builder builder=(new SimpleBakedModel.Builder(model)).setTexture(particle);
  for (int i=0; i < model.getElements().size(); i++) {
    BlockPart part=model.getElements().get(i);
    TRSRTransformation transformation=modelState;
    if (newTransforms.get(i) != null) {
      transformation=transformation.compose(newTransforms.get(i));
    }
    for (    Map.Entry<EnumFacing,BlockPartFace> e : (Iterable<Map.Entry<EnumFacing,BlockPartFace>>)part.mapFaces.entrySet()) {
      TextureAtlasSprite textureatlassprite1=bakedTextureGetter.apply(new ResourceLocation(model.resolveTextureName(e.getValue().texture)));
      if (e.getValue().cullFace == null || !TRSRTransformation.isInteger(transformation.getMatrix())) {
        builder.addGeneralQuad(makeBakedQuad(part,e.getValue(),textureatlassprite1,e.getKey(),transformation,uvLocked));
      }
 else {
        builder.addFaceQuad(modelState.rotate(e.getValue().cullFace),makeBakedQuad(part,e.getValue(),textureatlassprite1,e.getKey(),transformation,uvLocked));
      }
    }
  }
  return new ISmartBlockModel.PerspectiveWrapper(new IPerspectiveAwareModel.MapWrapper(new IFlexibleBakedModel.Wrapper(builder.makeBakedModel(),format),perState)){
    public IBakedModel handleBlockState(    IBlockState state){
      return VanillaModelWrapper.this.handleBlockState(parent,modelState,state);
    }
  }
;
}
