{
  IBakedModel missingModel=modelRegistry.getObject(MODEL_MISSING);
  Map<String,Integer> modelErrors=Maps.newHashMap();
  for (  Map.Entry<ResourceLocation,Exception> entry : loadingExceptions.entrySet()) {
    if (entry.getKey() instanceof ModelResourceLocation) {
      ModelResourceLocation location=(ModelResourceLocation)entry.getKey();
      IBakedModel model=modelRegistry.getObject(location);
      if (model == null || model == missingModel) {
        String domain=entry.getKey().getResourceDomain();
        Integer errorCountBox=modelErrors.get(domain);
        int errorCount=errorCountBox == null ? 0 : errorCountBox;
        errorCount++;
        if (errorCount < 5) {
          FMLLog.getLogger().error("Exception loading model for variant " + entry.getKey(),entry.getValue());
        }
        modelErrors.put(domain,errorCount);
      }
      if (model == null) {
        modelRegistry.putObject(location,missingModel);
      }
    }
  }
  for (  ModelResourceLocation missing : missingVariants) {
    IBakedModel model=modelRegistry.getObject(missing);
    if (model == null || model == missingModel) {
      String domain=missing.getResourceDomain();
      Integer errorCountBox=modelErrors.get(domain);
      int errorCount=errorCountBox == null ? 0 : errorCountBox;
      errorCount++;
      if (errorCount < 5) {
        FMLLog.severe("Model definition for location %s not found",missing);
      }
      modelErrors.put(domain,errorCount);
    }
    if (model == null) {
      modelRegistry.putObject(missing,missingModel);
    }
  }
  for (  Map.Entry<String,Integer> e : modelErrors.entrySet()) {
    if (e.getValue() >= 5) {
      FMLLog.severe("Supressed additional %s model loading errors for domain %s",e.getValue(),e.getKey());
    }
  }
  isLoading=false;
}
