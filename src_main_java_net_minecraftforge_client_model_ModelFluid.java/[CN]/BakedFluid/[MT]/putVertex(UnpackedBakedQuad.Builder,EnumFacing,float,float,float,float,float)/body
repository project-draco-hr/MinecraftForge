{
  for (int e=0; e < format.getElementCount(); e++) {
switch (format.getElement(e).getUsage()) {
case POSITION:
      float[] data=new float[]{x - side.getDirectionVec().getX() * eps,y,z - side.getDirectionVec().getZ() * eps,1};
    if (transformation.isPresent() && transformation.get() != TRSRTransformation.identity()) {
      Vector4f vec=new Vector4f(data);
      transformation.get().getMatrix().transform(vec);
      vec.get(data);
    }
  builder.put(e,data);
break;
case COLOR:
builder.put(e,((color >> 16) & 0xFF) / 255f,((color >> 8) & 0xFF) / 255f,(color & 0xFF) / 255f,((color >> 24) & 0xFF) / 255f);
break;
case UV:
if (format.getElement(e).getIndex() == 0) {
builder.put(e,u,v,0f,1f);
break;
}
case NORMAL:
builder.put(e,(float)side.getFrontOffsetX(),(float)side.getFrontOffsetY(),(float)side.getFrontOffsetZ(),0f);
break;
default :
builder.put(e);
break;
}
}
}
