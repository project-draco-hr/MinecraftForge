{
  this.transformation=transformation;
  this.transforms=transforms;
  this.format=format;
  this.color=color;
  this.still=still;
  this.flowing=flowing;
  this.gas=gas;
  faceQuads=Maps.newEnumMap(EnumFacing.class);
  for (  EnumFacing side : EnumFacing.values()) {
    faceQuads.put(side,ImmutableList.<BakedQuad>of());
  }
  if (statePresent) {
    float[] y=new float[4];
    for (int i=0; i < 4; i++) {
      if (gas) {
        y[i]=1 - cornerRound[i] / 768f;
      }
 else {
        y[i]=cornerRound[i] / 768f;
      }
    }
    float flow=(float)Math.toRadians(flowRound);
    TextureAtlasSprite topSprite=flowing;
    float scale=4;
    if (flow < -17F) {
      flow=0;
      scale=8;
      topSprite=still;
    }
    float c=MathHelper.cos(flow) * scale;
    float s=MathHelper.sin(flow) * scale;
    EnumFacing side=gas ? EnumFacing.DOWN : EnumFacing.UP;
    UnpackedBakedQuad.Builder builder=new UnpackedBakedQuad.Builder(format);
    builder.setQuadOrientation(side);
    builder.setQuadColored();
    for (int i=gas ? 3 : 0; i != (gas ? -1 : 4); i+=(gas ? -1 : 1)) {
      putVertex(builder,side,x[i],y[i],z[i],topSprite.getInterpolatedU(8 + c * (x[i] * 2 - 1) + s * (z[i] * 2 - 1)),topSprite.getInterpolatedV(8 + c * (x[(i + 1) % 4] * 2 - 1) + s * (z[(i + 1) % 4] * 2 - 1)));
    }
    faceQuads.put(side,ImmutableList.<BakedQuad>of(builder.build()));
    side=side.getOpposite();
    builder=new UnpackedBakedQuad.Builder(format);
    builder.setQuadOrientation(side);
    builder.setQuadColored();
    for (int i=gas ? 3 : 0; i != (gas ? -1 : 4); i+=(gas ? -1 : 1)) {
      putVertex(builder,side,z[i],gas ? 1 : 0,x[i],still.getInterpolatedU(z[i] * 16),still.getInterpolatedV(x[i] * 16));
    }
    faceQuads.put(side,ImmutableList.<BakedQuad>of(builder.build()));
    for (int i=0; i < 4; i++) {
      side=EnumFacing.getHorizontal((5 - i) % 4);
      BakedQuad q[]=new BakedQuad[2];
      for (int k=0; k < 2; k++) {
        builder=new UnpackedBakedQuad.Builder(format);
        builder.setQuadOrientation(side);
        builder.setQuadColored();
        for (int j=0; j < 4; j++) {
          int l=(k * 3) + (1 - 2 * k) * j;
          float yl=z[l] * y[(i + x[l]) % 4];
          if (gas && z[l] == 0)           yl=1;
          putVertex(builder,side,x[(i + x[l]) % 4],yl,z[(i + x[l]) % 4],flowing.getInterpolatedU(x[l] * 8),flowing.getInterpolatedV((gas ? yl : 1 - yl) * 8));
        }
        q[k]=builder.build();
      }
      faceQuads.put(side,ImmutableList.of(q[0],q[1]));
    }
  }
 else {
    UnpackedBakedQuad.Builder builder=new UnpackedBakedQuad.Builder(format);
    builder.setQuadOrientation(EnumFacing.UP);
    builder.setQuadColored();
    for (int i=0; i < 4; i++) {
      putVertex(builder,EnumFacing.UP,z[i],x[i],0,still.getInterpolatedU(z[i] * 16),still.getInterpolatedV(x[i] * 16));
    }
    faceQuads.put(EnumFacing.SOUTH,ImmutableList.<BakedQuad>of(builder.build()));
  }
}
