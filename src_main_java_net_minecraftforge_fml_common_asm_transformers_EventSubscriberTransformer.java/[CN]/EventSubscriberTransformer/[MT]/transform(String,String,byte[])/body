{
  if (basicClass == null)   return null;
  ClassNode classNode=new ClassNode();
  new ClassReader(basicClass).accept(classNode,0);
  boolean isSubscriber=false;
  for (  MethodNode methodNode : classNode.methods) {
    List<AnnotationNode> anns=methodNode.visibleAnnotations;
    if (anns != null && Iterables.any(anns,SubscribeEventPredicate.INSTANCE)) {
      if (Modifier.isPrivate(methodNode.access)) {
        String msg="Cannot apply @SubscribeEvent to private method %s/%s%s";
        throw new RuntimeException(String.format(msg,classNode.name,methodNode.name,methodNode.desc));
      }
      methodNode.access=toPublic(methodNode.access);
      isSubscriber=true;
    }
  }
  if (isSubscriber) {
    classNode.access=toPublic(classNode.access);
    ClassWriter writer=new ClassWriter(ClassWriter.COMPUTE_MAXS);
    classNode.accept(writer);
    return writer.toByteArray();
  }
  return basicClass;
}
