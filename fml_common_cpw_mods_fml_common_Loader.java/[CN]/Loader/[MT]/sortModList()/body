{
  FMLLog.fine("Verifying mod requirements are satisfied");
  try {
    BiMap<String,ArtifactVersion> modVersions=HashBiMap.create();
    for (    ModContainer mod : getActiveModList()) {
      modVersions.put(mod.getModId(),mod.getProcessedVersion());
    }
    for (    ModContainer mod : getActiveModList()) {
      if (!mod.acceptableMinecraftVersionRange().containsVersion(minecraft.getProcessedVersion())) {
        FMLLog.severe("The mod %s does not wish to run in Minecraft version %s. You will have to remove it to play.",mod.getModId(),getMCVersionString());
        throw new WrongMinecraftVersionException(mod);
      }
      Map<String,ArtifactVersion> names=Maps.uniqueIndex(mod.getRequirements(),new Function<ArtifactVersion,String>(){
        public String apply(        ArtifactVersion v){
          return v.getLabel();
        }
      }
);
      Set<ArtifactVersion> versionMissingMods=Sets.newHashSet();
      Set<String> missingMods=Sets.difference(names.keySet(),modVersions.keySet());
      if (!missingMods.isEmpty()) {
        FMLLog.severe("The mod %s (%s) requires mods %s to be available",mod.getModId(),mod.getName(),missingMods);
        for (        String modid : missingMods) {
          versionMissingMods.add(names.get(modid));
        }
        throw new MissingModsException(versionMissingMods);
      }
      ImmutableList<ArtifactVersion> allDeps=ImmutableList.<ArtifactVersion>builder().addAll(mod.getDependants()).addAll(mod.getDependencies()).build();
      for (      ArtifactVersion v : allDeps) {
        if (modVersions.containsKey(v.getLabel())) {
          if (!v.containsVersion(modVersions.get(v.getLabel()))) {
            versionMissingMods.add(v);
          }
        }
      }
      if (!versionMissingMods.isEmpty()) {
        FMLLog.severe("The mod %s (%s) requires mod versions %s to be available",mod.getModId(),mod.getName(),versionMissingMods);
        throw new MissingModsException(versionMissingMods);
      }
    }
    FMLLog.fine("All mod requirements are satisfied");
    ModSorter sorter=new ModSorter(getActiveModList(),namedMods);
    try {
      FMLLog.fine("Sorting mods into an ordered list");
      List<ModContainer> sortedMods=sorter.sort();
      modController.getActiveModList().clear();
      modController.getActiveModList().addAll(sortedMods);
      mods.removeAll(sortedMods);
      sortedMods.addAll(mods);
      mods=sortedMods;
      FMLLog.fine("Mod sorting completed successfully");
    }
 catch (    ModSortingException sortException) {
      FMLLog.severe("A dependency cycle was detected in the input mod set so an ordering cannot be determined");
      FMLLog.severe("The visited mod list is %s",sortException.getExceptionData().getVisitedNodes());
      FMLLog.severe("The first mod in the cycle is %s",sortException.getExceptionData().getFirstBadNode());
      FMLLog.log(Level.SEVERE,sortException,"The full error");
      throw new LoaderException(sortException);
    }
  }
  finally {
    FMLLog.fine("Mod sorting data:");
    for (    ModContainer mod : getActiveModList()) {
      if (!mod.isImmutable()) {
        FMLLog.fine("\t%s(%s:%s): %s (%s)",mod.getModId(),mod.getName(),mod.getVersion(),mod.getSource().getName(),mod.getSortingRules());
      }
    }
    if (mods.size() == 0) {
      FMLLog.fine("No mods found to sort");
    }
  }
}
