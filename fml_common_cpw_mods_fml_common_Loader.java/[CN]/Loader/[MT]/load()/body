{
  File minecraftDir=FMLCommonHandler.instance().getMinecraftRootDirectory();
  File modsDir=new File(minecraftDir,"mods");
  File configDir=new File(minecraftDir,"config");
  String canonicalModsPath;
  String canonicalConfigPath;
  try {
    canonicalMinecraftDir=minecraftDir.getCanonicalFile();
    canonicalModsPath=modsDir.getCanonicalPath();
    canonicalConfigPath=configDir.getCanonicalPath();
    canonicalConfigDir=configDir.getCanonicalFile();
  }
 catch (  IOException ioe) {
    log.severe(String.format("Failed to resolve mods directory mods %s",modsDir.getAbsolutePath()));
    log.throwing("fml.server.Loader","initialize",ioe);
    throw new LoaderException(ioe);
  }
  if (!modsDir.exists()) {
    log.fine(String.format("No mod directory found, creating one: %s",canonicalModsPath));
    try {
      modsDir.mkdir();
    }
 catch (    Exception e) {
      log.throwing("fml.server.Loader","initialize",e);
      throw new LoaderException(e);
    }
  }
  if (!configDir.exists()) {
    log.fine(String.format("No config directory found, creating one: %s",canonicalConfigPath));
    try {
      configDir.mkdir();
    }
 catch (    Exception e) {
      log.throwing("fml.server.Loader","initialize",e);
      throw new LoaderException(e);
    }
  }
  if (!modsDir.isDirectory()) {
    log.severe(String.format("Attempting to load mods from %s, which is not a directory",canonicalModsPath));
    LoaderException loaderException=new LoaderException();
    log.throwing("fml.server.Loader","initialize",loaderException);
    throw loaderException;
  }
  if (!configDir.isDirectory()) {
    log.severe(String.format("Attempting to load configuration from %s, which is not a directory",canonicalConfigPath));
    LoaderException loaderException=new LoaderException();
    log.throwing("fml.server.Loader","initialize",loaderException);
    throw loaderException;
  }
  state=State.LOADING;
  modClassLoader=new ModClassLoader();
  log.fine("Attempting to load mods contained in the minecraft jar file");
  File minecraftSource=modClassLoader.getParentSource();
  if (minecraftSource.isFile()) {
    log.fine(String.format("Minecraft is a file at %s, loading",minecraftSource.getName()));
    attemptFileLoad(minecraftSource);
  }
 else   if (minecraftSource.isDirectory()) {
    log.fine(String.format("Minecraft is a directory at %s, loading",minecraftSource.getName()));
    attemptDirLoad(minecraftSource);
  }
 else {
    log.severe(String.format("Unable to locate minecraft data at %s\n",minecraftSource.getName()));
    throw new LoaderException();
  }
  log.fine("Minecraft jar mods loaded successfully");
  log.info(String.format("Loading mods from %s",canonicalModsPath));
  File[] modList=modsDir.listFiles();
  Arrays.sort(modList);
  for (  File modFile : modList) {
    if (modFile.isDirectory()) {
      log.fine(String.format("Found a directory %s, attempting to load it",modFile.getName()));
      boolean modFound=attemptDirLoad(modFile);
      if (modFound) {
        log.fine(String.format("Directory %s loaded successfully",modFile.getName()));
      }
 else {
        log.info(String.format("Directory %s contained no mods",modFile.getName()));
      }
    }
 else {
      Matcher matcher=zipJar.matcher(modFile.getName());
      if (matcher.matches()) {
        log.fine(String.format("Found a zip or jar file %s, attempting to load it",matcher.group(0)));
        boolean modFound=attemptFileLoad(modFile);
        if (modFound) {
          log.fine(String.format("File %s loaded successfully",matcher.group(0)));
        }
 else {
          log.info(String.format("File %s contained no mods",matcher.group(0)));
        }
      }
    }
  }
  if (state == State.ERRORED) {
    log.severe("A problem has occured during mod loading, giving up now");
    throw new RuntimeException("Giving up please");
  }
  log.info(String.format("Forge Mod Loader has loaded %d mods",mods.size()));
}
