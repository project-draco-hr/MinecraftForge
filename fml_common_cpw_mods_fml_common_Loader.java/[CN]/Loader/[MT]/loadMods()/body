{
  initializeLoader();
  mods=Lists.newArrayList();
  namedMods=Maps.newHashMap();
  modController=new LoadController(this);
  modController.transition(LoaderState.LOADING);
  ModDiscoverer disc=identifyMods();
  disableRequestedMods();
  FMLLog.fine("Reloading logging properties from %s",loggingProperties.getPath());
  FMLRelaunchLog.loadLogConfiguration(loggingProperties);
  FMLLog.fine("Reloaded logging properties");
  modController.distributeStateMessage(FMLLoadEvent.class);
  sortModList();
  mods=ImmutableList.copyOf(mods);
  for (  File nonMod : disc.getNonModLibs()) {
    if (nonMod.isFile()) {
      FMLLog.info("FML has found a non-mod file %s in your mods directory. It will now be injected into your classpath. This could severe stability issues, it should be removed if possible.",nonMod.getName());
      try {
        modClassLoader.addFile(nonMod);
      }
 catch (      MalformedURLException e) {
        FMLLog.log(Level.SEVERE,e,"Encountered a weird problem with non-mod file injection : %s",nonMod.getName());
      }
    }
  }
  modController.transition(LoaderState.CONSTRUCTING);
  modController.distributeStateMessage(LoaderState.CONSTRUCTING,modClassLoader,disc.getASMTable());
  FMLLog.fine("Mod signature data");
  for (  ModContainer mod : getActiveModList()) {
    FMLLog.fine("\t%s(%s:%s): %s (%s)",mod.getModId(),mod.getName(),mod.getVersion(),mod.getSource().getName(),CertificateHelper.getFingerprint(mod.getSigningCertificate()));
  }
  modController.transition(LoaderState.PREINITIALIZATION);
  modController.distributeStateMessage(LoaderState.PREINITIALIZATION,disc.getASMTable(),canonicalConfigDir);
  modController.transition(LoaderState.INITIALIZATION);
}
