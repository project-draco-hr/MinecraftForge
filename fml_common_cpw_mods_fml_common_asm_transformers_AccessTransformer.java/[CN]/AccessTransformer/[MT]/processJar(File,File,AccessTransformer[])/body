{
  ZipInputStream inJar=null;
  ZipOutputStream outJar=null;
  try {
    try {
      inJar=new ZipInputStream(new BufferedInputStream(new FileInputStream(inFile)));
    }
 catch (    FileNotFoundException e) {
      throw new FileNotFoundException("Could not open input file: " + e.getMessage());
    }
    try {
      outJar=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
    }
 catch (    FileNotFoundException e) {
      throw new FileNotFoundException("Could not open output file: " + e.getMessage());
    }
    ZipEntry entry;
    while ((entry=inJar.getNextEntry()) != null) {
      if (entry.isDirectory()) {
        outJar.putNextEntry(entry);
        continue;
      }
      byte[] data=new byte[4096];
      ByteArrayOutputStream entryBuffer=new ByteArrayOutputStream();
      int len;
      do {
        len=inJar.read(data);
        if (len > 0) {
          entryBuffer.write(data,0,len);
        }
      }
 while (len != -1);
      byte[] entryData=entryBuffer.toByteArray();
      String entryName=entry.getName();
      if (entryName.endsWith(".class") && !entryName.startsWith(".")) {
        ClassNode cls=new ClassNode();
        ClassReader rdr=new ClassReader(entryData);
        rdr.accept(cls,0);
        String name=cls.name.replace('/','.').replace('\\','.');
        for (        AccessTransformer trans : transformers) {
          entryData=trans.transform(name,name,entryData);
        }
      }
      ZipEntry newEntry=new ZipEntry(entryName);
      outJar.putNextEntry(newEntry);
      outJar.write(entryData);
    }
  }
  finally {
    if (outJar != null) {
      try {
        outJar.close();
      }
 catch (      IOException e) {
      }
    }
    if (inJar != null) {
      try {
        inJar.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
