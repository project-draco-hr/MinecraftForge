{
  new Thread("Forge Version Check"){
    @Override public void run(){
      if (!ForgeModContainer.getConfig().get(ForgeModContainer.VERSION_CHECK_CAT,"Global",true).getBoolean()) {
        FMLLog.log("ForgeVersionCheck",Level.INFO,"Global Forge version check system disabeld, no futher processing.");
        return;
      }
      for (      Entry<ModContainer,URL> entry : gatherMods().entrySet()) {
        ModContainer mod=entry.getKey();
        if (ForgeModContainer.getConfig().get(ForgeModContainer.VERSION_CHECK_CAT,mod.getModId(),true).getBoolean()) {
          process(mod,entry.getValue());
        }
 else {
          FMLLog.log("ForgeVersionCheck",Level.INFO,"[%s] Skipped version check",mod.getModId());
        }
      }
    }
    private void process(    ModContainer mod,    URL url){
      try {
        FMLLog.log("ForgeVersionCheck",Level.INFO,"[%s] Starting version check at %s",mod.getModId(),url.toString());
        Status status=PENDING;
        ComparableVersion target=null;
        InputStream con=url.openStream();
        String data=new String(ByteStreams.toByteArray(con));
        con.close();
        FMLLog.log("ForgeVersionCheck",Level.DEBUG,"[%s] Received version check data:\n%s",mod.getModId(),data);
        Map<String,Object> json=new Gson().fromJson(data,Map.class);
        Map<String,String> promos=(Map<String,String>)json.get("promos");
        String display_url=(String)json.get("homepage");
        String rec=promos.get(MinecraftForge.MC_VERSION + "-recommended");
        String lat=promos.get(MinecraftForge.MC_VERSION + "-latest");
        ComparableVersion current=new ComparableVersion(mod.getVersion());
        if (rec != null) {
          ComparableVersion recommended=new ComparableVersion(rec);
          int diff=recommended.compareTo(current);
          if (diff == 0)           status=UP_TO_DATE;
 else           if (diff < 0) {
            status=AHEAD;
            if (lat != null) {
              ComparableVersion latest=new ComparableVersion(lat);
              if (current.compareTo(latest) < 0) {
                status=OUTDATED;
                target=latest;
              }
            }
          }
 else {
            status=OUTDATED;
            target=recommended;
          }
        }
 else         if (lat != null) {
          ComparableVersion latest=new ComparableVersion(lat);
          if (current.compareTo(latest) < 0) {
            status=BETA_OUTDATED;
            target=latest;
          }
 else           status=BETA;
        }
 else         status=BETA;
        FMLLog.log("ForgeVersionCheck",Level.INFO,"[%s] Found status: %s Target: %s",mod.getModId(),status,target);
        Map<ComparableVersion,String> changes=new LinkedHashMap<ComparableVersion,String>();
        Map<String,String> tmp=(Map<String,String>)json.get(MinecraftForge.MC_VERSION);
        if (tmp != null) {
          List<ComparableVersion> ordered=new ArrayList<ComparableVersion>();
          for (          String key : tmp.keySet()) {
            ComparableVersion ver=new ComparableVersion(key);
            if (ver.compareTo(current) > 0 && (target == null || ver.compareTo(target) < 1)) {
              ordered.add(ver);
            }
          }
          Collections.sort(ordered);
          for (          ComparableVersion ver : ordered) {
            changes.put(ver,tmp.get(ver.toString()));
          }
        }
        if (mod instanceof InjectedModContainer)         mod=((InjectedModContainer)mod).wrappedContainer;
        results.put(mod,new CheckResult(status,target,changes,display_url));
      }
 catch (      Exception e) {
        FMLLog.log("ForgeVersionCheck",Level.DEBUG,e,"Failed to process update information");
        status=FAILED;
      }
    }
  }
.start();
}
