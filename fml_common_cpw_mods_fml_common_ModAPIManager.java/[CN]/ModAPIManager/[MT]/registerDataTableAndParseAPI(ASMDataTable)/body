{
  this.dataTable=dataTable;
  Set<ASMData> apiList=dataTable.getAll("cpw.mods.fml.common.API");
  apiContainers=Maps.newHashMap();
  for (  ASMData data : apiList) {
    Map<String,Object> annotationInfo=data.getAnnotationInfo();
    String apiPackage=data.getClassName().substring(0,data.getClassName().indexOf(".package-info"));
    String providedAPI=(String)annotationInfo.get("provides");
    String apiOwner=(String)annotationInfo.get("owner");
    String apiVersion=(String)annotationInfo.get("apiVersion");
    APIContainer container=apiContainers.get(providedAPI);
    if (container == null) {
      container=new APIContainer(providedAPI,apiVersion,data.getCandidate().getModContainer(),VersionParser.parseVersionReference(apiOwner));
      apiContainers.put(providedAPI,container);
    }
 else {
      container.validate(providedAPI,apiOwner,apiVersion);
    }
    container.addOwnedPackage(apiPackage);
    for (    ModContainer mc : data.getCandidate().getContainedMods()) {
      String embeddedIn=mc.getModId();
      FMLLog.fine("Found API %s (owned by %s providing %s) embedded in %s",apiPackage,apiOwner,providedAPI,embeddedIn);
      if (!embeddedIn.equals(apiOwner)) {
        container.addAPIReference(embeddedIn);
      }
    }
  }
  for (  APIContainer container : apiContainers.values()) {
    for (    String pkg : container.packages) {
      Set<ModCandidate> candidates=dataTable.getCandidatesFor(pkg);
      for (      ModCandidate candidate : candidates) {
        List<String> candidateIds=Lists.transform(candidate.getContainedMods(),new ModIdFunction());
        if (!candidateIds.contains(container.ownerMod.getLabel()) && !container.currentReferents.containsAll(candidateIds)) {
          FMLLog.info("Found mod(s) %s containing declared API package %s (owned by %s) without associated API reference",candidateIds,pkg,container.ownerMod);
          container.addAPIReferences(candidateIds);
        }
      }
    }
    FMLLog.fine("Creating API container dummy for API %s: owner: %s, dependents: %s",container.providedAPI,container.ownerMod,container.referredMods);
  }
}
