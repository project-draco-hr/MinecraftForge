{
  bind(icons);
  if (pre(HEALTH))   return;
  mc.mcProfiler.startSection("health");
  GL11.glEnable(GL11.GL_BLEND);
  boolean highlight=mc.thePlayer.hurtResistantTime / 3 % 2 == 1;
  if (mc.thePlayer.hurtResistantTime < 10) {
    highlight=false;
  }
  IAttributeInstance attrMaxHealth=this.mc.thePlayer.getEntityAttribute(SharedMonsterAttributes.maxHealth);
  int health=MathHelper.ceiling_float_int(mc.thePlayer.getHealth());
  int healthLast=MathHelper.ceiling_float_int(mc.thePlayer.prevHealth);
  float healthMax=(float)attrMaxHealth.getAttributeValue();
  float absorb=this.mc.thePlayer.getAbsorptionAmount();
  int healthRows=MathHelper.ceiling_float_int((healthMax + absorb) / 2.0F / 10.0F);
  int rowHeight=Math.max(10 - (healthRows - 2),3);
  this.rand.setSeed((long)(updateCounter * 312871));
  int left=width / 2 - 91;
  int top=height - left_height;
  left_height+=(healthRows * rowHeight);
  if (rowHeight != 10)   left_height+=10 - rowHeight;
  int regen=-1;
  if (mc.thePlayer.isPotionActive(Potion.regeneration)) {
    regen=updateCounter % 25;
  }
  final int TOP=9 * (mc.theWorld.getWorldInfo().isHardcoreModeEnabled() ? 5 : 0);
  final int BACKGROUND=(highlight ? 25 : 16);
  int MARGIN=16;
  if (mc.thePlayer.isPotionActive(Potion.poison))   MARGIN+=36;
 else   if (mc.thePlayer.isPotionActive(Potion.wither))   MARGIN+=72;
  float absorbRemaining=absorb;
  for (int i=MathHelper.ceiling_float_int((healthMax + absorb) / 2.0F) - 1; i >= 0; --i) {
    int row=MathHelper.ceiling_float_int((float)(i + 1) / 10.0F) - 1;
    int x=left + i % 10 * 8;
    int y=top - row * rowHeight;
    if (health <= 4)     y+=rand.nextInt(2);
    if (i == regen)     y-=2;
    drawTexturedModalRect(x,y,BACKGROUND,TOP,9,9);
    if (highlight) {
      if (i * 2 + 1 < healthLast)       drawTexturedModalRect(x,y,MARGIN + 54,TOP,9,9);
 else       if (i * 2 + 1 == healthLast)       drawTexturedModalRect(x,y,MARGIN + 63,TOP,9,9);
    }
    if (absorbRemaining > 0.0F) {
      if (absorbRemaining == absorb && absorb % 2.0F == 1.0F)       drawTexturedModalRect(x,y,MARGIN + 153,TOP,9,9);
 else       drawTexturedModalRect(x,y,MARGIN + 144,TOP,9,9);
      absorbRemaining-=2.0F;
    }
 else {
      if (i * 2 + 1 < health)       drawTexturedModalRect(x,y,MARGIN + 36,TOP,9,9);
 else       if (i * 2 + 1 == health)       drawTexturedModalRect(x,y,MARGIN + 45,TOP,9,9);
    }
  }
  GL11.glDisable(GL11.GL_BLEND);
  mc.mcProfiler.endSection();
  post(HEALTH);
}
