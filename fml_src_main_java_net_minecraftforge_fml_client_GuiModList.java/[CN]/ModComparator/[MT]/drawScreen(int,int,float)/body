{
  this.modList.drawScreen(p_571_1_,p_571_2_,p_571_3_);
  this.drawCenteredString(this.fontRendererObj,"Mod List",this.width / 2,16,0xFFFFFF);
  int offset=this.listWidth + 20;
  if (selectedMod != null) {
    GL11.glEnable(GL11.GL_BLEND);
    if (!selectedMod.getMetadata().autogenerated) {
      configModButton.visible=true;
      disableModButton.visible=true;
      disableModButton.packedFGColour=0xFF3377;
      configModButton.enabled=false;
      int shifty=35;
      String logoFile=selectedMod.getMetadata().logoFile;
      if (!logoFile.isEmpty()) {
        GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
        TextureManager tm=mc.getTextureManager();
        IResourcePack pack=FMLClientHandler.instance().getResourcePackFor(selectedMod.getModId());
        try {
          if (cachedLogo == null) {
            BufferedImage logo=null;
            if (pack != null) {
              logo=pack.getPackImage();
            }
 else {
              InputStream logoResource=getClass().getResourceAsStream(logoFile);
              if (logoResource != null) {
                logo=ImageIO.read(logoResource);
              }
            }
            if (logo != null) {
              cachedLogo=tm.getDynamicTextureLocation("modlogo",new DynamicTexture(logo));
              cachedLogoDimensions=new Dimension(logo.getWidth(),logo.getHeight());
            }
          }
          if (cachedLogo != null) {
            this.mc.renderEngine.bindTexture(cachedLogo);
            double scaleX=cachedLogoDimensions.width / 200.0;
            double scaleY=cachedLogoDimensions.height / 65.0;
            double scale=1.0;
            if (scaleX > 1 || scaleY > 1) {
              scale=1.0 / Math.max(scaleX,scaleY);
            }
            cachedLogoDimensions.width*=scale;
            cachedLogoDimensions.height*=scale;
            int top=32;
            Tessellator tess=Tessellator.getInstance();
            WorldRenderer world=tess.getWorldRenderer();
            world.startDrawingQuads();
            world.addVertexWithUV(offset,top + cachedLogoDimensions.height,zLevel,0,1);
            world.addVertexWithUV(offset + cachedLogoDimensions.width,top + cachedLogoDimensions.height,zLevel,1,1);
            world.addVertexWithUV(offset + cachedLogoDimensions.width,top,zLevel,1,0);
            world.addVertexWithUV(offset,top,zLevel,0,0);
            tess.draw();
            shifty+=65;
          }
        }
 catch (        IOException e) {
          ;
        }
      }
      this.fontRendererObj.drawStringWithShadow(selectedMod.getMetadata().name,offset,shifty,0xFFFFFF);
      shifty+=12;
      shifty=drawLine(String.format("Version: %s (%s)",selectedMod.getDisplayVersion(),selectedMod.getVersion()),offset,shifty);
      shifty=drawLine(String.format("Mod ID: '%s' Mod State: %s",selectedMod.getModId(),Loader.instance().getModState(selectedMod)),offset,shifty);
      if (!selectedMod.getMetadata().credits.isEmpty()) {
        shifty=drawLine(String.format("Credits: %s",selectedMod.getMetadata().credits),offset,shifty);
      }
      shifty=drawLine(String.format("Authors: %s",selectedMod.getMetadata().getAuthorList()),offset,shifty);
      shifty=drawLine(String.format("URL: %s",selectedMod.getMetadata().url),offset,shifty);
      shifty=drawLine(selectedMod.getMetadata().childMods.isEmpty() ? "No child mods for this mod" : String.format("Child mods: %s",selectedMod.getMetadata().getChildModList()),offset,shifty);
      int rightSide=this.width - offset - 20;
      if (rightSide > 20) {
        this.getFontRenderer().drawSplitString(selectedMod.getMetadata().description,offset,shifty + 10,rightSide,0xDDDDDD);
      }
      Disableable disableable=selectedMod.canBeDisabled();
      if (disableable == Disableable.RESTART) {
        disableModButton.enabled=true;
        disableModButton.visible=true;
        disableModButton.packedFGColour=0xFF3377;
      }
 else       if (disableable == Disableable.YES) {
        disableModButton.enabled=true;
        disableModButton.visible=true;
        disableModButton.packedFGColour=0;
      }
 else {
        disableModButton.packedFGColour=0;
        disableModButton.visible=true;
        disableModButton.enabled=false;
      }
      IModGuiFactory guiFactory=FMLClientHandler.instance().getGuiFactoryFor(selectedMod);
      if (guiFactory == null || guiFactory.mainConfigGuiClass() == null) {
        configModButton.visible=true;
        configModButton.enabled=false;
      }
 else {
        configModButton.visible=true;
        configModButton.enabled=true;
      }
    }
 else {
      offset=(this.listWidth + this.width) / 2;
      this.drawCenteredString(this.fontRendererObj,selectedMod.getName(),offset,35,0xFFFFFF);
      this.drawCenteredString(this.fontRendererObj,String.format("Version: %s",selectedMod.getVersion()),offset,45,0xFFFFFF);
      this.drawCenteredString(this.fontRendererObj,String.format("Mod State: %s",Loader.instance().getModState(selectedMod)),offset,55,0xFFFFFF);
      this.drawCenteredString(this.fontRendererObj,"No mod information found",offset,65,0xDDDDDD);
      this.drawCenteredString(this.fontRendererObj,"Ask your mod author to provide a mod mcmod.info file",offset,75,0xDDDDDD);
      configModButton.visible=false;
      disableModButton.visible=false;
    }
    GL11.glDisable(GL11.GL_BLEND);
  }
 else {
    configModButton.visible=false;
    disableModButton.visible=false;
  }
  super.drawScreen(p_571_1_,p_571_2_,p_571_3_);
  String text=I18n.format("fml.menu.mods.search");
  int x=((10 + modList.right) / 2) - (getFontRenderer().getStringWidth(text) / 2);
  getFontRenderer().drawString(text,x,modList.bottom + 5,0xFFFFFF);
  search.drawTextBox();
}
