{
  if (patches == null) {
    return inputData;
  }
  if (patchedClasses.containsKey(name)) {
    return patchedClasses.get(name);
  }
  List<ClassPatch> list=patches.get(name);
  if (list.isEmpty()) {
    return inputData;
  }
  boolean ignoredError=false;
  FMLRelaunchLog.fine("Runtime patching class %s (input size %d), found %d patch%s",mappedName,(inputData == null ? 0 : inputData.length),list.size(),list.size() != 1 ? "es" : "");
  for (  ClassPatch patch : list) {
    if (!patch.targetClassName.equals(mappedName) && !patch.sourceClassName.equals(name)) {
      FMLRelaunchLog.warning("Binary patch found %s for wrong class %s",patch.targetClassName,mappedName);
    }
    if (!patch.existsAtTarget && (inputData == null || inputData.length == 0)) {
      inputData=new byte[0];
    }
 else     if (!patch.existsAtTarget) {
      FMLRelaunchLog.warning("Patcher expecting empty class data file for %s, but received non-empty",patch.targetClassName);
    }
 else {
      int inputChecksum=Hashing.adler32().hashBytes(inputData).asInt();
      if (patch.inputChecksum != inputChecksum) {
        FMLRelaunchLog.severe("There is a binary discrepency between the expected input class %s (%s) and the actual class. Checksum on disk is %x, in patch %x. Things are probably about to go very wrong. Did you put something into the jar file?",mappedName,name,inputChecksum,patch.inputChecksum);
        if (!Boolean.parseBoolean(System.getProperty("fml.ignorePatchDiscrepancies","false"))) {
          FMLRelaunchLog.severe("The game is going to exit, because this is a critical error, and it is very improbable that the modded game will work, please obtain clean jar files.");
          System.exit(1);
        }
 else {
          FMLRelaunchLog.severe("FML is going to ignore this error, note that the patch will not be applied, and there is likely to be a malfunctioning behaviour, including not running at all");
          ignoredError=true;
          continue;
        }
      }
    }
synchronized (patcher) {
      try {
        inputData=patcher.patch(inputData,patch.patch);
      }
 catch (      IOException e) {
        FMLRelaunchLog.log(Level.ERROR,e,"Encountered problem runtime patching class %s",name);
        continue;
      }
    }
  }
  if (!ignoredError) {
    FMLRelaunchLog.fine("Successfully applied runtime patches for %s (new size %d)",mappedName,inputData.length);
  }
  if (dumpPatched) {
    try {
      Files.write(inputData,new File(tempDir,mappedName));
    }
 catch (    IOException e) {
      FMLRelaunchLog.log(Level.ERROR,e,"Failed to write %s to %s",mappedName,tempDir.getAbsolutePath());
    }
  }
  patchedClasses.put(name,inputData);
  return inputData;
}
