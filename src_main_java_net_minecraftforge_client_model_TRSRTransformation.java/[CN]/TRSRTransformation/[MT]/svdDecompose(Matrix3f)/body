{
  Quat4f u=new Quat4f(0,0,0,1), v=new Quat4f(0,0,0,1), qt=new Quat4f();
  Matrix3f b=new Matrix3f(m), t=new Matrix3f();
  t.transpose(m);
  b.mul(t,b);
  for (int i=0; i < 5; i++)   v.mul(stepJacobi(b));
  v.normalize();
  t.set(v);
  b.set(m);
  b.mul(t);
  sortSingularValues(b,v);
  Pair<Float,Float> p;
  float ul=1f;
  p=qrGivensQuat(b.m00,b.m10);
  qt.set(0,0,p.getLeft(),p.getRight());
  u.mul(qt);
  t.setIdentity();
  t.m00=qt.w * qt.w - qt.z * qt.z;
  t.m11=t.m00;
  t.m10=-2 * qt.z * qt.w;
  t.m01=-t.m10;
  t.m22=qt.w * qt.w + qt.z * qt.z;
  ul*=t.m22;
  b.mul(t,b);
  p=qrGivensQuat(b.m00,b.m20);
  qt.set(0,-p.getLeft(),0,p.getRight());
  u.mul(qt);
  t.setIdentity();
  t.m00=qt.w * qt.w - qt.y * qt.y;
  t.m22=t.m00;
  t.m20=2 * qt.y * qt.w;
  t.m02=-t.m20;
  t.m11=qt.w * qt.w + qt.y * qt.y;
  ul*=t.m11;
  b.mul(t,b);
  p=qrGivensQuat(b.m11,b.m21);
  qt.set(p.getLeft(),0,0,p.getRight());
  u.mul(qt);
  t.setIdentity();
  t.m11=qt.w * qt.w - qt.x * qt.x;
  t.m22=t.m11;
  t.m21=-2 * qt.x * qt.w;
  t.m12=-t.m21;
  t.m00=qt.w * qt.w + qt.x * qt.x;
  ul*=t.m00;
  b.mul(t,b);
  ul=1f / ul;
  u.scale((float)Math.sqrt(ul));
  Vector3f s=new Vector3f(b.m00 * ul,b.m11 * ul,b.m22 * ul);
  return Triple.of(u,s,v);
}
