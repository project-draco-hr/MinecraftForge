def main():
    print 'Creating patches'
    mcp = os.path.normpath(sys.argv[1])
    patchd = os.path.normpath(sys.argv[2])
    base = os.path.normpath(os.path.join(mcp, 'src-base'))
    work = os.path.normpath(os.path.join(mcp, 'src-work'))
    for (path, _, filelist) in os.walk(work, followlinks=True):
        for cur_file in fnmatch.filter(filelist, '*.java'):
            file_base = os.path.normpath(os.path.join(base, path[(len(work) + 1):], cur_file)).replace(os.path.sep, '/')
            file_work = os.path.normpath(os.path.join(work, path[(len(work) + 1):], cur_file)).replace(os.path.sep, '/')
            fromlines = open(file_base, 'U').readlines()
            tolines = open(file_work, 'U').readlines()
            patch = ''.join(difflib.unified_diff(fromlines, tolines, ('../' + file_base[(len(mcp) + 1):]), ('../' + file_work[(len(mcp) + 1):]), '', '', n=3))
            patch_dir = os.path.join(patchd, path[(len(work) + 1):])
            patch_file = os.path.join(patch_dir, (cur_file + '.patch'))
            if (len(patch) > 0):
                print patch_file[(len(patchd) + 1):]
                patch = patch.replace('\r\n', '\n')
                if (not os.path.exists(patch_dir)):
                    os.makedirs(patch_dir)
                with open(patch_file, 'wb') as fh:
                    fh.write(patch)
            elif os.path.isfile(patch_file):
                print ('Deleting empty patch: %s' % patch_file)
                os.remove(patch_file)
    cleanDirs(patchd)
