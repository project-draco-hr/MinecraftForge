{
  Property prop=null;
  String comment=null;
  Comment ca=f.getAnnotation(Comment.class);
  if (ca != null)   comment=NEW_LINE.join(ca.value());
  String langKey=modid + "." + category+ "."+ f.getName().toLowerCase(Locale.ENGLISH);
  LangKey la=f.getAnnotation(LangKey.class);
  if (la != null)   langKey=la.value();
  ITypeAdapter adapter=ADAPTERS.get(ftype);
  if (adapter != null) {
    prop=adapter.getProp(cfg,category,f,instance,comment);
    set(instance,f,adapter.getValue(prop));
  }
 else   if (ftype.getSuperclass() == Enum.class) {
    Enum enu=(Enum)get(instance,f);
    prop=cfg.get(category,f.getName(),enu.name(),comment);
    prop.setValidationPattern(makePattern((Class<? extends Enum>)ftype));
    set(instance,f,Enum.valueOf((Class<? extends Enum>)ftype,prop.getString()));
  }
 else   if (ftype == Map.class) {
    String sub=category + "." + f.getName().toLowerCase(Locale.ENGLISH);
    Map<String,Object> m=(Map<String,Object>)get(instance,f);
    ParameterizedType type=(ParameterizedType)f.getGenericType();
    Type mtype=type.getActualTypeArguments()[1];
    cfg.getCategory(sub).setComment(comment);
    for (    Entry<String,Object> e : m.entrySet()) {
      ITypeAdapter.Map adpt=MAP_ADAPTERS.get(mtype);
      if (adpt != null) {
        prop=adpt.getProp(cfg,sub,e.getKey(),e.getValue());
      }
 else       if (mtype instanceof Class && ((Class<?>)mtype).getSuperclass() == Enum.class) {
        prop=TypeAdapters.Str.getProp(cfg,sub,e.getKey(),((Enum)e.getValue()).name());
        prop.setValidationPattern(makePattern((Class<? extends Enum>)mtype));
      }
 else       throw new RuntimeException("Unknown type in map! " + f.getDeclaringClass() + "/"+ f.getName()+ " "+ mtype);
      prop.setLanguageKey(langKey + "." + e.getKey().toLowerCase(Locale.ENGLISH));
    }
    prop=null;
  }
 else   if (ftype.getSuperclass() == Object.class) {
    String sub=category + "." + f.getName().toLowerCase(Locale.ENGLISH);
    Object sinst=get(instance,f);
    for (    Field sf : ftype.getDeclaredFields()) {
      if (!Modifier.isPublic(sf.getModifiers()))       continue;
      createConfig(modid,sub,cfg,sf.getType(),sf,sinst);
    }
  }
 else   throw new RuntimeException("Unknown type in config! " + f.getDeclaringClass() + "/"+ f.getName()+ " "+ ftype);
  if (prop != null) {
    prop.setLanguageKey(langKey);
    RangeInt ia=f.getAnnotation(RangeInt.class);
    if (ia != null) {
      prop.setMinValue(ia.min());
      prop.setMaxValue(ia.max());
      if (comment != null)       prop.setComment(NEW_LINE.join(new String[]{comment,"Min: " + ia.min(),"Max: " + ia.max()}));
 else       prop.setComment(NEW_LINE.join(new String[]{"Min: " + ia.min(),"Max: " + ia.max()}));
    }
    RangeDouble da=f.getAnnotation(RangeDouble.class);
    if (da != null) {
      prop.setMinValue(da.min());
      prop.setMaxValue(da.max());
      if (comment != null)       prop.setComment(NEW_LINE.join(new String[]{comment,"Min: " + da.min(),"Max: " + da.max()}));
 else       prop.setComment(NEW_LINE.join(new String[]{"Min: " + da.min(),"Max: " + da.max()}));
    }
  }
}
