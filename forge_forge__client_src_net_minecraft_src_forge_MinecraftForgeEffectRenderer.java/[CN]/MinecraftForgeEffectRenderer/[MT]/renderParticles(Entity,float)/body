{
  float f1=MathHelper.cos((entity.rotationYaw * 3.141593F) / 180F);
  float f2=MathHelper.sin((entity.rotationYaw * 3.141593F) / 180F);
  float f3=-f2 * MathHelper.sin((entity.rotationPitch * 3.141593F) / 180F);
  float f4=f1 * MathHelper.sin((entity.rotationPitch * 3.141593F) / 180F);
  float f5=MathHelper.cos((entity.rotationPitch * 3.141593F) / 180F);
  EntityFX.interpPosX=entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)f;
  EntityFX.interpPosY=entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)f;
  EntityFX.interpPosZ=entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)f;
  for (int i=0; i < 3; i++) {
    if (fxLayers[i].size() == 0) {
      continue;
    }
    int j=0;
    if (i == 0) {
      j=renderer.getTexture("/particles.png");
    }
    if (i == 1) {
      j=renderer.getTexture("/terrain.png");
    }
    if (i == 2) {
      j=renderer.getTexture("/gui/items.png");
    }
    GL11.glBindTexture(3553,j);
    Tessellator tessellator=Tessellator.instance;
    tessellator.startDrawingQuads();
    for (int k=0; k < fxLayers[i].size(); k++) {
      EntityFX entityfx=(EntityFX)fxLayers[i].get(k);
      if (entityfx instanceof EntityDiggingFX)       continue;
      entityfx.renderParticle(tessellator,f,f1,f5,f2,f3,f4);
    }
    tessellator.draw();
  }
  Tessellator tessellator=Tessellator.instance;
  for (int x=0; x < effectList.size(); x++) {
    BlockTextureParticles entry=(BlockTextureParticles)effectList.get(x);
    GL11.glBindTexture(3553,renderer.getTexture(entry.texture));
    tessellator.startDrawingQuads();
    for (int y=0; y < entry.effects.size(); y++) {
      EntityFX entityfx=(EntityFX)entry.effects.get(y);
      entityfx.renderParticle(tessellator,f,f1,f5,f2,f3,f4);
    }
    tessellator.draw();
  }
}
