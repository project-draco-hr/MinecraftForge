{
  pluginLocations=new HashMap<IFMLLoadingPlugin,File>();
  loadPlugins=new ArrayList<IFMLLoadingPlugin>();
  libraries=new ArrayList<ILibrarySet>();
  for (  String s : rootPlugins) {
    try {
      IFMLLoadingPlugin plugin=(IFMLLoadingPlugin)Class.forName(s,true,actualClassLoader).newInstance();
      loadPlugins.add(plugin);
      for (      String libName : plugin.getLibraryRequestClass()) {
        libraries.add((ILibrarySet)Class.forName(libName,true,actualClassLoader).newInstance());
      }
    }
 catch (    Exception e) {
    }
  }
  if (loadPlugins.isEmpty()) {
    throw new RuntimeException("A fatal error has occured - no valid fml load plugin was found - this is a completely corrupt FML installation.");
  }
  discoverCoreMods(mcDir,actualClassLoader,loadPlugins,libraries);
  List<Throwable> caughtErrors=new ArrayList<Throwable>();
  try {
    File libDir;
    try {
      libDir=setupLibDir(mcDir);
    }
 catch (    Exception e) {
      caughtErrors.add(e);
      return;
    }
    for (    ILibrarySet lib : libraries) {
      for (int i=0; i < lib.getLibraries().length; i++) {
        boolean download=false;
        String libName=lib.getLibraries()[i];
        String checksum=lib.getHashes()[i];
        File libFile=new File(libDir,libName);
        if (!libFile.exists()) {
          try {
            downloadFile(libFile,lib.getRootURL());
            download=true;
          }
 catch (          Throwable e) {
            caughtErrors.add(e);
            continue;
          }
        }
        if (libFile.exists() && !libFile.isFile()) {
          caughtErrors.add(new RuntimeException(String.format("Found a file %s that is not a normal file - you should clear this out of the way",libName)));
          continue;
        }
        String fileChecksum=generateChecksum(libFile);
        if (!checksum.equals(fileChecksum) && !download) {
          caughtErrors.add(new RuntimeException(String.format("The file %s was found in your lib directory and has an invalid checksum %s (expecting %s) - it is unlikely to be the correct download, please move it out of the way and try again.",libName,fileChecksum,checksum)));
          continue;
        }
 else         if (!checksum.equals(fileChecksum)) {
          caughtErrors.add(new RuntimeException(String.format("The downloaded file %s has an invalid checksum %s (expecting %s). The download did not succeed correctly and the file has been deleted. Please try launching again.",libName,fileChecksum,checksum)));
          libFile.delete();
          continue;
        }
        if (!download) {
          System.out.printf("Found library file %s present and correct in lib dir\n",libName);
        }
 else {
          System.out.printf("Library file %s was downloaded and verified successfully\n",libName);
        }
        try {
          actualClassLoader.addURL(libFile.toURI().toURL());
          loadedLibraries.add(libName);
        }
 catch (        MalformedURLException e) {
          caughtErrors.add(new RuntimeException(String.format("Should never happen - %s is broken - probably a somehow corrupted download. Delete it and try again.",libFile.getName()),e));
        }
      }
    }
  }
  finally {
    if (!caughtErrors.isEmpty()) {
      FMLRelaunchLog.severe("There were errors during initial FML setup. " + "Some files failed to download or were otherwise corrupted. " + "You will need to manually obtain the following files from "+ "these download links and ensure your lib directory is clean. ");
      for (      ILibrarySet set : libraries) {
        for (        String file : set.getLibraries()) {
          FMLRelaunchLog.severe("*** Download " + set.getRootURL(),file);
        }
      }
      FMLRelaunchLog.severe("<===========>");
      FMLRelaunchLog.severe("The following is the errors that caused the setup to fail. " + "They may help you diagnose and resolve the issue");
      for (      Throwable t : caughtErrors) {
        FMLRelaunchLog.severe(t.getMessage());
      }
      FMLRelaunchLog.severe("<<< ==== >>>");
      FMLRelaunchLog.severe("The following is diagnostic information for developers to review.");
      for (      Throwable t : caughtErrors) {
        FMLRelaunchLog.log(Level.SEVERE,t,"Error details");
      }
      throw new RuntimeException("A fatal error occured and FML cannot continue");
    }
  }
  for (  IFMLLoadingPlugin plug : loadPlugins) {
    if (plug.getASMTransformerClass() != null) {
      for (      String xformClass : plug.getASMTransformerClass()) {
        actualClassLoader.registerTransformer(xformClass);
      }
    }
  }
  Map<String,Object> data=new HashMap<String,Object>();
  data.put("mcLocation",mcDir);
  data.put("coremodList",loadPlugins);
  for (  IFMLLoadingPlugin plugin : loadPlugins) {
    data.put("coremodLocation",pluginLocations.get(plugin));
    plugin.injectData(data);
    String setupClass=plugin.getSetupClass();
    if (setupClass != null) {
      try {
        IFMLCallHook call=(IFMLCallHook)Class.forName(setupClass,true,actualClassLoader).newInstance();
        Map<String,Object> callData=new HashMap<String,Object>();
        callData.put("classLoader",actualClassLoader);
        call.injectData(callData);
        call.call();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    String modContainer=plugin.getModContainerClass();
    if (modContainer != null) {
      FMLInjectionData.containers.add(modContainer);
    }
  }
  try {
    Class<?> loaderClazz=Class.forName("cpw.mods.fml.common.Loader",true,actualClassLoader);
    Method m=loaderClazz.getMethod("injectData",Object[].class);
    m.invoke(null,(Object)FMLInjectionData.data());
  }
 catch (  Exception e) {
    System.out.println("RelaunchLibraryManager.handleLaunch");
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}
