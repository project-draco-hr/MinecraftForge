{
  if (!(world instanceof WorldServer)) {
    return;
  }
  WorldServer worldServer=(WorldServer)world;
  File chunkDir=worldServer.getChunkSaveLocation();
  File chunkLoaderData=new File(chunkDir,"forcedchunks.dat");
  NBTTagCompound forcedChunkData=new NBTTagCompound();
  NBTTagList ticketList=new NBTTagList();
  forcedChunkData.setTag("TicketList",ticketList);
  Multimap<String,Ticket> ticketSet=tickets.get(worldServer);
  for (  String modId : ticketSet.keySet()) {
    NBTTagCompound ticketHolder=new NBTTagCompound();
    ticketList.appendTag(ticketHolder);
    ticketHolder.setString("Owner",modId);
    NBTTagList tickets=new NBTTagList();
    ticketHolder.setTag("Tickets",tickets);
    for (    Ticket tick : ticketSet.get(modId)) {
      NBTTagCompound ticket=new NBTTagCompound();
      tickets.appendTag(ticket);
      ticket.setByte("Type",(byte)tick.ticketType.ordinal());
      ticket.setByte("ChunkListDepth",(byte)tick.maxDepth);
      ticket.setCompoundTag("ModData",tick.modData);
      if (tick.ticketType == Type.ENTITY) {
        ticket.setInteger("chunkX",MathHelper.floor_double(tick.entity.chunkCoordX));
        ticket.setInteger("chunkZ",MathHelper.floor_double(tick.entity.chunkCoordZ));
        ticket.setLong("persistentIDMSB",tick.entity.getPersistentID().getMostSignificantBits());
        ticket.setLong("persistentIDLSB",tick.entity.getPersistentID().getLeastSignificantBits());
      }
    }
  }
  try {
    CompressedStreamTools.write(forcedChunkData,chunkLoaderData);
  }
 catch (  IOException e) {
    FMLLog.log(Level.WARNING,e,"Unable to write forced chunk data to %s - chunkloading won't work",chunkLoaderData.getAbsolutePath());
    return;
  }
}
