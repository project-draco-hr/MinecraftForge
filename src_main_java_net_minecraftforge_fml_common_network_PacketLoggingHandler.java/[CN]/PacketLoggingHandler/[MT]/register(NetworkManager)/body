{
  ChannelPipeline pipeline=manager.channel().pipeline();
  final EnumPacketDirection direction=manager.getDirection();
  if (manager.isLocalChannel()) {
    pipeline.addBefore("packet_handler","splitter",new SimpleChannelInboundHandler<Packet>(){
      String prefix=(direction == EnumPacketDirection.SERVERBOUND ? "SERVER: C->S" : "CLIENT: S->C");
      @Override protected void channelRead0(      ChannelHandlerContext ctx,      Packet msg) throws Exception {
        PacketBuffer buf=new PacketBuffer(Unpooled.buffer());
        msg.writePacketData(buf);
        FMLLog.log(Level.DEBUG,"%s %s:\n%s",prefix,msg.getClass().getSimpleName(),ByteBufUtils.getContentDump(buf));
        ctx.fireChannelRead(msg);
      }
    }
);
    pipeline.addBefore("splitter","prepender",new ChannelOutboundHandlerAdapter(){
      String prefix=(direction == EnumPacketDirection.SERVERBOUND ? "SERVER: S->C" : "CLIENT: C->S");
      @Override public void write(      ChannelHandlerContext ctx,      Object msg,      ChannelPromise promise) throws Exception {
        if (msg instanceof Packet) {
          PacketBuffer buf=new PacketBuffer(Unpooled.buffer());
          ((Packet)msg).writePacketData(buf);
          FMLLog.log(Level.DEBUG,"%s %s:\n%s",prefix,msg.getClass().getSimpleName(),ByteBufUtils.getContentDump(buf));
        }
        ctx.write(msg,promise);
      }
    }
);
  }
 else {
    pipeline.replace("splitter","splitter",new NettyVarint21FrameDecoder(){
      String prefix=(direction == EnumPacketDirection.SERVERBOUND ? "SERVER: C->S" : "CLIENT: S->C");
      @Override protected void decode(      ChannelHandlerContext context,      ByteBuf input,      List<Object> output) throws Exception {
        super.decode(context,input,output);
        Iterator<Object> itr=output.iterator();
        while (itr.hasNext()) {
          ByteBuf pkt=(ByteBuf)itr.next();
          pkt.markReaderIndex();
          FMLLog.log(Level.DEBUG,"%s:\n%s",prefix,ByteBufUtils.getContentDump(pkt));
          pkt.resetReaderIndex();
        }
      }
    }
);
    pipeline.replace("prepender","prepender",new NettyVarint21FrameEncoder(){
      String prefix=(direction == EnumPacketDirection.SERVERBOUND ? "SERVER: S->C" : "CLIENT: C->S");
      @Override protected void encode(      ChannelHandlerContext context,      ByteBuf input,      ByteBuf output) throws Exception {
        input.markReaderIndex();
        FMLLog.log(Level.DEBUG,"%s:\n%s",prefix,ByteBufUtils.getContentDump(input));
        input.resetReaderIndex();
        super.encode(context,input,output);
      }
    }
);
  }
}
