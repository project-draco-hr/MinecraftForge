{
  List<String> missingMods=Lists.newArrayList();
  Map<String,String> modVersions=Maps.newHashMap();
  Map<String,ModContainer> indexedModList=Maps.newHashMap(Loader.instance().getIndexedModList());
  for (  String m : sentModList) {
    ModContainer mc=indexedModList.get(m);
    if (mc == null) {
      missingMods.add(m);
      continue;
    }
    indexedModList.remove(m);
    modVersions.put(m,mc.getVersion());
  }
  if (indexedModList.size() > 0) {
    for (    Entry<String,ModContainer> e : indexedModList.entrySet()) {
      if (e.getValue().isNetworkMod()) {
        NetworkModHandler missingHandler=FMLNetworkHandler.instance().findNetworkModHandler(e.getValue());
        if (missingHandler.requiresServerSide()) {
          FMLLog.warning("The mod %s was not found on the server you connected to, but requested that the server side be present",e.getKey());
        }
      }
    }
  }
  FMLLog.fine("The server has compatibility level %d",compatibilityLevel);
  FMLCommonHandler.instance().getSidedDelegate().setClientCompatibilityLevel(compatibilityLevel);
  mgr.func_74429_a(PacketDispatcher.getPacket("FML",FMLPacket.makePacket(MOD_LIST_RESPONSE,modVersions,missingMods)));
}
