{
  int size=parts.size();
  boolean hasBase=base != loader.getMissingModel();
  if (hasBase) {
    base=runModelHooks(base,smooth,gui3d,textures,customData);
    if (size <= 0)     return base;
  }
  IModelState baseTr=getState();
  ImmutableMap.Builder<String,Pair<IModel,IModelState>> models=ImmutableMap.builder();
  for (  Entry<String,SubModel> entry : parts.entrySet()) {
    SubModel part=entry.getValue();
    IModel model=null;
    try {
      model=loader.getModel(part.getModelLocation());
    }
 catch (    IOException e) {
      FMLLog.warning("Unable to load block sub-model: \'" + part.getModelLocation() + "\': "+ e.toString());
      model=loader.getMissingModel();
    }
    IModelState partState=new ModelStateComposition(baseTr,part.getState());
    if (part.isUVLock())     partState=new ModelLoader.UVLock(partState);
    models.put(entry.getKey(),Pair.<IModel,IModelState>of(runModelHooks(model,part.smooth,part.gui3d,part.getTextures(),part.getCustomData()),partState));
  }
  return new MultiModel(getModelLocation(),hasBase ? base : null,baseTr,models.build());
}
