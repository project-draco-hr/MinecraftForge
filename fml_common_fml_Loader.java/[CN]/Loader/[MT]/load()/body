{
  File modsDir=new File(".","mods");
  String canonicalModsPath;
  try {
    canonicalModsPath=modsDir.getCanonicalPath();
  }
 catch (  IOException ioe) {
    LOG.severe(String.format("Failed to resolve mods directory mods %s",modsDir.getAbsolutePath()));
    LOG.throwing("fml.server.Loader","initialize",ioe);
    throw new LoaderException(ioe);
  }
  if (!modsDir.exists()) {
    LOG.fine(String.format("No mod directory found, creating one: %s",canonicalModsPath));
    try {
      modsDir.mkdir();
    }
 catch (    Exception e) {
      LOG.throwing("fml.server.Loader","initialize",e);
      throw new LoaderException(e);
    }
  }
  if (!modsDir.isDirectory()) {
    LOG.severe(String.format("Attempting to load mods from %s, which is not a directory",canonicalModsPath));
    LoaderException loaderException=new LoaderException();
    LOG.throwing("fml.server.Loader","initialize",loaderException);
    throw loaderException;
  }
  File[] modList=modsDir.listFiles();
  Arrays.sort(modList);
  state=State.LOADING;
  for (  File modFile : modList) {
    if (modFile.isDirectory()) {
      LOG.info(String.format("Found directory %s. Attempting load",modFile.getName()));
      attemptDirLoad(modFile);
      LOG.info(String.format("Directory %s loaded successfully",modFile.getName()));
    }
 else {
      Matcher matcher=zipJar.matcher(modFile.getName());
      if (matcher.matches()) {
        LOG.info(String.format("Found zip or jar file %s. Attempting load.",matcher.group(0)));
        attemptFileLoad(modFile);
        LOG.info(String.format("File %s loaded successfully.",matcher.group(0)));
      }
    }
  }
  if (state == State.ERRORED) {
    LOG.severe("A problem has occured during mod loading. Giving up now");
    throw new RuntimeException("Giving up please");
  }
}
