{
  IFMLSidedHandler sideHandler=FMLCommonHandler.instance().getSidedDelegate();
  File configDir=Loader.instance().getConfigDir();
  File modConfig=new File(configDir,String.format("%s.cfg",modClazzName));
  Properties props=new Properties();
  boolean existingConfigFound=false;
  boolean mlPropFound=false;
  if (modConfig.exists()) {
    try {
      FMLLog.log.fine("Reading existing configuration file for %s : %s",modClazzName,modConfig.getName());
      FileReader configReader=new FileReader(modConfig);
      props.load(configReader);
      configReader.close();
    }
 catch (    Exception e) {
      FMLLog.log.log(Level.SEVERE,e,"Error occured reading mod configuration file %s",modConfig.getName());
      throw new LoaderException(e);
    }
    existingConfigFound=true;
  }
  StringBuffer comments=new StringBuffer();
  comments.append("MLProperties: name (type:default) min:max -- information\n");
  try {
    for (    Field f : modClazz.getDeclaredFields()) {
      if (!Modifier.isStatic(f.getModifiers())) {
        continue;
      }
      ModProperty property=sideHandler.getModLoaderPropertyFor(f);
      if (property == null) {
        continue;
      }
      String propertyName=property.name().length() > 0 ? property.name() : f.getName();
      String propertyValue=null;
      Object defaultValue=null;
      try {
        defaultValue=f.get(null);
        propertyValue=props.getProperty(propertyName,extractValue(defaultValue));
        Object currentValue=parseValue(propertyValue,property,f.getType(),propertyName,modClazzName);
        FMLLog.log.finest("Configuration for %s.%s found values default: %s, configured: %s, interpreted: %s",modClazzName,propertyName,defaultValue,propertyValue,currentValue);
        if (currentValue != null && !currentValue.equals(defaultValue)) {
          FMLLog.log.finest("Configuration for %s.%s value set to: %s",modClazzName,propertyName,currentValue);
          f.set(null,currentValue);
        }
      }
 catch (      Exception e) {
        FMLLog.log.log(Level.SEVERE,e,"Invalid configuration found for %s in %s",propertyName,modConfig.getName());
        throw new LoaderException(e);
      }
 finally {
        comments.append(String.format("MLProp : %s (%s:%s",propertyName,f.getType().getName(),defaultValue));
        if (property.min() != Double.MIN_VALUE) {
          comments.append(",>=").append(String.format("%.1f",property.min()));
        }
        if (property.max() != Double.MAX_VALUE) {
          comments.append(",<=").append(String.format("%.1f",property.max()));
        }
        comments.append(")");
        if (property.info().length() > 0) {
          comments.append(" -- ").append(property.info());
        }
        if (propertyValue != null) {
          props.setProperty(propertyName,extractValue(propertyValue));
        }
        comments.append("\n");
      }
      mlPropFound=true;
    }
  }
  finally {
    if (!mlPropFound && !existingConfigFound) {
      FMLLog.log.fine("No MLProp configuration for %s found or required. No file written",modClazzName);
      return;
    }
    if (!mlPropFound && existingConfigFound) {
      File mlPropBackup=new File(modConfig.getParent(),modConfig.getName() + ".bak");
      FMLLog.log.fine("MLProp configuration file for %s found but not required. Attempting to rename file to %s",modClazzName,mlPropBackup.getName());
      boolean renamed=modConfig.renameTo(mlPropBackup);
      if (renamed) {
        FMLLog.log.fine("Unused MLProp configuration file for %s renamed successfully to %s",modClazzName,mlPropBackup.getName());
      }
 else {
        FMLLog.log.fine("Unused MLProp configuration file for %s renamed UNSUCCESSFULLY to %s",modClazzName,mlPropBackup.getName());
      }
      return;
    }
    try {
      FileWriter configWriter=new FileWriter(modConfig);
      props.store(configWriter,comments.toString());
      configWriter.close();
      FMLLog.log.fine("Configuration for %s written to %s",modClazzName,modConfig.getName());
    }
 catch (    IOException e) {
      FMLLog.log.log(Level.SEVERE,e,"Error trying to write the config file %s",modConfig.getName());
      throw new LoaderException(e);
    }
  }
}
