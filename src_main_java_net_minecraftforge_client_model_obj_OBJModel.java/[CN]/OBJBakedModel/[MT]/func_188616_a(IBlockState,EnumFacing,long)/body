{
  if (side != null)   return ImmutableList.of();
  if (quads == null) {
    quads=Collections.synchronizedSet(new LinkedHashSet<BakedQuad>());
    Set<Face> faces=Collections.synchronizedSet(new LinkedHashSet<Face>());
    Optional<TRSRTransformation> transform=Optional.absent();
    for (    Group g : this.model.getMatLib().getGroups().values()) {
      if (this.state instanceof OBJState) {
        OBJState state=(OBJState)this.state;
        if (state.parent != null) {
          transform=state.parent.apply(Optional.<IModelPart>absent());
        }
        if (state.getGroupNamesFromMap().contains(Group.ALL)) {
          state.visibilityMap.clear();
          for (          String s : this.model.getMatLib().getGroups().keySet()) {
            state.visibilityMap.put(s,state.operation.performOperation(true));
          }
        }
 else         if (state.getGroupNamesFromMap().contains(Group.ALL_EXCEPT)) {
          List<String> exceptList=state.getGroupNamesFromMap().subList(1,state.getGroupNamesFromMap().size());
          state.visibilityMap.clear();
          for (          String s : this.model.getMatLib().getGroups().keySet()) {
            if (!exceptList.contains(s)) {
              state.visibilityMap.put(s,state.operation.performOperation(true));
            }
          }
        }
 else {
          for (          String s : state.visibilityMap.keySet()) {
            state.visibilityMap.put(s,state.operation.performOperation(state.visibilityMap.get(s)));
          }
        }
        if (state.getGroupsWithVisibility(true).contains(g.getName())) {
          faces.addAll(g.applyTransform(transform));
        }
      }
 else {
        transform=state.apply(Optional.<IModelPart>absent());
        faces.addAll(g.applyTransform(transform));
      }
    }
    for (    Face f : faces) {
      if (this.model.getMatLib().materials.get(f.getMaterialName()).isWhite()) {
        for (        Vertex v : f.getVertices()) {
          if (!v.getMaterial().equals(this.model.getMatLib().getMaterial(v.getMaterial().getName()))) {
            v.setMaterial(this.model.getMatLib().getMaterial(v.getMaterial().getName()));
          }
        }
        sprite=ModelLoader.White.instance;
      }
 else       sprite=this.textures.get(f.getMaterialName());
      UnpackedBakedQuad.Builder builder=new UnpackedBakedQuad.Builder(format);
      builder.setQuadOrientation(EnumFacing.getFacingFromVector(f.getNormal().x,f.getNormal().y,f.getNormal().z));
      builder.setQuadColored();
      Normal faceNormal=f.getNormal();
      putVertexData(builder,f.verts[0],faceNormal,TextureCoordinate.getDefaultUVs()[0],sprite);
      putVertexData(builder,f.verts[1],faceNormal,TextureCoordinate.getDefaultUVs()[1],sprite);
      putVertexData(builder,f.verts[2],faceNormal,TextureCoordinate.getDefaultUVs()[2],sprite);
      putVertexData(builder,f.verts[3],faceNormal,TextureCoordinate.getDefaultUVs()[3],sprite);
      quads.add(builder.build());
    }
  }
  List<BakedQuad> quadList=Collections.synchronizedList(Lists.newArrayList(quads));
  return quadList;
}
