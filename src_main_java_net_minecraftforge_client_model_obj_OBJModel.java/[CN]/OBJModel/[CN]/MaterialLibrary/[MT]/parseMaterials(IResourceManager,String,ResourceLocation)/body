{
  this.materials.clear();
  boolean hasSetTexture=false;
  boolean hasSetColor=false;
  String domain=from.getResourceDomain();
  if (!path.contains("/"))   path=from.getResourcePath().substring(0,from.getResourcePath().lastIndexOf("/") + 1) + path;
  mtlStream=new InputStreamReader(manager.getResource(new ResourceLocation(domain,path)).getInputStream(),Charsets.UTF_8);
  mtlReader=new BufferedReader(mtlStream);
  String currentLine="";
  Material material=new Material();
  material.setName(Material.WHITE_NAME);
  material.setTexture(Texture.WHITE);
  this.materials.put(Material.WHITE_NAME,material);
  this.materials.put(Material.DEFAULT_NAME,new Material(Texture.WHITE));
  for (; ; ) {
    currentLine=mtlReader.readLine();
    if (currentLine == null)     break;
    if (currentLine.isEmpty() || currentLine.startsWith("#"))     continue;
    String[] fields=WHITE_SPACE.split(currentLine,2);
    String key=fields[0];
    String data=fields[1];
    if (key.equalsIgnoreCase("newmtl")) {
      hasSetColor=false;
      hasSetTexture=false;
      material=new Material();
      material.setName(data);
      this.materials.put(data,material);
    }
 else     if (key.equalsIgnoreCase("Ka") || key.equalsIgnoreCase("Kd") || key.equalsIgnoreCase("Ks")) {
      if (key.equalsIgnoreCase("Kd") || !hasSetColor) {
        String[] rgbStrings=WHITE_SPACE.split(data,3);
        Vector4f color=new Vector4f(Float.parseFloat(rgbStrings[0]),Float.parseFloat(rgbStrings[1]),Float.parseFloat(rgbStrings[2]),1.0f);
        hasSetColor=true;
        material.setColor(color);
      }
 else {
        FMLLog.info("OBJModel: A color has already been defined for material '%s' in '%s'. The color defined by key '%s' will not be applied!",material.getName(),new ResourceLocation(domain,path).toString(),key);
      }
    }
 else     if (key.equalsIgnoreCase("map_Ka") || key.equalsIgnoreCase("map_Kd") || key.equalsIgnoreCase("map_Ks")) {
      if (key.equalsIgnoreCase("map_Kd") || !hasSetTexture) {
        if (data.contains(" ")) {
          String[] mapStrings=WHITE_SPACE.split(data);
          String texturePath=mapStrings[mapStrings.length - 1];
          Texture texture=new Texture(texturePath);
          hasSetTexture=true;
          material.setTexture(texture);
        }
 else {
          Texture texture=new Texture(data);
          hasSetTexture=true;
          material.setTexture(texture);
        }
      }
 else {
        FMLLog.info("OBJModel: A texture has already been defined for material '%s' in '%s'. The texture defined by key '%s' will not be applied!",material.getName(),new ResourceLocation(domain,path).toString(),key);
      }
    }
 else     if (key.equalsIgnoreCase("d") || key.equalsIgnoreCase("Tr")) {
      String[] splitData=WHITE_SPACE.split(data);
      float alpha=Float.parseFloat(splitData[splitData.length - 1]);
      material.getColor().setW(alpha);
    }
 else {
      if (!unknownMaterialCommands.contains(key)) {
        unknownMaterialCommands.add(key);
        FMLLog.info("OBJLoader.MaterialLibrary: key '%s' (model: '%s') is not currently supported, skipping",key,new ResourceLocation(domain,path));
      }
    }
  }
}
