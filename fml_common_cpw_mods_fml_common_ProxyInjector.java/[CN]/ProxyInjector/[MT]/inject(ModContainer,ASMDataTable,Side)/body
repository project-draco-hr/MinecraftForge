{
  FMLLog.fine("Attempting to inject @SidedProxy classes into %s",mod.getModId());
  Set<ASMData> targets=data.getAnnotationsFor(mod).get(Type.getDescriptor(SidedProxy.class));
  ClassLoader mcl=Loader.instance().getModClassLoader();
  for (  ASMData targ : targets) {
    try {
      Class<?> proxyTarget=Class.forName(targ.getClassName(),true,mcl);
      Field target=proxyTarget.getDeclaredField(targ.getObjectName());
      if (target == null) {
        FMLLog.severe("Attempted to load a proxy type into %s.%s but the field was not found",targ.getClassName(),targ.getObjectName());
        throw new LoaderException();
      }
      String targetType=side.isClient() ? target.getAnnotation(SidedProxy.class).clientSide() : target.getAnnotation(SidedProxy.class).serverSide();
      Object proxy=Class.forName(targetType,true,mcl).newInstance();
      if ((target.getModifiers() & Modifier.STATIC) != 0) {
        FMLLog.severe("Attempted to load a proxy type %s into %s.%s, but the field is not static",targetType,targ.getClassName(),targ.getObjectName());
        throw new LoaderException();
      }
      if (!target.getType().isAssignableFrom(proxy.getClass())) {
        FMLLog.severe("Attempted to load a proxy type %s into %s.%s, but the types don't match",targetType,targ.getClassName(),targ.getObjectName());
        throw new LoaderException();
      }
      target.set(null,proxy);
    }
 catch (    Exception e) {
      FMLLog.log(Level.SEVERE,e,"An error occured trying to load a proxy into %s.%s",targ.getAnnotationInfo(),targ.getClassName(),targ.getObjectName());
      throw new LoaderException(e);
    }
  }
}
