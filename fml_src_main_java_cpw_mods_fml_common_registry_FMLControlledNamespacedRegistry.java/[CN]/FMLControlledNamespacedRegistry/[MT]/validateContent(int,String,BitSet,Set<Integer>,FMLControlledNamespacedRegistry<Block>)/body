{
  for (  I obj : typeSafeIterable()) {
    int id=getId(obj);
    String name=getNameForObject(obj);
    if (id < 0)     throw new IllegalStateException(String.format("Registry entry for %s %s, name %s, doesn't yield an id.",type,obj,name));
    if (id > maxId)     throw new IllegalStateException(String.format("Registry entry for %s %s, name %s uses the too large id %d.",type,obj,name));
    if (name == null)     throw new IllegalStateException(String.format("Registry entry for %s %s, id %d, doesn't yield a name.",type,obj,id));
    if (name.isEmpty())     throw new IllegalStateException(String.format("Registry entry for %s %s, id %d, yields an empty name.",type,obj,id));
    if (name.indexOf(':') == -1)     throw new IllegalStateException(String.format("Registry entry for %s %s, id %d, has the non-prefixed name %s.",type,obj,id,name));
    if (getRaw(id) != obj)     throw new IllegalStateException(String.format("Registry entry for id %d, name %s, doesn't yield the expected %s %s.",id,name,type,obj));
    if (getRaw(name) != obj)     throw new IllegalStateException(String.format("Registry entry for name %s, id %d, doesn't yield the expected %s %s.",name,id,type,obj));
    if (getId(name) != id)     throw new IllegalStateException(String.format("Registry entry for name %s doesn't yield the expected id %d.",name,id));
    if (!availabilityMap.get(id))     throw new IllegalStateException(String.format("Registry entry for %s %s, id %d, name %s, marked as empty.",type,obj,id,name));
    if (blockedIds.contains(id))     throw new IllegalStateException(String.format("Registry entry for %s %s, id %d, name %s, marked as dangling.",type,obj,id,name));
    if (obj instanceof ItemBlock) {
      Block block=((ItemBlock)obj).field_150939_a;
      if (iBlockRegistry.getId(block) != id) {
        throw new IllegalStateException(String.format("Registry entry for ItemBlock %s, id %d, is missing or uses the non-matching id %d.",obj,id,iBlockRegistry.getId(block)));
      }
      if (id > GameData.MAX_BLOCK_ID)       throw new IllegalStateException(String.format("ItemBlock %s uses the id %d outside the block id range",name,id));
    }
  }
}
