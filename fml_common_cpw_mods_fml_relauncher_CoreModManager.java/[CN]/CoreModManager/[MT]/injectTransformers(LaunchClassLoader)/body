{
  for (  FMLPluginWrapper wrap : loadPlugins) {
    IFMLLoadingPlugin plug=wrap.coreModInstance;
    if (plug.getASMTransformerClass() != null) {
      for (      String xformClass : plug.getASMTransformerClass()) {
        FMLRelaunchLog.finest("Registering transformer %s",xformClass);
        classLoader.registerTransformer(xformClass);
      }
    }
  }
  FMLRelaunchLog.fine("Running coremod plugins");
  Map<String,Object> data=new HashMap<String,Object>();
  data.put("mcLocation",mcDir);
  data.put("coremodList",loadPlugins);
  data.put("runtimeDeobfuscationEnabled",!deobfuscatedEnvironment);
  for (  FMLPluginWrapper pluginWrapper : loadPlugins) {
    IFMLLoadingPlugin plugin=pluginWrapper.coreModInstance;
    FMLRelaunchLog.fine("Running coremod plugin %s",pluginWrapper.name);
    data.put("coremodLocation",pluginWrapper.location);
    plugin.injectData(data);
    String setupClass=plugin.getSetupClass();
    if (setupClass != null) {
      try {
        IFMLCallHook call=(IFMLCallHook)Class.forName(setupClass,true,classLoader).newInstance();
        Map<String,Object> callData=new HashMap<String,Object>();
        callData.put("mcLocation",mcDir);
        callData.put("classLoader",classLoader);
        callData.put("coremodLocation",pluginWrapper.location);
        callData.put("deobfuscationFileName",FMLInjectionData.debfuscationDataName());
        call.injectData(callData);
        call.call();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    FMLRelaunchLog.fine("Coremod plugin %s run successfully",plugin.getClass().getSimpleName());
    String modContainer=plugin.getModContainerClass();
    if (modContainer != null) {
      FMLInjectionData.containers.add(modContainer);
    }
  }
  Launch.blackboard.put("fml.deobfuscatedEnvironment",deobfuscatedEnvironment);
  tweaker.injectCascadingTweak("cpw.mods.fml.common.launcher.FMLDeobfTweaker",Integer.valueOf(1000));
}
