{
  FMLRelaunchLog.fine("Discovering coremods");
  File coreMods=setupCoreModDir(mcDir);
  FilenameFilter ff=new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(".jar");
    }
  }
;
  File[] coreModList=coreMods.listFiles(ff);
  Arrays.sort(coreModList);
  for (  File coreMod : coreModList) {
    FMLRelaunchLog.fine("Found a candidate coremod %s",coreMod.getName());
    JarFile jar;
    Attributes mfAttributes;
    try {
      jar=new JarFile(coreMod);
      if (jar.getManifest() == null) {
        FMLRelaunchLog.warning("Found an un-manifested jar file in the coremods folder : %s, it will be ignored.",coreMod.getName());
        continue;
      }
      mfAttributes=jar.getManifest().getMainAttributes();
    }
 catch (    IOException ioe) {
      FMLRelaunchLog.log(Level.SEVERE,ioe,"Unable to read the coremod jar file %s - ignoring",coreMod.getName());
      continue;
    }
    String fmlCorePlugin=mfAttributes.getValue("FMLCorePlugin");
    if (fmlCorePlugin == null) {
      FMLRelaunchLog.severe("The coremod %s does not contain a valid jar manifest- it will be ignored",coreMod.getName());
      continue;
    }
    try {
      classLoader.addURL(coreMod.toURI().toURL());
    }
 catch (    MalformedURLException e) {
      FMLRelaunchLog.log(Level.SEVERE,e,"Unable to convert file into a URL. weird");
      continue;
    }
    try {
      FMLRelaunchLog.fine("Loading coremod %s",coreMod.getName());
      classLoader.addTransformerExclusion(fmlCorePlugin);
      Class<?> coreModClass=Class.forName(fmlCorePlugin,true,classLoader);
      MCVersion requiredMCVersion=coreModClass.getAnnotation(IFMLLoadingPlugin.MCVersion.class);
      String version="";
      if (requiredMCVersion == null) {
        FMLRelaunchLog.log(Level.WARNING,"The coremod %s does not have a MCVersion annotation, it may cause issues with this version of Minecraft",fmlCorePlugin);
      }
 else {
        version=requiredMCVersion.value();
      }
      if (!"".equals(version) && !FMLInjectionData.mccversion.equals(version)) {
        FMLRelaunchLog.log(Level.SEVERE,"The coremod %s is requesting minecraft version %s and minecraft is %s. It will be ignored.",fmlCorePlugin,version,FMLInjectionData.mccversion);
        continue;
      }
 else       if (!"".equals(version)) {
        FMLRelaunchLog.log(Level.FINE,"The coremod %s requested minecraft version %s and minecraft is %s. It will be loaded.",fmlCorePlugin,version,FMLInjectionData.mccversion);
      }
      TransformerExclusions trExclusions=coreModClass.getAnnotation(IFMLLoadingPlugin.TransformerExclusions.class);
      if (trExclusions != null) {
        for (        String st : trExclusions.value()) {
          classLoader.addTransformerExclusion(st);
        }
      }
      IFMLLoadingPlugin plugin=(IFMLLoadingPlugin)coreModClass.newInstance();
      loadPlugins.add(plugin);
      pluginLocations.put(plugin,coreMod);
      if (plugin.getLibraryRequestClass() != null) {
        for (        String libName : plugin.getLibraryRequestClass()) {
          libraries.add((ILibrarySet)Class.forName(libName,true,classLoader).newInstance());
        }
      }
      FMLRelaunchLog.fine("Loaded coremod %s",coreMod.getName());
    }
 catch (    ClassNotFoundException cnfe) {
      FMLRelaunchLog.log(Level.SEVERE,cnfe,"Coremod %s: Unable to class load the plugin %s",coreMod.getName(),fmlCorePlugin);
    }
catch (    ClassCastException cce) {
      FMLRelaunchLog.log(Level.SEVERE,cce,"Coremod %s: The plugin %s is not an implementor of IFMLLoadingPlugin",coreMod.getName(),fmlCorePlugin);
    }
catch (    InstantiationException ie) {
      FMLRelaunchLog.log(Level.SEVERE,ie,"Coremod %s: The plugin class %s was not instantiable",coreMod.getName(),fmlCorePlugin);
    }
catch (    IllegalAccessException iae) {
      FMLRelaunchLog.log(Level.SEVERE,iae,"Coremod %s: The plugin class %s was not accessible",coreMod.getName(),fmlCorePlugin);
    }
  }
}
