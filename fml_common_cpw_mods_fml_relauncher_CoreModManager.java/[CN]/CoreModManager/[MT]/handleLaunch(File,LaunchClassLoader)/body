{
  try {
    byte[] bs=classLoader.getClassBytes("net.minecraft.world.World");
    if (bs != null) {
      FMLRelaunchLog.info("Managed to load a deobfuscated Minecraft name- we are in a deobfuscated environment. Skipping runtime deobfuscation");
      deobfuscatedEnvironment=true;
    }
  }
 catch (  IOException e1) {
  }
  if (!deobfuscatedEnvironment) {
    FMLRelaunchLog.fine("Enabling runtime deobfuscation");
  }
  pluginLocations=new HashMap<IFMLLoadingPlugin,File>();
  loadPlugins=new ArrayList<IFMLLoadingPlugin>();
  for (  String s : rootPlugins) {
    try {
      FMLRelaunchLog.finest("Adding coremod for loading %s",s);
      IFMLLoadingPlugin plugin=(IFMLLoadingPlugin)Class.forName(s,true,classLoader).newInstance();
      loadPlugins.add(plugin);
    }
 catch (    Exception e) {
    }
  }
  if (loadPlugins.isEmpty()) {
    throw new RuntimeException("A fatal error has occured - no valid fml load plugin was found - this is a completely corrupt FML installation.");
  }
  FMLRelaunchLog.fine("All core mods are successfully located");
  String commandLineCoremods=System.getProperty("fml.coreMods.load","");
  for (  String s : commandLineCoremods.split(",")) {
    if (s.isEmpty()) {
      continue;
    }
    FMLRelaunchLog.info("Found a command line coremod : %s",s);
    try {
      classLoader.addTransformerExclusion(s);
      Class<?> coreModClass=Class.forName(s,true,classLoader);
      TransformerExclusions trExclusions=coreModClass.getAnnotation(IFMLLoadingPlugin.TransformerExclusions.class);
      if (trExclusions != null) {
        for (        String st : trExclusions.value()) {
          classLoader.addTransformerExclusion(st);
        }
      }
      IFMLLoadingPlugin plugin=(IFMLLoadingPlugin)coreModClass.newInstance();
      loadPlugins.add(plugin);
      if (plugin.getLibraryRequestClass() != null) {
        for (        String libName : plugin.getLibraryRequestClass()) {
          libraries.add((ILibrarySet)Class.forName(libName,true,classLoader).newInstance());
        }
      }
    }
 catch (    Throwable e) {
      FMLRelaunchLog.log(Level.SEVERE,e,"Exception occured trying to load coremod %s",s);
      throw new RuntimeException(e);
    }
  }
  discoverCoreMods(mcDir,classLoader,loadPlugins,libraries);
  for (  IFMLLoadingPlugin plug : loadPlugins) {
    if (plug.getASMTransformerClass() != null) {
      for (      String xformClass : plug.getASMTransformerClass()) {
        FMLRelaunchLog.finest("Registering transformer %s",xformClass);
        classLoader.registerTransformer(xformClass);
      }
    }
  }
  if (!deobfuscatedEnvironment) {
    classLoader.registerTransformer("cpw.mods.fml.common.asm.transformers.DeobfuscationTransformer");
  }
  FMLRelaunchLog.fine("Running coremod plugins");
  Map<String,Object> data=new HashMap<String,Object>();
  data.put("mcLocation",mcDir);
  data.put("coremodList",loadPlugins);
  data.put("runtimeDeobfuscationEnabled",!deobfuscatedEnvironment);
  for (  IFMLLoadingPlugin plugin : loadPlugins) {
    FMLRelaunchLog.fine("Running coremod plugin %s",plugin.getClass().getSimpleName());
    data.put("coremodLocation",pluginLocations.get(plugin));
    plugin.injectData(data);
    String setupClass=plugin.getSetupClass();
    if (setupClass != null) {
      try {
        IFMLCallHook call=(IFMLCallHook)Class.forName(setupClass,true,classLoader).newInstance();
        Map<String,Object> callData=new HashMap<String,Object>();
        callData.put("mcLocation",mcDir);
        callData.put("classLoader",classLoader);
        callData.put("coremodLocation",pluginLocations.get(plugin));
        callData.put("deobfuscationFileName",FMLInjectionData.debfuscationDataName());
        call.injectData(callData);
        call.call();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    FMLRelaunchLog.fine("Coremod plugin %s run successfully",plugin.getClass().getSimpleName());
    String modContainer=plugin.getModContainerClass();
    if (modContainer != null) {
      FMLInjectionData.containers.add(modContainer);
    }
  }
  try {
    FMLRelaunchLog.fine("Validating minecraft");
    Class<?> loaderClazz=Class.forName("cpw.mods.fml.common.Loader",true,classLoader);
    Method m=loaderClazz.getMethod("injectData",Object[].class);
    m.invoke(null,(Object)FMLInjectionData.data());
    m=loaderClazz.getMethod("instance");
    m.invoke(null);
    FMLRelaunchLog.fine("Minecraft validated, launching...");
  }
 catch (  Exception e) {
    System.out.println("A CRITICAL PROBLEM OCCURED INITIALIZING MINECRAFT - LIKELY YOU HAVE AN INCORRECT VERSION FOR THIS FML");
    throw new RuntimeException(e);
  }
}
