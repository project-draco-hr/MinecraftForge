{
  super(mc,parent.width,parent.height,parent.titleLine2 != null ? 33 : 23,parent.height - 32,20);
  this.owningScreen=parent;
  this.setShowSelectionBox(false);
  this.mc=mc;
  this.listEntries=new ArrayList<IConfigEntry>();
  for (  IConfigElement configElement : parent.configElements) {
    if (configElement != null) {
      if (configElement.isProperty() && configElement.showInGui()) {
        int length;
        if (!I18n.format(configElement.getLanguageKey()).equals(configElement.getLanguageKey()))         length=mc.fontRenderer.getStringWidth(I18n.format(configElement.getLanguageKey()));
 else         length=mc.fontRenderer.getStringWidth(configElement.getName());
        if (length > this.maxLabelTextWidth)         this.maxLabelTextWidth=length;
      }
    }
  }
  int viewWidth=this.maxLabelTextWidth + 8 + (width / 2);
  labelX=(this.width / 2) - (viewWidth / 2);
  controlX=labelX + maxLabelTextWidth + 8;
  resetX=(this.width / 2) + (viewWidth / 2) - 45;
  controlWidth=resetX - controlX - 5;
  scrollBarX=this.width;
  for (  IConfigElement configElement : parent.configElements) {
    if (configElement != null && configElement.showInGui()) {
      if (configElement.getConfigEntryClass() != null)       try {
        this.listEntries.add((IConfigEntry)configElement.getConfigEntryClass().getConstructor(GuiConfig.class,GuiConfigEntries.class,IConfigElement.class).newInstance(this.owningScreen,this,configElement));
      }
 catch (      Throwable e) {
        FMLLog.severe("There was a critical error instantiating the custom IConfigEntry for config element %s.",configElement.getName());
        e.printStackTrace();
      }
 else       if (configElement.isProperty()) {
        if (configElement.isList())         this.listEntries.add(new GuiConfigEntries.ArrayEntry(this.owningScreen,this,configElement));
 else         if (configElement.getType() == ConfigGuiType.BOOLEAN)         this.listEntries.add(new GuiConfigEntries.BooleanEntry(this.owningScreen,this,(IConfigElement<Boolean>)configElement));
 else         if (configElement.getType() == ConfigGuiType.INTEGER)         this.listEntries.add(new GuiConfigEntries.IntegerEntry(this.owningScreen,this,(IConfigElement<Integer>)configElement));
 else         if (configElement.getType() == ConfigGuiType.DOUBLE)         this.listEntries.add(new GuiConfigEntries.DoubleEntry(this.owningScreen,this,(IConfigElement<Double>)configElement));
 else         if (configElement.getType() == ConfigGuiType.COLOR) {
          if (configElement.getValidValues() != null && configElement.getValidValues().length > 0)           this.listEntries.add(new GuiConfigEntries.ChatColorEntry(this.owningScreen,this,(IConfigElement<String>)configElement));
 else           this.listEntries.add(new GuiConfigEntries.StringEntry(this.owningScreen,this,(IConfigElement<String>)configElement));
        }
 else         if (configElement.getType() == ConfigGuiType.MOD_ID) {
          Map<Object,String> values=new TreeMap<Object,String>();
          for (          ModContainer mod : Loader.instance().getActiveModList())           values.put(mod.getModId(),mod.getName());
          values.put("minecraft","Minecraft");
          this.listEntries.add(new SelectValueEntry(this.owningScreen,this,(IConfigElement<String>)configElement,values));
        }
 else         if (configElement.getType() == ConfigGuiType.STRING) {
          if (configElement.getValidValues() != null && configElement.getValidValues().length > 0)           this.listEntries.add(new GuiConfigEntries.CycleValueEntry(this.owningScreen,this,(IConfigElement<String>)configElement));
 else           this.listEntries.add(new GuiConfigEntries.StringEntry(this.owningScreen,this,(IConfigElement<String>)configElement));
        }
      }
 else       if (configElement.getType() == ConfigGuiType.CONFIG_CATEGORY)       this.listEntries.add(new CategoryEntry(this.owningScreen,this,configElement));
    }
  }
}
