{
  if (listeners.containsKey(target)) {
    return;
  }
  ModContainer activeModContainer=Loader.instance().activeModContainer();
  if (activeModContainer == null) {
    FMLLog.log(Level.ERROR,new Throwable(),"Unable to determine registrant mod for %s. This is a critical error and should be impossible",target);
    activeModContainer=Loader.instance().getMinecraftModContainer();
  }
  listenerOwners.put(target,activeModContainer);
  boolean isStatic=target.getClass() == Class.class;
  @SuppressWarnings("unchecked") Set<? extends Class<?>> supers=isStatic ? Sets.newHashSet((Class<?>)target) : TypeToken.of(target.getClass()).getTypes().rawTypes();
  for (  Method method : (isStatic ? (Class<?>)target : target.getClass()).getMethods()) {
    if (isStatic && !Modifier.isStatic(method.getModifiers()))     continue;
 else     if (!isStatic && Modifier.isStatic(method.getModifiers()))     continue;
    for (    Class<?> cls : supers) {
      try {
        Method real=cls.getDeclaredMethod(method.getName(),method.getParameterTypes());
        if (real.isAnnotationPresent(SubscribeEvent.class)) {
          Class<?>[] parameterTypes=method.getParameterTypes();
          if (parameterTypes.length != 1) {
            throw new IllegalArgumentException("Method " + method + " has @SubscribeEvent annotation, but requires "+ parameterTypes.length+ " arguments.  Event handler methods must require a single argument.");
          }
          Class<?> eventType=parameterTypes[0];
          if (!Event.class.isAssignableFrom(eventType)) {
            throw new IllegalArgumentException("Method " + method + " has @SubscribeEvent annotation, but takes a argument that is not an Event "+ eventType);
          }
          register(eventType,target,real,activeModContainer);
          break;
        }
      }
 catch (      NoSuchMethodException e) {
        ;
      }
    }
  }
}
