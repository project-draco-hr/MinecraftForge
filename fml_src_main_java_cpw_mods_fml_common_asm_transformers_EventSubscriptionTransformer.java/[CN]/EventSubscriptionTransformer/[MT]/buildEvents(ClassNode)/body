{
  Class<?> parent=this.getClass().getClassLoader().loadClass(classNode.superName.replace('/','.'));
  if (!Event.class.isAssignableFrom(parent)) {
    return false;
  }
  Type tList=Type.getType("Lcpw/mods/fml/common/eventhandler/ListenerList;");
  boolean edited=false;
  boolean hasSetup=false;
  boolean hasGetListenerList=false;
  boolean hasDefaultCtr=false;
  boolean hasCancelable=false;
  boolean hasResult=false;
  String voidDesc=Type.getMethodDescriptor(VOID_TYPE);
  String boolDesc=Type.getMethodDescriptor(BOOLEAN_TYPE);
  String listDesc=tList.getDescriptor();
  String listDescM=Type.getMethodDescriptor(tList);
  for (  MethodNode method : (List<MethodNode>)classNode.methods) {
    if (method.name.equals("setup") && method.desc.equals(voidDesc) && (method.access & ACC_PROTECTED) == ACC_PROTECTED)     hasSetup=true;
    if ((method.access & ACC_PUBLIC) == ACC_PUBLIC) {
      if (method.name.equals("getListenerList") && method.desc.equals(listDescM))       hasGetListenerList=true;
      if (method.name.equals("isCancelable") && method.desc.equals(boolDesc))       hasCancelable=true;
      if (method.name.equals("hasResult") && method.desc.equals(boolDesc))       hasResult=true;
    }
    if (method.name.equals("<init>") && method.desc.equals(voidDesc))     hasDefaultCtr=true;
  }
  if (classNode.visibleAnnotations != null) {
    for (    AnnotationNode node : classNode.visibleAnnotations) {
      if (!hasResult && node.desc.equals("Lcpw/mods/fml/common/eventhandler/Event$HasResult;")) {
        MethodNode method=new MethodNode(ACC_PUBLIC,"hasResult",boolDesc,null,null);
        method.instructions.add(new InsnNode(ICONST_1));
        method.instructions.add(new InsnNode(IRETURN));
        classNode.methods.add(method);
        edited=true;
      }
 else       if (!hasCancelable && node.desc.equals("Lcpw/mods/fml/common/eventhandler/Cancelable;")) {
        MethodNode method=new MethodNode(ACC_PUBLIC,"isCancelable",boolDesc,null,null);
        method.instructions.add(new InsnNode(ICONST_1));
        method.instructions.add(new InsnNode(IRETURN));
        classNode.methods.add(method);
        edited=true;
      }
    }
  }
  if (hasSetup) {
    if (!hasGetListenerList)     throw new RuntimeException("Event class defines setup() but does not define getListenerList! " + classNode.name);
 else     return edited;
  }
  Type tSuper=Type.getType(classNode.superName);
  classNode.fields.add(new FieldNode(ACC_PRIVATE | ACC_STATIC,"LISTENER_LIST",listDesc,null,null));
  if (!hasDefaultCtr) {
    MethodNode method=new MethodNode(ACC_PUBLIC,"<init>",voidDesc,null,null);
    method.instructions.add(new VarInsnNode(ALOAD,0));
    method.instructions.add(new MethodInsnNode(INVOKESPECIAL,tSuper.getInternalName(),"<init>",voidDesc,false));
    method.instructions.add(new InsnNode(RETURN));
    classNode.methods.add(method);
  }
  MethodNode method=new MethodNode(ACC_PROTECTED,"setup",voidDesc,null,null);
  method.instructions.add(new VarInsnNode(ALOAD,0));
  method.instructions.add(new MethodInsnNode(INVOKESPECIAL,tSuper.getInternalName(),"setup",voidDesc,false));
  method.instructions.add(new FieldInsnNode(GETSTATIC,classNode.name,"LISTENER_LIST",listDesc));
  LabelNode initLisitener=new LabelNode();
  method.instructions.add(new JumpInsnNode(IFNULL,initLisitener));
  method.instructions.add(new InsnNode(RETURN));
  method.instructions.add(initLisitener);
  method.instructions.add(new FrameNode(F_SAME,0,null,0,null));
  method.instructions.add(new TypeInsnNode(NEW,tList.getInternalName()));
  method.instructions.add(new InsnNode(DUP));
  method.instructions.add(new VarInsnNode(ALOAD,0));
  method.instructions.add(new MethodInsnNode(INVOKESPECIAL,tSuper.getInternalName(),"getListenerList",listDescM,false));
  method.instructions.add(new MethodInsnNode(INVOKESPECIAL,tList.getInternalName(),"<init>",getMethodDescriptor(VOID_TYPE,tList),false));
  method.instructions.add(new FieldInsnNode(PUTSTATIC,classNode.name,"LISTENER_LIST",listDesc));
  method.instructions.add(new InsnNode(RETURN));
  classNode.methods.add(method);
  method=new MethodNode(ACC_PUBLIC,"getListenerList",listDescM,null,null);
  method.instructions.add(new FieldInsnNode(GETSTATIC,classNode.name,"LISTENER_LIST",listDesc));
  method.instructions.add(new InsnNode(ARETURN));
  classNode.methods.add(method);
  return true;
}
