{
  Matrix3f t=new Matrix3f();
  Quat4f qt=new Quat4f(), ret=new Quat4f(0,0,0,1);
  Pair<Float,Float> p;
  if (m.m01 * m.m01 + m.m10 * m.m10 > eps) {
    p=approxGivensQuat(m.m00,.5f * (m.m01 + m.m10),m.m11);
    qt.set(0,0,p.getLeft(),p.getRight());
    ret.mul(qt);
    t.setIdentity();
    t.m00=qt.w * qt.w - qt.z * qt.z;
    t.m11=t.m00;
    t.m10=2 * qt.z * qt.w;
    t.m01=-t.m10;
    t.m22=qt.w * qt.w + qt.z * qt.z;
    m.mul(m,t);
    t.transpose();
    m.mul(t,m);
  }
  if (m.m02 * m.m02 + m.m20 * m.m20 > eps) {
    p=approxGivensQuat(m.m00,.5f * (m.m02 + m.m20),m.m22);
    qt.set(0,-p.getLeft(),0,p.getRight());
    ret.mul(qt);
    t.setIdentity();
    t.m00=qt.w * qt.w - qt.y * qt.y;
    t.m22=t.m00;
    t.m20=-2 * qt.y * qt.w;
    t.m02=-t.m20;
    t.m11=qt.w * qt.w + qt.y * qt.y;
    m.mul(m,t);
    t.transpose();
    m.mul(t,m);
  }
  if (m.m12 * m.m12 + m.m21 * m.m21 > eps) {
    p=approxGivensQuat(m.m11,.5f * (m.m12 + m.m21),m.m22);
    qt.set(p.getLeft(),0,0,p.getRight());
    ret.mul(qt);
    t.setIdentity();
    t.m11=qt.w * qt.w - qt.x * qt.x;
    t.m22=t.m11;
    t.m21=2 * qt.x * qt.w;
    t.m12=-t.m21;
    t.m00=qt.w * qt.w + qt.x * qt.x;
    m.mul(m,t);
    t.transpose();
    m.mul(t,m);
  }
  return ret;
}
