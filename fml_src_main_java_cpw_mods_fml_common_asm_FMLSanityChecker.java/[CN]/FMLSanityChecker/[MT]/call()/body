{
  CodeSource codeSource=getClass().getProtectionDomain().getCodeSource();
  boolean goodFML=false;
  boolean fmlIsJar=false;
  if (codeSource.getLocation().getProtocol().equals("jar")) {
    fmlIsJar=true;
    Certificate[] certificates=codeSource.getCertificates();
    if (certificates != null) {
      for (      Certificate cert : certificates) {
        String fingerprint=CertificateHelper.getFingerprint(cert);
        if (fingerprint.equals(FMLFINGERPRINT)) {
          FMLRelaunchLog.info("Found valid fingerprint for FML. Certificate fingerprint %s",fingerprint);
          goodFML=true;
        }
 else         if (fingerprint.equals(FORGEFINGERPRINT)) {
          FMLRelaunchLog.info("Found valid fingerprint for Minecraft Forge. Certificate fingerprint %s",fingerprint);
          goodFML=true;
        }
 else {
          FMLRelaunchLog.severe("Found invalid fingerprint for FML: %s",fingerprint);
        }
      }
    }
  }
 else {
    goodFML=true;
  }
  boolean goodMC=FMLLaunchHandler.side() == Side.SERVER;
  int certCount=0;
  try {
    Class<?> cbr=Class.forName("net.minecraft.client.ClientBrandRetriever",false,cl);
    codeSource=cbr.getProtectionDomain().getCodeSource();
  }
 catch (  Exception e) {
    goodMC=true;
  }
  JarFile mcJarFile=null;
  if (fmlIsJar && !goodMC && codeSource.getLocation().getProtocol().equals("jar")) {
    try {
      String mcPath=codeSource.getLocation().getPath().substring(5);
      mcPath=mcPath.substring(0,mcPath.lastIndexOf('!'));
      mcPath=URLDecoder.decode(mcPath,Charsets.UTF_8.name());
      mcJarFile=new JarFile(mcPath,true);
      mcJarFile.getManifest();
      JarEntry cbrEntry=mcJarFile.getJarEntry("net/minecraft/client/ClientBrandRetriever.class");
      ByteStreams.toByteArray(mcJarFile.getInputStream(cbrEntry));
      Certificate[] certificates=cbrEntry.getCertificates();
      certCount=certificates != null ? certificates.length : 0;
      if (certificates != null) {
        for (        Certificate cert : certificates) {
          String fingerprint=CertificateHelper.getFingerprint(cert);
          if (fingerprint.equals(MCFINGERPRINT)) {
            FMLRelaunchLog.info("Found valid fingerprint for Minecraft. Certificate fingerprint %s",fingerprint);
            goodMC=true;
          }
        }
      }
    }
 catch (    Throwable e) {
      FMLRelaunchLog.log(Level.SEVERE,e,"A critical error occurred trying to read the minecraft jar file");
    }
 finally {
      if (mcJarFile != null) {
        try {
          mcJarFile.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
  }
 else {
    goodMC=true;
  }
  if (!goodMC) {
    FMLRelaunchLog.severe("The minecraft jar %s appears to be corrupt! There has been CRITICAL TAMPERING WITH MINECRAFT, it is highly unlikely minecraft will work! STOP NOW, get a clean copy and try again!",codeSource.getLocation().getFile());
    if (!Boolean.parseBoolean(System.getProperty("fml.ignoreInvalidMinecraftCertificates","false"))) {
      FMLRelaunchLog.severe("For your safety, FML will not launch minecraft. You will need to fetch a clean version of the minecraft jar file");
      FMLRelaunchLog.severe("Technical information: The class net.minecraft.client.ClientBrandRetriever should have been associated with the minecraft jar file, " + "and should have returned us a valid, intact minecraft jar location. This did not work. Either you have modified the minecraft jar file (if so " + "run the forge installer again), or you are using a base editing jar that is changing this class (and likely others too). If you REALLY "+ "want to run minecraft in this configuration, add the flag -Dfml.ignoreInvalidMinecraftCertificates=true to the 'JVM settings' in your launcher profile.");
      System.exit(1);
    }
 else {
      FMLRelaunchLog.severe("FML has been ordered to ignore the invalid or missing minecraft certificate. This is very likely to cause a problem!");
      FMLRelaunchLog.severe("Technical information: ClientBrandRetriever was at %s, there were %d certificates for it",codeSource.getLocation(),certCount);
    }
  }
  if (!goodFML) {
    FMLRelaunchLog.severe("FML appears to be missing any signature data. This is not a good thing");
  }
  byte[] mlClass=cl.getClassBytes("ModLoader");
  if (mlClass == null) {
    return null;
  }
  MLDetectorClassVisitor mlTester=new MLDetectorClassVisitor();
  ClassReader cr=new ClassReader(mlClass);
  cr.accept(mlTester,ClassReader.SKIP_CODE);
  if (!mlTester.foundMarker) {
    JOptionPane.showMessageDialog(null,"<html>CRITICAL ERROR<br/>" + "ModLoader was detected in this environment<br/>" + "ForgeModLoader cannot be installed alongside ModLoader<br/>"+ "All mods should work without ModLoader being installed<br/>"+ "Because ForgeModLoader is 100% compatible with ModLoader<br/>"+ "Re-install Minecraft Forge or Forge ModLoader into a clean<br/>"+ "jar and try again.","ForgeModLoader critical error",JOptionPane.ERROR_MESSAGE);
    throw new RuntimeException("Invalid ModLoader class detected");
  }
  return null;
}
