{
  File configFile=new File(Minecraft.getMinecraft().mcDataDir,"config/splash.properties");
  File parent=configFile.getParentFile();
  if (!parent.exists())   parent.mkdirs();
  FileReader r=null;
  config=new Properties();
  try {
    r=new FileReader(configFile);
    config.load(r);
  }
 catch (  IOException e) {
    FMLLog.info("Could not load splash.properties, will create a default one");
  }
 finally {
    IOUtils.closeQuietly(r);
  }
  boolean defaultEnabled=!System.getProperty("os.name").toLowerCase().contains("mac");
  enabled=getBool("enabled",defaultEnabled) && ((!FMLClientHandler.instance().hasOptifine()) || Launch.blackboard.containsKey("optifine.ForgeSplashCompatible"));
  rotate=getBool("rotate",false);
  logoOffset=getInt("logoOffset",0);
  backgroundColor=getHex("background",0xFFFFFF);
  fontColor=getHex("font",0x000000);
  barBorderColor=getHex("barBorder",0xC0C0C0);
  barColor=getHex("bar",0xCB3D35);
  barBackgroundColor=getHex("barBackground",0xFFFFFF);
  final ResourceLocation fontLoc=new ResourceLocation(getString("fontTexture","textures/font/ascii.png"));
  final ResourceLocation logoLoc=new ResourceLocation(getString("logoTexture","textures/gui/title/mojang.png"));
  final ResourceLocation forgeLoc=new ResourceLocation(getString("forgeTexture","fml:textures/gui/forge.gif"));
  File miscPackFile=new File(Minecraft.getMinecraft().mcDataDir,getString("resourcePackPath","resources"));
  FileWriter w=null;
  try {
    w=new FileWriter(configFile);
    config.store(w,"Splash screen properties");
  }
 catch (  IOException e) {
    FMLLog.log(Level.ERROR,e,"Could not save the splash.properties file");
  }
 finally {
    IOUtils.closeQuietly(w);
  }
  miscPack=createResourcePack(miscPackFile);
  if (!enabled)   return;
  FMLCommonHandler.instance().registerCrashCallable(new ICrashCallable(){
    public String call() throws Exception {
      return "' Vendor: '" + glGetString(GL_VENDOR) + "' Version: '"+ glGetString(GL_VERSION)+ "' Renderer: '"+ glGetString(GL_RENDERER)+ "'";
    }
    public String getLabel(){
      return "GL info";
    }
  }
);
  CrashReport report=CrashReport.makeCrashReport(new Throwable(){
    @Override public String getMessage(){
      return "This is just a prompt for computer specs to be printed. THIS IS NOT A ERROR";
    }
    @Override public void printStackTrace(    final PrintWriter s){
      s.println(getMessage());
    }
    @Override public void printStackTrace(    final PrintStream s){
      s.println(getMessage());
    }
  }
,"Loading screen debug info");
  System.out.println(report.getCompleteReport());
  try {
    d=new SharedDrawable(Display.getDrawable());
    Display.getDrawable().releaseContext();
    d.makeCurrent();
  }
 catch (  LWJGLException e) {
    e.printStackTrace();
    disableSplash(e);
  }
  getMaxTextureSize();
  thread=new Thread(new Runnable(){
    private final int barWidth=400;
    private final int barHeight=20;
    private final int textHeight2=20;
    private final int barOffset=55;
    public void run(){
      setGL();
      fontTexture=new Texture(fontLoc);
      logoTexture=new Texture(logoLoc,false);
      forgeTexture=new Texture(forgeLoc);
      glEnable(GL_TEXTURE_2D);
      fontRenderer=new SplashFontRenderer();
      glDisable(GL_TEXTURE_2D);
      while (!done) {
        ProgressBar first=null, penult=null, last=null;
        Iterator<ProgressBar> i=ProgressManager.barIterator();
        while (i.hasNext()) {
          if (first == null)           first=i.next();
 else {
            penult=last;
            last=i.next();
          }
        }
        glClear(GL_COLOR_BUFFER_BIT);
        int w=Display.getWidth();
        int h=Display.getHeight();
        glViewport(0,0,w,h);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(320 - w / 2,320 + w / 2,240 + h / 2,240 - h / 2,-1,1);
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
        setColor(backgroundColor);
        glEnable(GL_TEXTURE_2D);
        logoTexture.bind();
        glBegin(GL_QUADS);
        logoTexture.texCoord(0,0,0);
        glVertex2f(320 - 256,240 - 256);
        logoTexture.texCoord(0,0,1);
        glVertex2f(320 - 256,240 + 256);
        logoTexture.texCoord(0,1,1);
        glVertex2f(320 + 256,240 + 256);
        logoTexture.texCoord(0,1,0);
        glVertex2f(320 + 256,240 - 256);
        glEnd();
        glDisable(GL_TEXTURE_2D);
        if (first != null) {
          glPushMatrix();
          glTranslatef(320 - (float)barWidth / 2,310,0);
          drawBar(first);
          if (penult != null) {
            glTranslatef(0,barOffset,0);
            drawBar(penult);
          }
          if (last != null) {
            glTranslatef(0,barOffset,0);
            drawBar(last);
          }
          glPopMatrix();
        }
        angle+=1;
        setColor(backgroundColor);
        float fw=(float)forgeTexture.getWidth() / 2 / 2;
        float fh=(float)forgeTexture.getHeight() / 2 / 2;
        if (rotate) {
          float sh=Math.max(fw,fh);
          glTranslatef(320 + w / 2 - sh - logoOffset,240 + h / 2 - sh - logoOffset,0);
          glRotatef(angle,0,0,1);
        }
 else {
          glTranslatef(320 + w / 2 - fw - logoOffset,240 + h / 2 - fh - logoOffset,0);
        }
        int f=(angle / 10) % forgeTexture.getFrames();
        glEnable(GL_TEXTURE_2D);
        forgeTexture.bind();
        glBegin(GL_QUADS);
        forgeTexture.texCoord(f,0,0);
        glVertex2f(-fw,-fh);
        forgeTexture.texCoord(f,0,1);
        glVertex2f(-fw,fh);
        forgeTexture.texCoord(f,1,1);
        glVertex2f(fw,fh);
        forgeTexture.texCoord(f,1,0);
        glVertex2f(fw,-fh);
        glEnd();
        glDisable(GL_TEXTURE_2D);
        mutex.acquireUninterruptibly();
        Display.update();
        mutex.release();
        if (pause) {
          clearGL();
          setGL();
        }
        Display.sync(100);
      }
      clearGL();
    }
    private void setColor(    int color){
      glColor3ub((byte)((color >> 16) & 0xFF),(byte)((color >> 8) & 0xFF),(byte)(color & 0xFF));
    }
    private void drawBox(    int w,    int h){
      glBegin(GL_QUADS);
      glVertex2f(0,0);
      glVertex2f(0,h);
      glVertex2f(w,h);
      glVertex2f(w,0);
      glEnd();
    }
    private void drawBar(    ProgressBar b){
      glPushMatrix();
      setColor(fontColor);
      glScalef(2,2,1);
      glEnable(GL_TEXTURE_2D);
      fontRenderer.drawString(b.getTitle() + " - " + b.getMessage(),0,0,0x000000);
      glDisable(GL_TEXTURE_2D);
      glPopMatrix();
      glPushMatrix();
      glTranslatef(0,textHeight2,0);
      setColor(barBorderColor);
      drawBox(barWidth,barHeight);
      setColor(barBackgroundColor);
      glTranslatef(1,1,0);
      drawBox(barWidth - 2,barHeight - 2);
      setColor(barColor);
      drawBox((barWidth - 2) * (b.getStep() + 1) / (b.getSteps() + 1),barHeight - 2);
      String progress="" + b.getStep() + "/"+ b.getSteps();
      glTranslatef(((float)barWidth - 2) / 2 - fontRenderer.getStringWidth(progress),2,0);
      setColor(fontColor);
      glScalef(2,2,1);
      glEnable(GL_TEXTURE_2D);
      fontRenderer.drawString(progress,0,0,0x000000);
      glPopMatrix();
    }
    private void setGL(){
      lock.lock();
      try {
        Display.getDrawable().makeCurrent();
      }
 catch (      LWJGLException e) {
        e.printStackTrace();
        throw new RuntimeException(e);
      }
      glClearColor((float)((backgroundColor >> 16) & 0xFF) / 0xFF,(float)((backgroundColor >> 8) & 0xFF) / 0xFF,(float)(backgroundColor & 0xFF) / 0xFF,1);
      glDisable(GL_LIGHTING);
      glDisable(GL_DEPTH_TEST);
      glEnable(GL_BLEND);
      glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
    }
    private void clearGL(){
      Minecraft mc=Minecraft.getMinecraft();
      mc.displayWidth=Display.getWidth();
      mc.displayHeight=Display.getHeight();
      mc.resize(mc.displayWidth,mc.displayHeight);
      glClearColor(1,1,1,1);
      glEnable(GL_DEPTH_TEST);
      glDepthFunc(GL_LEQUAL);
      glEnable(GL_ALPHA_TEST);
      glAlphaFunc(GL_GREATER,.1f);
      try {
        Display.getDrawable().releaseContext();
      }
 catch (      LWJGLException e) {
        e.printStackTrace();
        throw new RuntimeException(e);
      }
 finally {
        lock.unlock();
      }
    }
  }
);
  thread.setUncaughtExceptionHandler(new UncaughtExceptionHandler(){
    public void uncaughtException(    Thread t,    Throwable e){
      FMLLog.log(Level.ERROR,e,"Splash thread Exception");
      threadError=e;
    }
  }
);
  thread.start();
  checkThreadState();
}
