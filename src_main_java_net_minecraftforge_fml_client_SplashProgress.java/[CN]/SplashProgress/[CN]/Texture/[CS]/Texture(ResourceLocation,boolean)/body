{
  InputStream s=null;
  try {
    this.location=location;
    s=open(location,allowRP);
    ImageInputStream stream=ImageIO.createImageInputStream(s);
    Iterator<ImageReader> readers=ImageIO.getImageReaders(stream);
    if (!readers.hasNext())     throw new IOException("No suitable reader found for image" + location);
    ImageReader reader=readers.next();
    reader.setInput(stream);
    frames=reader.getNumImages(true);
    BufferedImage[] images=new BufferedImage[frames];
    for (int i=0; i < frames; i++) {
      images[i]=reader.read(i);
    }
    reader.dispose();
    int size=1;
    width=images[0].getWidth();
    height=images[0].getHeight();
    while ((size / width) * (size / height) < frames)     size*=2;
    this.size=size;
    glEnable(GL_TEXTURE_2D);
synchronized (SplashProgress.class) {
      name=glGenTextures();
      glBindTexture(GL_TEXTURE_2D,name);
    }
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA,size,size,0,GL_BGRA,GL_UNSIGNED_INT_8_8_8_8_REV,(IntBuffer)null);
    checkGLError("Texture creation");
    for (int i=0; i * (size / width) < frames; i++) {
      for (int j=0; i * (size / width) + j < frames && j < size / width; j++) {
        buf.clear();
        BufferedImage image=images[i * (size / width) + j];
        for (int k=0; k < height; k++) {
          for (int l=0; l < width; l++) {
            buf.put(image.getRGB(l,k));
          }
        }
        buf.position(0).limit(width * height);
        glTexSubImage2D(GL_TEXTURE_2D,0,j * width,i * height,width,height,GL_BGRA,GL_UNSIGNED_INT_8_8_8_8_REV,buf);
        checkGLError("Texture uploading");
      }
    }
    glBindTexture(GL_TEXTURE_2D,0);
    glDisable(GL_TEXTURE_2D);
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
 finally {
    IOUtils.closeQuietly(s);
  }
}
