{
  ArrayList<ArmorProperties> dmgVals=new ArrayList<ArmorProperties>();
  if (DEBUG) {
    System.out.println("Start: " + damage);
  }
  for (int x=0; x < inventory.length; x++) {
    ItemStack stack=inventory[x];
    if (stack == null) {
      continue;
    }
    ArmorProperties prop=null;
    if (stack.getItem() instanceof ISpecialArmor) {
      ISpecialArmor armor=(ISpecialArmor)stack.getItem();
      prop=armor.getProperties(entity,stack,source,damage,x);
    }
 else     if (stack.getItem() instanceof ItemArmor && !source.isUnblockable()) {
      ItemArmor armor=(ItemArmor)stack.getItem();
      prop=new ArmorProperties(0,armor.damageReduceAmount / 25D,armor.getMaxDamage() - stack.getItemDamage());
    }
    if (prop != null) {
      prop.Slot=x;
      dmgVals.add(prop);
    }
  }
  if (dmgVals.size() > 0) {
    ArmorProperties[] props=dmgVals.toArray(new ArmorProperties[0]);
    StanderdizeList(props,damage);
    int level=props[0].Priority;
    double ratio=0;
    double totalAbsorbed=0;
    for (    ArmorProperties prop : props) {
      if (level != prop.Priority) {
        damage-=(damage * ratio);
        ratio=0;
        level=prop.Priority;
      }
      ratio+=prop.AbsorbRatio;
      double absorb=damage * prop.AbsorbRatio;
      if (absorb > 0) {
        ItemStack stack=inventory[prop.Slot];
        if (stack.getItem() instanceof ISpecialArmor) {
          ((ISpecialArmor)stack.getItem()).damageArmor(entity,stack,source,(int)(absorb < 1 ? 1 : (int)absorb),prop.Slot);
        }
 else {
          if (DEBUG) {
            System.out.println("Item: " + stack.toString() + " Absorbed: "+ absorb+ " Damaged: "+ (int)(absorb < 1 ? 1 : (int)absorb));
          }
          stack.damageItem((int)(absorb < 1 ? 1 : (int)absorb),entity);
        }
        if (stack.stackSize <= 0) {
          if (entity instanceof EntityPlayer) {
            stack.onItemDestroyedByUse((EntityPlayer)entity);
          }
          inventory[prop.Slot]=null;
        }
      }
    }
    damage-=(damage * ratio);
  }
  if (DEBUG) {
    System.out.println("Return: " + (int)damage + " "+ damage);
  }
  return (int)damage;
}
