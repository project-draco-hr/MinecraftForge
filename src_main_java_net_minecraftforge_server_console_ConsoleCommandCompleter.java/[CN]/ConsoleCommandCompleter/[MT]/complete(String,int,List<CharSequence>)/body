{
  int len=buffer.length();
  buffer=buffer.trim();
  if (buffer.isEmpty()) {
    return cursor;
  }
  boolean prefix;
  if (buffer.charAt(0) != '/') {
    buffer='/' + buffer;
    prefix=false;
  }
 else {
    prefix=true;
  }
  final String input=buffer;
  @SuppressWarnings("unchecked") Future<List<String>> tabComplete=this.server.callFromMainThread(new Callable<List<String>>(){
    @Override public List<String> call() throws Exception {
      return ConsoleCommandCompleter.this.server.getTabCompletions(ConsoleCommandCompleter.this.server,input,ConsoleCommandCompleter.this.server.getPosition());
    }
  }
);
  try {
    List<String> completions=tabComplete.get();
    if (prefix) {
      candidates.addAll(completions);
    }
 else {
      for (      String completion : completions) {
        candidates.add(completion.charAt(0) == '/' ? completion.substring(1) : completion);
      }
    }
    int pos=buffer.lastIndexOf(' ');
    if (pos == -1) {
      return cursor - len;
    }
 else {
      return cursor - len + pos;
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
catch (  ExecutionException e) {
    logger.error("Failed to tab complete",e);
  }
  return cursor;
}
