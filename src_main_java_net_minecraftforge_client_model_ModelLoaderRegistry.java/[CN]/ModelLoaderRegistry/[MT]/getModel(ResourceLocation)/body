{
  IModel model;
  if (cache.containsKey(location))   return cache.get(location);
  for (  ResourceLocation loading : loadingModels) {
    if (location.getClass() == loading.getClass() && location.equals(loading)) {
      throw new IllegalStateException("circular model dependencies, stack: [" + Joiner.on(", ").join(loadingModels) + "]");
    }
  }
  loadingModels.addLast(location);
  try {
    ResourceLocation actual=getActualLocation(location);
    ICustomModelLoader accepted=null;
    for (    ICustomModelLoader loader : loaders) {
      try {
        if (loader.accepts(actual)) {
          if (accepted != null) {
            FMLLog.severe("2 loaders (%s and %s) want to load the same model %s",accepted,loader,location);
            throw new IllegalStateException("2 loaders want to load the same model");
          }
          accepted=loader;
        }
      }
 catch (      Exception e) {
        FMLLog.log(Level.ERROR,e,"Exception checking if model %s can be loaded with loader %s, skipping",location,loader);
      }
    }
    if (accepted == null) {
      if (VariantLoader.instance.accepts(actual)) {
        accepted=VariantLoader.instance;
      }
 else       if (VanillaLoader.instance.accepts(actual)) {
        accepted=VanillaLoader.instance;
      }
    }
    if (accepted == null) {
      FMLLog.severe("no suitable loader found for the model %s, skipping",location);
      model=getMissingModel();
    }
 else {
      try {
        model=accepted.loadModel(actual);
      }
 catch (      Exception e) {
        FMLLog.log(Level.ERROR,e,"Exception loading model %s with loader %s, skipping",location,accepted);
        model=getMissingModel();
      }
      if (model == getMissingModel()) {
        FMLLog.log(Level.ERROR,"Loader %s returned missing model while loading model %s",accepted,location);
      }
      if (model == null) {
        FMLLog.log(Level.ERROR,"Loader %s returned null while loading model %s",accepted,location);
        model=getMissingModel();
      }
      textures.addAll(model.getTextures());
    }
  }
  finally {
    ResourceLocation popLoc=loadingModels.removeLast();
    if (popLoc != location) {
      throw new IllegalStateException("Corrupted loading model stack: " + popLoc + " != "+ location);
    }
  }
  cache.put(location,model);
  for (  ResourceLocation dep : model.getDependencies()) {
    getModel(dep);
  }
  return model;
}
