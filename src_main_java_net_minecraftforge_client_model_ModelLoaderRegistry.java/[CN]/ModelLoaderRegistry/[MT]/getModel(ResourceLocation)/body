{
  ResourceLocation actual=getActualLocation(location);
  if (cache.containsKey(location))   return cache.get(location);
  ICustomModelLoader accepted=null;
  for (  ICustomModelLoader loader : loaders) {
    try {
      if (loader.accepts(actual)) {
        if (accepted != null) {
          FMLLog.severe("2 loaders (%s and %s) want to load the same model %s",accepted,loader,location);
          throw new IllegalStateException("2 loaders want to load the same model");
        }
        accepted=loader;
      }
    }
 catch (    Exception e) {
      FMLLog.log(Level.ERROR,e,"Exception checking if model %s can be loaded with loader %s, skipping",location,loader);
    }
  }
  if (accepted == null) {
    if (VanillaLoader.instance.accepts(actual))     accepted=VanillaLoader.instance;
  }
  IModel model;
  if (accepted == null) {
    FMLLog.severe("no suitable loader found for the model %s, skipping",location);
    model=getMissingModel();
  }
 else   try {
    model=accepted.loadModel(actual);
  }
 catch (  Exception e) {
    FMLLog.log(Level.ERROR,e,"Exception loading model %s with loader %s, skipping",location,accepted);
    model=getMissingModel();
  }
  cache.put(location,model);
  return model;
}
