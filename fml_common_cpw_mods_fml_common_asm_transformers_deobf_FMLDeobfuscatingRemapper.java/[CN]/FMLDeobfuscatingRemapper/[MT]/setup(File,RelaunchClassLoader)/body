{
  this.classLoader=classLoader;
  try {
    File libDir=new File(mcDir,"lib");
    File mapData=new File(libDir,"deobfuscation_data.zip");
    ZipFile mapZip=new ZipFile(mapData);
    ZipEntry classData=mapZip.getEntry("class_data.csv");
    ZipInputSupplier zis=new ZipInputSupplier(mapZip,classData);
    InputSupplier<InputStreamReader> classNameSupplier=CharStreams.newReaderSupplier(zis,Charsets.UTF_8);
    List<String> classList=CharStreams.readLines(classNameSupplier);
    Builder<String,String> builder=ImmutableBiMap.<String,String>builder();
    for (    String line : classList) {
      String[] parts=line.split(",");
      builder.put(parts[0],parts[1]);
    }
    classNameBiMap=builder.build();
    ZipEntry methodData=mapZip.getEntry("method_data.csv");
    zis=new ZipInputSupplier(mapZip,methodData);
    InputSupplier<InputStreamReader> methodNameSupplier=CharStreams.newReaderSupplier(zis,Charsets.UTF_8);
    List<String> methodList=CharStreams.readLines(methodNameSupplier);
    rawMethodMaps=Maps.newHashMap();
    for (    String line : methodList) {
      String[] parts=line.split(",");
      String oldSrg=parts[0];
      int lastOld=oldSrg.lastIndexOf('/');
      String cl=oldSrg.substring(0,lastOld);
      String oldName=oldSrg.substring(lastOld + 1);
      String sig=parts[1];
      String newSrg=parts[2];
      int lastNew=newSrg.lastIndexOf('/');
      String newName=newSrg.substring(lastNew + 1);
      if (!rawMethodMaps.containsKey(cl)) {
        rawMethodMaps.put(cl,Maps.<String,String>newHashMap());
      }
      rawMethodMaps.get(cl).put(oldName + sig,newName);
    }
  }
 catch (  IOException ioe) {
    FMLRelaunchLog.log(Level.SEVERE,ioe,"An error occurred loading the deobfuscation map data");
  }
  methodNameMaps=Maps.newHashMapWithExpectedSize(rawMethodMaps.size());
}
