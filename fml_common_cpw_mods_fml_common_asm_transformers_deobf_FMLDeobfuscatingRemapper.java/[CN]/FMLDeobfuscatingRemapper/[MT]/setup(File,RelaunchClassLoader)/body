{
  this.classLoader=classLoader;
  try {
    File libDir=new File(mcDir,"lib");
    File mapData=new File(libDir,"deobfuscation_data.zip");
    ZipFile mapZip=new ZipFile(mapData);
    ZipEntry classData=mapZip.getEntry("joined.srg");
    ZipInputSupplier zis=new ZipInputSupplier(mapZip,classData);
    InputSupplier<InputStreamReader> srgSupplier=CharStreams.newReaderSupplier(zis,Charsets.UTF_8);
    List<String> srgList=CharStreams.readLines(srgSupplier);
    rawMethodMaps=Maps.newHashMap();
    rawFieldMaps=Maps.newHashMap();
    Builder<String,String> builder=ImmutableBiMap.<String,String>builder();
    Splitter splitter=Splitter.on(CharMatcher.anyOf(": ")).omitEmptyStrings().trimResults();
    for (    String line : srgList) {
      String[] parts=Iterables.toArray(splitter.split(line),String.class);
      String typ=parts[0];
      System.out.printf("PARTS: %s\n",Arrays.asList(parts));
      if ("CL".equals(typ)) {
        parseClass(builder,parts);
      }
 else       if ("MD".equals(typ)) {
        parseMethod(parts);
      }
 else       if ("FD".equals(typ)) {
        parseField(parts);
      }
    }
    classNameBiMap=builder.build();
  }
 catch (  IOException ioe) {
    FMLRelaunchLog.log(Level.SEVERE,ioe,"An error occurred loading the deobfuscation map data");
  }
  methodNameMaps=Maps.newHashMapWithExpectedSize(rawMethodMaps.size());
}
