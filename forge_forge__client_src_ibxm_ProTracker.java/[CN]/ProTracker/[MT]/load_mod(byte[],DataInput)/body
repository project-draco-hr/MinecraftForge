{
  int num_channels, channel_idx, panning;
  int sequence_length, restart_idx, sequence_idx;
  int num_patterns, pattern_idx, instrument_idx;
  Module module;
  num_channels=calculate_num_channels(header_1084_bytes);
  if (num_channels < 1) {
    throw new IllegalArgumentException("ProTracker: Unrecognised module format!");
  }
  module=new Module();
  module.song_title=ascii_text(header_1084_bytes,0,20);
  module.pal=(num_channels == 4);
  module.global_volume=64;
  module.channel_gain=IBXM.FP_ONE * 3 / 8;
  module.default_speed=6;
  module.default_tempo=125;
  module.set_num_channels(num_channels);
  for (channel_idx=0; channel_idx < num_channels; channel_idx++) {
    panning=64;
    if ((channel_idx & 0x03) == 0x01 || (channel_idx & 0x03) == 0x02) {
      panning=192;
    }
    module.set_initial_panning(channel_idx,panning);
  }
  sequence_length=header_1084_bytes[950] & 0x7F;
  restart_idx=header_1084_bytes[951] & 0x7F;
  if (restart_idx >= sequence_length) {
    restart_idx=0;
  }
  module.restart_sequence_index=restart_idx;
  module.set_sequence_length(sequence_length);
  for (sequence_idx=0; sequence_idx < sequence_length; sequence_idx++) {
    module.set_sequence(sequence_idx,header_1084_bytes[952 + sequence_idx] & 0x7F);
  }
  num_patterns=calculate_num_patterns(header_1084_bytes);
  module.set_num_patterns(num_patterns);
  for (pattern_idx=0; pattern_idx < num_patterns; pattern_idx++) {
    module.set_pattern(pattern_idx,read_mod_pattern(data_input,num_channels));
  }
  module.set_num_instruments(31);
  for (instrument_idx=1; instrument_idx <= 31; instrument_idx++) {
    module.set_instrument(instrument_idx,read_mod_instrument(header_1084_bytes,instrument_idx,data_input));
  }
  return module;
}
