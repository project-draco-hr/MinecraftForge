{
  if (!(entity instanceof IAnimationProvider)) {
    throw new ClassCastException("AnimationModelBase expects IAnimationProvider");
  }
  Pair<IModelState,Iterable<Event>> pair=((IAnimationProvider)entity).asm().apply(timeAlive / 20);
  handleEvents((T)entity,timeAlive / 20,pair.getRight());
  IBakedModel bakedModel=model.bake(pair.getLeft(),DefaultVertexFormats.ITEM,ModelLoader.defaultTextureGetter());
  BlockPos pos=new BlockPos(entity.posX,entity.posY + entity.height,entity.posZ);
  RenderHelper.disableStandardItemLighting();
  GlStateManager.pushMatrix();
  GlStateManager.rotate(180,0,0,1);
  Tessellator tessellator=Tessellator.getInstance();
  VertexBuffer VertexBuffer=tessellator.getBuffer();
  VertexBuffer.begin(GL11.GL_QUADS,DefaultVertexFormats.BLOCK);
  VertexBuffer.setTranslation(-0.5,-1.5,-0.5);
  lighter.setParent(new VertexBufferConsumer(VertexBuffer));
  lighter.setWorld(entity.worldObj);
  lighter.setState(Blocks.air.getDefaultState());
  lighter.setBlockPos(pos);
  boolean empty=true;
  List<BakedQuad> quads=bakedModel.getQuads(null,null,0);
  if (!quads.isEmpty()) {
    lighter.updateBlockInfo();
    empty=false;
    for (    BakedQuad quad : quads) {
      quad.pipe(lighter);
    }
  }
  for (  EnumFacing side : EnumFacing.values()) {
    quads=bakedModel.getQuads(null,side,0);
    if (!quads.isEmpty()) {
      if (empty)       lighter.updateBlockInfo();
      empty=false;
      for (      BakedQuad quad : quads) {
        quad.pipe(lighter);
      }
    }
  }
  VertexBuffer.setTranslation(0,0,0);
  tessellator.draw();
  GlStateManager.popMatrix();
  RenderHelper.enableStandardItemLighting();
}
