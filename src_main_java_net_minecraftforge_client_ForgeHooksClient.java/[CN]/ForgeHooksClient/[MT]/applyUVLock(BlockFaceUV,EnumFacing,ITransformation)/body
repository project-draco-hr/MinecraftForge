{
  TRSRTransformation global=new TRSRTransformation(rotation.getMatrix());
  Matrix4f uv=global.getUVLockTransform(originalSide).getMatrix();
  Vector4f vec=new Vector4f(0,0,0,1);
  vec.x=blockFaceUV.getVertexU(blockFaceUV.getVertexRotatedRev(0)) / 16;
  vec.y=blockFaceUV.getVertexV(blockFaceUV.getVertexRotatedRev(0)) / 16;
  uv.transform(vec);
  float uMin=16 * vec.x;
  float vMin=16 * vec.y;
  vec.x=blockFaceUV.getVertexU(blockFaceUV.getVertexRotatedRev(2)) / 16;
  vec.y=blockFaceUV.getVertexV(blockFaceUV.getVertexRotatedRev(2)) / 16;
  vec.z=0;
  vec.w=1;
  uv.transform(vec);
  float uMax=16 * vec.x;
  float vMax=16 * vec.y;
  if (uMin > uMax) {
    float t=uMin;
    uMin=uMax;
    uMax=t;
  }
  if (vMin > vMax) {
    float t=vMin;
    vMin=vMax;
    vMax=t;
  }
  float a=(float)Math.toRadians(blockFaceUV.rotation);
  Vector3f rv=new Vector3f(MathHelper.cos(a),MathHelper.sin(a),0);
  Matrix3f rot=new Matrix3f();
  uv.getRotationScale(rot);
  rot.transform(rv);
  int angle=MathHelper.normalizeAngle(-(int)Math.round(Math.toDegrees(Math.atan2(rv.y,rv.x)) / 90) * 90,360);
  return new BlockFaceUV(new float[]{uMin,vMin,uMax,vMax},angle);
}
