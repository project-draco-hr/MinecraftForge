{
  float a1=(float)(color1 >> 24 & 255) / 255.0F;
  float r1=(float)(color1 >> 16 & 255) / 255.0F;
  float g1=(float)(color1 >> 8 & 255) / 255.0F;
  float b1=(float)(color1 & 255) / 255.0F;
  float a2=(float)(color2 >> 24 & 255) / 255.0F;
  float r2=(float)(color2 >> 16 & 255) / 255.0F;
  float g2=(float)(color2 >> 8 & 255) / 255.0F;
  float b2=(float)(color2 & 255) / 255.0F;
  GlStateManager.disableTexture2D();
  GlStateManager.enableBlend();
  GlStateManager.disableAlpha();
  GlStateManager.tryBlendFuncSeparate(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA,1,0);
  GlStateManager.shadeModel(GL11.GL_SMOOTH);
  Tessellator tessellator=Tessellator.getInstance();
  VertexBuffer VertexBuffer=tessellator.getVertexBuffer();
  VertexBuffer.begin(7,DefaultVertexFormats.POSITION_COLOR);
  VertexBuffer.pos(right,top,0.0D).color(r1,g1,b1,a1).endVertex();
  VertexBuffer.pos(left,top,0.0D).color(r1,g1,b1,a1).endVertex();
  VertexBuffer.pos(left,bottom,0.0D).color(r2,g2,b2,a2).endVertex();
  VertexBuffer.pos(right,bottom,0.0D).color(r2,g2,b2,a2).endVertex();
  tessellator.draw();
  GlStateManager.shadeModel(GL11.GL_FLAT);
  GlStateManager.disableBlend();
  GlStateManager.enableAlpha();
  GlStateManager.enableTexture2D();
}
