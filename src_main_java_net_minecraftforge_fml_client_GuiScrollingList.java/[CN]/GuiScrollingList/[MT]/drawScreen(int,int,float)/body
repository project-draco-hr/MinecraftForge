{
  this.mouseX=mouseX;
  this.mouseY=mouseY;
  this.drawBackground();
  boolean isHovering=mouseX >= this.left && mouseX <= this.left + this.listWidth && mouseY >= this.top && mouseY <= this.bottom;
  int listLength=this.getSize();
  int scrollBarWidth=6;
  int scrollBarRight=this.left + this.listWidth;
  int scrollBarLeft=scrollBarRight - scrollBarWidth;
  int entryLeft=this.left;
  int entryRight=scrollBarLeft - 1;
  int viewHeight=this.bottom - this.top;
  int border=4;
  if (Mouse.isButtonDown(0)) {
    if (this.initialMouseClickY == -1.0F) {
      if (isHovering) {
        int mouseListY=mouseY - this.top - this.headerHeight + (int)this.scrollDistance - border;
        int slotIndex=mouseListY / this.slotHeight;
        if (mouseX >= entryLeft && mouseX <= entryRight && slotIndex >= 0 && mouseListY >= 0 && slotIndex < listLength) {
          this.elementClicked(slotIndex,slotIndex == this.selectedIndex && System.currentTimeMillis() - this.lastClickTime < 250L);
          this.selectedIndex=slotIndex;
          this.lastClickTime=System.currentTimeMillis();
        }
 else         if (mouseX >= entryLeft && mouseX <= entryRight && mouseListY < 0) {
          this.clickHeader(mouseX - entryLeft,mouseY - this.top + (int)this.scrollDistance - border);
        }
        if (mouseX >= scrollBarLeft && mouseX <= scrollBarRight) {
          this.scrollFactor=-1.0F;
          int scrollHeight=this.getContentHeight() - viewHeight - border;
          if (scrollHeight < 1)           scrollHeight=1;
          int var13=(int)((float)(viewHeight * viewHeight) / (float)this.getContentHeight());
          if (var13 < 32)           var13=32;
          if (var13 > viewHeight - border * 2)           var13=viewHeight - border * 2;
          this.scrollFactor/=(float)(viewHeight - var13) / (float)scrollHeight;
        }
 else {
          this.scrollFactor=1.0F;
        }
        this.initialMouseClickY=mouseY;
      }
 else {
        this.initialMouseClickY=-2.0F;
      }
    }
 else     if (this.initialMouseClickY >= 0.0F) {
      this.scrollDistance-=((float)mouseY - this.initialMouseClickY) * this.scrollFactor;
      this.initialMouseClickY=(float)mouseY;
    }
  }
 else {
    while (isHovering && Mouse.next()) {
      int scroll=Mouse.getEventDWheel();
      if (scroll != 0) {
        if (scroll > 0)         scroll=-1;
 else         if (scroll < 0)         scroll=1;
        this.scrollDistance+=(float)(scroll * this.slotHeight / 2);
      }
    }
    this.initialMouseClickY=-1.0F;
  }
  this.applyScrollLimits();
  Tessellator tess=Tessellator.getInstance();
  VertexBuffer worldr=tess.getBuffer();
  ScaledResolution res=new ScaledResolution(client);
  double scaleW=client.displayWidth / res.getScaledWidth_double();
  double scaleH=client.displayHeight / res.getScaledHeight_double();
  GL11.glEnable(GL11.GL_SCISSOR_TEST);
  GL11.glScissor((int)(left * scaleW),(int)(client.displayHeight - (bottom * scaleH)),(int)(listWidth * scaleW),(int)(viewHeight * scaleH));
  if (this.client.theWorld != null) {
    this.drawGradientRect(this.left,this.top,this.right,this.bottom,0xC0101010,0xD0101010);
  }
 else {
    GlStateManager.disableLighting();
    GlStateManager.disableFog();
    this.client.renderEngine.bindTexture(Gui.optionsBackground);
    GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
    float scale=32.0F;
    worldr.begin(7,DefaultVertexFormats.POSITION_TEX_COLOR);
    worldr.pos(this.left,this.bottom,0.0D).tex(this.left / scale,(this.bottom + (int)this.scrollDistance) / scale).color(0x20,0x20,0x20,0xFF).endVertex();
    worldr.pos(this.right,this.bottom,0.0D).tex(this.right / scale,(this.bottom + (int)this.scrollDistance) / scale).color(0x20,0x20,0x20,0xFF).endVertex();
    worldr.pos(this.right,this.top,0.0D).tex(this.right / scale,(this.top + (int)this.scrollDistance) / scale).color(0x20,0x20,0x20,0xFF).endVertex();
    worldr.pos(this.left,this.top,0.0D).tex(this.left / scale,(this.top + (int)this.scrollDistance) / scale).color(0x20,0x20,0x20,0xFF).endVertex();
    tess.draw();
  }
  int baseY=this.top + border - (int)this.scrollDistance;
  if (this.hasHeader) {
    this.drawHeader(entryRight,baseY,tess);
  }
  for (int slotIdx=0; slotIdx < listLength; ++slotIdx) {
    int slotTop=baseY + slotIdx * this.slotHeight + this.headerHeight;
    int slotBuffer=this.slotHeight - border;
    if (slotTop <= this.bottom && slotTop + slotBuffer >= this.top) {
      if (this.highlightSelected && this.isSelected(slotIdx)) {
        int min=this.left;
        int max=entryRight;
        GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
        GlStateManager.disableTexture2D();
        worldr.begin(7,DefaultVertexFormats.POSITION_TEX_COLOR);
        worldr.pos(min,slotTop + slotBuffer + 2,0).tex(0,1).color(0x80,0x80,0x80,0xFF).endVertex();
        worldr.pos(max,slotTop + slotBuffer + 2,0).tex(1,1).color(0x80,0x80,0x80,0xFF).endVertex();
        worldr.pos(max,slotTop - 2,0).tex(1,0).color(0x80,0x80,0x80,0xFF).endVertex();
        worldr.pos(min,slotTop - 2,0).tex(0,0).color(0x80,0x80,0x80,0xFF).endVertex();
        worldr.pos(min + 1,slotTop + slotBuffer + 1,0).tex(0,1).color(0x00,0x00,0x00,0xFF).endVertex();
        worldr.pos(max - 1,slotTop + slotBuffer + 1,0).tex(1,1).color(0x00,0x00,0x00,0xFF).endVertex();
        worldr.pos(max - 1,slotTop - 1,0).tex(1,0).color(0x00,0x00,0x00,0xFF).endVertex();
        worldr.pos(min + 1,slotTop - 1,0).tex(0,0).color(0x00,0x00,0x00,0xFF).endVertex();
        tess.draw();
        GlStateManager.enableTexture2D();
      }
      this.drawSlot(slotIdx,entryRight,slotTop,slotBuffer,tess);
    }
  }
  GlStateManager.disableDepth();
  int extraHeight=this.getContentHeight() - viewHeight - border;
  if (extraHeight > 0) {
    int height=viewHeight * viewHeight / this.getContentHeight();
    if (height < 32)     height=32;
    if (height > viewHeight - border * 2)     height=viewHeight - border * 2;
    int barTop=(int)this.scrollDistance * (viewHeight - height) / extraHeight + this.top;
    if (barTop < this.top) {
      barTop=this.top;
    }
    GlStateManager.disableTexture2D();
    worldr.begin(7,DefaultVertexFormats.POSITION_TEX_COLOR);
    worldr.pos(scrollBarLeft,this.bottom,0.0D).tex(0.0D,1.0D).color(0x00,0x00,0x00,0xFF).endVertex();
    worldr.pos(scrollBarRight,this.bottom,0.0D).tex(1.0D,1.0D).color(0x00,0x00,0x00,0xFF).endVertex();
    worldr.pos(scrollBarRight,this.top,0.0D).tex(1.0D,0.0D).color(0x00,0x00,0x00,0xFF).endVertex();
    worldr.pos(scrollBarLeft,this.top,0.0D).tex(0.0D,0.0D).color(0x00,0x00,0x00,0xFF).endVertex();
    tess.draw();
    worldr.begin(7,DefaultVertexFormats.POSITION_TEX_COLOR);
    worldr.pos(scrollBarLeft,barTop + height,0.0D).tex(0.0D,1.0D).color(0x80,0x80,0x80,0xFF).endVertex();
    worldr.pos(scrollBarRight,barTop + height,0.0D).tex(1.0D,1.0D).color(0x80,0x80,0x80,0xFF).endVertex();
    worldr.pos(scrollBarRight,barTop,0.0D).tex(1.0D,0.0D).color(0x80,0x80,0x80,0xFF).endVertex();
    worldr.pos(scrollBarLeft,barTop,0.0D).tex(0.0D,0.0D).color(0x80,0x80,0x80,0xFF).endVertex();
    tess.draw();
    worldr.begin(7,DefaultVertexFormats.POSITION_TEX_COLOR);
    worldr.pos(scrollBarLeft,barTop + height - 1,0.0D).tex(0.0D,1.0D).color(0xC0,0xC0,0xC0,0xFF).endVertex();
    worldr.pos(scrollBarRight - 1,barTop + height - 1,0.0D).tex(1.0D,1.0D).color(0xC0,0xC0,0xC0,0xFF).endVertex();
    worldr.pos(scrollBarRight - 1,barTop,0.0D).tex(1.0D,0.0D).color(0xC0,0xC0,0xC0,0xFF).endVertex();
    worldr.pos(scrollBarLeft,barTop,0.0D).tex(0.0D,0.0D).color(0xC0,0xC0,0xC0,0xFF).endVertex();
    tess.draw();
  }
  this.drawScreen(mouseX,mouseY);
  GlStateManager.enableTexture2D();
  GlStateManager.shadeModel(GL11.GL_FLAT);
  GlStateManager.enableAlpha();
  GlStateManager.disableBlend();
  GL11.glDisable(GL11.GL_SCISSOR_TEST);
}
