{
  ForgeBlockStateV1.Variant ret=new Variant();
  JsonObject json=element.getAsJsonObject();
  if (json.has("model")) {
    if (json.get("model").isJsonNull())     ret.model=null;
 else     ret.model=getBlockLocation(JsonUtils.getString(json,"model"));
    ret.modelSet=true;
  }
  if (json.has("textures")) {
    for (    Entry<String,JsonElement> e : json.get("textures").getAsJsonObject().entrySet()) {
      if (e.getValue().isJsonNull())       ret.textures.put(e.getKey(),"");
 else       ret.textures.put(e.getKey(),e.getValue().getAsString());
    }
  }
  if (json.has("x") || json.has("y")) {
    int x=JsonUtils.getInt(json,"x",0);
    int y=JsonUtils.getInt(json,"y",0);
    ret.state=Optional.<IModelState>of(new TRSRTransformation(ModelRotation.getModelRotation(x,y)));
    if (!ret.state.isPresent())     throw new JsonParseException("Invalid BlockModelRotation x: " + x + " y: "+ y);
  }
  if (json.has("transform")) {
    if (json.get("transform").isJsonPrimitive() && json.get("transform").getAsJsonPrimitive().isString()) {
      String transform=json.get("transform").getAsString();
      if (transform.equals("identity")) {
        ret.state=Optional.<IModelState>of(TRSRTransformation.identity());
      }
 else       if (transform.equals("forge:default-block")) {
        ImmutableMap.Builder<TransformType,TRSRTransformation> builder=ImmutableMap.builder();
        builder.put(TransformType.GUI,get(0,0,0,30,225,0,0.625f));
        builder.put(TransformType.GROUND,get(0,3,0,0,0,0,0.25f));
        builder.put(TransformType.FIXED,get(0,0,0,0,0,0,0.5f));
        builder.put(TransformType.THIRD_PERSON_RIGHT_HAND,get(0,2.5f,0,75,45,0,0.375f));
        builder.put(TransformType.FIRST_PERSON_RIGHT_HAND,get(0,0,0,0,45,0,0.4f));
        builder.put(TransformType.FIRST_PERSON_LEFT_HAND,get(0,0,0,0,255,0,0.4f));
        ret.state=Optional.<IModelState>of(new SimpleModelState(builder.build()));
      }
 else       if (transform.equals("forge:default-item")) {
        ret.state=Optional.<IModelState>of(new SimpleModelState(ImmutableMap.of(TransformType.GROUND,get(0,2,0,0,0,0,0.5f),TransformType.HEAD,get(0,13,7,0,180,0,1),TransformType.THIRD_PERSON_RIGHT_HAND,get(0,3,1,0,0,0,0.55f),TransformType.FIRST_PERSON_RIGHT_HAND,get(1.13f,3.2f,1.13f,0,-90,25,0.68f))));
      }
 else       if (transform.equals("forge:default-tool")) {
        ret.state=Optional.<IModelState>of(new SimpleModelState(ImmutableMap.of(TransformType.THIRD_PERSON_RIGHT_HAND,get(0,4,0.5f,0,-90,55,0.85f),TransformType.THIRD_PERSON_LEFT_HAND,get(0,4,0.5f,0,90,-55,0.85f),TransformType.FIRST_PERSON_RIGHT_HAND,get(1.13f,3.2f,1.13f,0,-90,25,0.68f),TransformType.FIRST_PERSON_LEFT_HAND,get(1.13f,3.2f,1.13f,0,90,-25,0.68f))));
      }
 else {
        throw new JsonParseException("transform: unknown default string: " + transform);
      }
    }
 else     if (!json.get("transform").isJsonObject()) {
      try {
        TRSRTransformation base=context.deserialize(json.get("transform"),TRSRTransformation.class);
        ret.state=Optional.<IModelState>of(TRSRTransformation.blockCenterToCorner(base));
      }
 catch (      JsonParseException e) {
        throw new JsonParseException("transform: expected a string, object or valid base transformation, got: " + json.get("transform"));
      }
    }
 else {
      JsonObject transform=json.get("transform").getAsJsonObject();
      EnumMap<TransformType,TRSRTransformation> transforms=Maps.newEnumMap(TransformType.class);
      if (transform.has("thirdperson")) {
        TRSRTransformation t=context.deserialize(transform.get("thirdperson"),TRSRTransformation.class);
        transform.remove("thirdperson");
        transforms.put(TransformType.THIRD_PERSON_RIGHT_HAND,TRSRTransformation.blockCenterToCorner(t));
      }
      if (transform.has("thirdperson_righthand")) {
        TRSRTransformation t=context.deserialize(transform.get("thirdperson_righthand"),TRSRTransformation.class);
        transform.remove("thirdperson_righthand");
        transforms.put(TransformType.THIRD_PERSON_RIGHT_HAND,TRSRTransformation.blockCenterToCorner(t));
      }
      if (transform.has("thirdperson_lefthand")) {
        TRSRTransformation t=context.deserialize(transform.get("thirdperson_lefthand"),TRSRTransformation.class);
        transform.remove("thirdperson_lefthand");
        transforms.put(TransformType.THIRD_PERSON_LEFT_HAND,TRSRTransformation.blockCenterToCorner(t));
      }
      if (transform.has("firstperson")) {
        TRSRTransformation t=context.deserialize(transform.get("firstperson"),TRSRTransformation.class);
        transform.remove("firstperson");
        transforms.put(TransformType.FIRST_PERSON_RIGHT_HAND,TRSRTransformation.blockCenterToCorner(t));
      }
      if (transform.has("firstperson_righthand")) {
        TRSRTransformation t=context.deserialize(transform.get("firstperson_righthand"),TRSRTransformation.class);
        transform.remove("firstperson_righthand");
        transforms.put(TransformType.FIRST_PERSON_RIGHT_HAND,TRSRTransformation.blockCenterToCorner(t));
      }
      if (transform.has("firstperson_lefthand")) {
        TRSRTransformation t=context.deserialize(transform.get("firstperson_lefthand"),TRSRTransformation.class);
        transform.remove("firstperson_lefthand");
        transforms.put(TransformType.FIRST_PERSON_LEFT_HAND,TRSRTransformation.blockCenterToCorner(t));
      }
      if (transform.has("head")) {
        TRSRTransformation t=context.deserialize(transform.get("head"),TRSRTransformation.class);
        transform.remove("head");
        transforms.put(TransformType.HEAD,TRSRTransformation.blockCenterToCorner(t));
      }
      if (transform.has("gui")) {
        TRSRTransformation t=context.deserialize(transform.get("gui"),TRSRTransformation.class);
        transform.remove("gui");
        transforms.put(TransformType.GUI,TRSRTransformation.blockCenterToCorner(t));
      }
      if (transform.has("ground")) {
        TRSRTransformation t=context.deserialize(transform.get("ground"),TRSRTransformation.class);
        transform.remove("ground");
        transforms.put(TransformType.GROUND,TRSRTransformation.blockCenterToCorner(t));
      }
      if (transform.has("fixed")) {
        TRSRTransformation t=context.deserialize(transform.get("fixed"),TRSRTransformation.class);
        transform.remove("fixed");
        transforms.put(TransformType.FIXED,TRSRTransformation.blockCenterToCorner(t));
      }
      int k=transform.entrySet().size();
      if (transform.has("matrix"))       k--;
      if (transform.has("translation"))       k--;
      if (transform.has("rotation"))       k--;
      if (transform.has("scale"))       k--;
      if (transform.has("post-rotation"))       k--;
      if (k > 0) {
        throw new JsonParseException("transform: allowed keys: 'thirdperson', 'firstperson', 'gui', 'head', 'matrix', 'translation', 'rotation', 'scale', 'post-rotation'");
      }
      TRSRTransformation base=TRSRTransformation.identity();
      if (!transform.entrySet().isEmpty()) {
        base=context.deserialize(transform,TRSRTransformation.class);
        base=TRSRTransformation.blockCenterToCorner(base);
      }
      IModelState state;
      if (transforms.isEmpty()) {
        state=base;
      }
 else {
        state=new SimpleModelState(Maps.immutableEnumMap(transforms),Optional.of(base));
      }
      ret.state=Optional.of(state);
    }
  }
  if (json.has("uvlock")) {
    ret.uvLock=Optional.of(JsonUtils.getBoolean(json,"uvlock"));
  }
  if (json.has("smooth_lighting")) {
    ret.smooth=Optional.of(JsonUtils.getBoolean(json,"smooth_lighting"));
  }
  if (json.has("gui3d")) {
    ret.gui3d=Optional.of(JsonUtils.getBoolean(json,"gui3d"));
  }
  if (json.has("weight")) {
    ret.weight=Optional.of(JsonUtils.getInt(json,"weight"));
  }
  if (json.has("submodel")) {
    JsonElement submodels=json.get("submodel");
    if (submodels.isJsonPrimitive()) {
      if (simpleSubmodelKey == null)       throw new RuntimeException("Attempted to use a simple submodel declaration outside a valid state variant declaration.");
      String key=simpleSubmodelKey;
      simpleSubmodelKey=null;
      ret.model=getBlockLocation(submodels.getAsString());
      ret.modelSet=true;
      ForgeBlockStateV1.Variant dummyVar=new Variant();
      dummyVar.submodels.put(key,Collections.singletonList(ret));
      dummyVar.simpleSubmodels=Collections.singletonMap(key,Variant.SET_VALUE);
      return dummyVar;
    }
 else {
      simpleSubmodelKey=null;
      for (      Entry<String,JsonElement> submodel : submodels.getAsJsonObject().entrySet()) {
        JsonElement varEl=submodel.getValue();
        List<ForgeBlockStateV1.Variant> submodelVariants;
        if (varEl.isJsonArray()) {
          submodelVariants=Lists.newArrayList();
          for (          JsonElement e : varEl.getAsJsonArray())           submodelVariants.add((ForgeBlockStateV1.Variant)context.deserialize(e,ForgeBlockStateV1.Variant.class));
        }
 else         if (varEl.isJsonNull()) {
          submodelVariants=null;
        }
 else {
          submodelVariants=Collections.singletonList((ForgeBlockStateV1.Variant)context.deserialize(varEl,ForgeBlockStateV1.Variant.class));
        }
        if (submodelVariants != null)         for (        ForgeBlockStateV1.Variant part : submodelVariants)         throwIfNestedSubmodels(part);
        ret.submodels.put(submodel.getKey(),submodelVariants);
        ret.simpleSubmodels.put(submodel.getKey(),null);
      }
    }
  }
  if (json.has("custom")) {
    for (    Entry<String,JsonElement> e : json.get("custom").getAsJsonObject().entrySet()) {
      if (e.getValue().isJsonNull())       ret.customData.put(e.getKey(),null);
 else       ret.customData.put(e.getKey(),e.getValue().toString());
    }
  }
  simpleSubmodelKey=null;
  return ret;
}
