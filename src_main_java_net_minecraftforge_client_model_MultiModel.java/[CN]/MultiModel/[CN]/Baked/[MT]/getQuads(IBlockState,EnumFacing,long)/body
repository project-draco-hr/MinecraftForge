{
  if (quads == null) {
    ImmutableMap.Builder<Optional<EnumFacing>,ImmutableList<BakedQuad>> builder=ImmutableMap.builder();
    for (    EnumFacing face : EnumFacing.values()) {
      ImmutableList.Builder<BakedQuad> quads=ImmutableList.builder();
      if (base != null) {
        quads.addAll(base.getQuads(state,face,0));
      }
      for (      IBakedModel bakedPart : parts.values()) {
        quads.addAll(bakedPart.getQuads(state,face,0));
      }
      builder.put(Optional.of(face),quads.build());
    }
    ImmutableList.Builder<BakedQuad> quads=ImmutableList.builder();
    if (base != null) {
      quads.addAll(base.getQuads(state,null,0));
    }
    for (    IBakedModel bakedPart : parts.values()) {
      quads.addAll(bakedPart.getQuads(state,null,0));
    }
    builder.put(Optional.<EnumFacing>absent(),quads.build());
    this.quads=builder.build();
  }
  return quads.get(Optional.fromNullable(side));
}
