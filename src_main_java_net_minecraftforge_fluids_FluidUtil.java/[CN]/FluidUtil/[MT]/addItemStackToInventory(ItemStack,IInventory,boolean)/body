{
  if (itemstack != null && itemstack.stackSize == 1 && itemstack.getItem() != null) {
    try {
      int sizeInventory=inventory.getSizeInventory();
      if (inventory instanceof InventoryPlayer) {
        sizeInventory-=4;
      }
      if (itemstack.isItemDamaged()) {
        int j=0;
        for (; j < sizeInventory; ++j) {
          if (inventory.getStackInSlot(j) == null) {
            break;
          }
        }
        if (j < sizeInventory) {
          ItemStack copy=ItemStack.copyItemStack(itemstack);
          copy.animationsToGo=5;
          inventory.setInventorySlotContents(j,copy);
          itemstack.stackSize=0;
          return true;
        }
 else         if (isCreative) {
          itemstack.stackSize=0;
          return true;
        }
 else {
          return false;
        }
      }
 else {
        int origSize=itemstack.stackSize;
        for (int i=0; i < sizeInventory; i++) {
          ItemStack slot=inventory.getStackInSlot(i);
          if (slot != null && slot.getItem() == itemstack.getItem() && slot.isStackable() && slot.stackSize < slot.getMaxStackSize() && slot.stackSize < inventory.getInventoryStackLimit() && (!slot.getHasSubtypes() || slot.getMetadata() == itemstack.getMetadata()) && ItemStack.areItemStackTagsEqual(slot,itemstack)) {
            int dif=itemstack.stackSize;
            if (dif > slot.getMaxStackSize() - slot.stackSize) {
              dif=slot.getMaxStackSize() - slot.stackSize;
            }
            if (dif > inventory.getInventoryStackLimit()) {
              dif=inventory.getInventoryStackLimit();
            }
            slot.stackSize+=dif;
            slot.animationsToGo=5;
            itemstack.stackSize-=dif;
            inventory.setInventorySlotContents(i,slot);
            if (itemstack.stackSize <= 0) {
              break;
            }
          }
        }
        if (itemstack.stackSize > 0) {
          for (int i=0; i < sizeInventory; i++) {
            if (inventory.getStackInSlot(i) == null) {
              ItemStack slot=ItemStack.copyItemStack(itemstack);
              if (slot.stackSize > inventory.getInventoryStackLimit()) {
                slot.stackSize=inventory.getInventoryStackLimit();
              }
              slot.animationsToGo=5;
              inventory.setInventorySlotContents(i,slot);
              itemstack.stackSize-=slot.stackSize;
            }
            if (itemstack.stackSize <= 0) {
              break;
            }
          }
        }
        if (itemstack.stackSize > 0 && isCreative) {
          itemstack.stackSize=0;
          return true;
        }
 else {
          return itemstack.stackSize < origSize;
        }
      }
    }
 catch (    Throwable throwable) {
      CrashReport crashreport=CrashReport.makeCrashReport(throwable,"Adding item to inventory");
      CrashReportCategory crashreportcategory=crashreport.makeCategory("Item being added");
      crashreportcategory.addCrashSection("Item ID",Integer.valueOf(Item.getIdFromItem(itemstack.getItem())));
      crashreportcategory.addCrashSection("Item data",Integer.valueOf(itemstack.getMetadata()));
      crashreportcategory.addCrashSectionCallable("Item name",new Callable<String>(){
        public String call() throws Exception {
          return itemstack.getDisplayName();
        }
      }
);
      throw new ReportedException(crashreport);
    }
  }
 else {
    return false;
  }
}
