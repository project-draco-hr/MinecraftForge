def main():
    global version_str
    global version_mc
    parser = OptionParser()
    parser.add_option('-m', '--mcp-dir', action='store', dest='mcp_dir', help='MCP Path', default=None)
    parser.add_option('-b', '--build', action='store', dest='build', help='Build number', default=None)
    parser.add_option('-s', '--skipchangelog', action='store_true', dest='skip_changelog', help='Skip Changelog', default=False)
    parser.add_option('-j', '--sign-jar', action='store', dest='sign_jar', help='Path to jar signer command', default=None)
    (options, _) = parser.parse_args()
    build_num = 0
    if (not (options.build is None)):
        try:
            build_num = int(options.build)
        except:
            pass
    mcp_dir = os.path.join(forge_dir, 'mcp')
    if (not (options.mcp_dir is None)):
        mcp_dir = os.path.abspath(options.mcp_dir)
    ret = 0
    fml_dir = os.path.join(forge_dir, 'fml')
    ret = build_forge_dev(mcp_dir, forge_dir, fml_dir, build_num)
    if (ret != 0):
        sys.exit(ret)
    temp_dir = os.path.join(forge_dir, 'temp')
    src_dir = os.path.join(mcp_dir, 'src')
    reobf_dir = os.path.join(mcp_dir, 'reobf')
    client_dir = os.path.join(reobf_dir, 'minecraft')
    fml_dir = os.path.join(temp_dir, 'fml')
    print '=================================== Release Start ================================='
    fml = glob.glob(os.path.join(forge_dir, 'fml', 'target', ('fml-src-*.%d-*.zip' % build_num)))
    if (not (len(fml) == 1)):
        if (len(fml) == 0):
            print 'Missing FML source zip, should be named fml-src-*.zip inside ./fml/target/ created when running setup'
        else:
            print 'To many FML source zips found, we should only have one. Check the Forge Git for the latest FML version supported'
        sys.exit(1)
    if os.path.isdir(fml_dir):
        shutil.rmtree(fml_dir)
    print ('Extracting: %s' % os.path.basename(fml[0]))
    zf = zipfile.ZipFile(fml[0])
    zf.extractall(temp_dir)
    zf.close()
    if os.path.isfile('MANIFEST.MF'):
        os.remove('MANIFEST.MF')
    fml_name = os.path.basename(fml[0]).replace('src', 'universal').replace('.zip', '.jar').replace('-master.', '.')
    print ('Extracting %s MANIFEST.MF' % fml_name)
    with closing(zipfile.ZipFile(os.path.join(forge_dir, 'fml', 'target', fml_name), mode='r')) as zip_in:
        with closing(open('MANIFEST.MF', 'wb')) as out:
            out.write(zip_in.read('META-INF/MANIFEST.MF'))
    error_level = 0
    try:
        sys.path.append(mcp_dir)
        from runtime.reobfuscate import reobfuscate
        os.chdir(mcp_dir)
        reset_logger()
        reobfuscate(None, False, True, True, True, False, False)
        reset_logger()
        os.chdir(forge_dir)
    except SystemExit as e:
        print ('Reobfusicate Exception: %d ' % e.code)
        error_level = e.code
    extract_fml_obfed(fml_dir, mcp_dir, reobf_dir, client_dir)
    gen_bin_patches(mcp_dir, os.path.join(forge_dir, 'fml'), build_num, client_dir)
    version = load_version(build_num)
    version_forge = ('%d.%d.%d.%d' % (version['major'], version['minor'], version['revision'], version['build']))
    version_mc = load_mc_version(fml_dir)
    branch = get_branch_name()
    version_str = ('%s-%s' % (version_mc, version_forge))
    if (not (branch == '')):
        version_str = ('%s-%s' % (version_str, branch))
    out_folder = os.path.join(forge_dir, 'target')
    if os.path.isdir(out_folder):
        shutil.rmtree(out_folder)
    os.makedirs(out_folder)
    if (not options.skip_changelog):
        changelog_file = ('target/minecraftforge-changelog-%s.txt' % version_str)
        try:
            make_changelog('http://ci.jenkins.minecraftforge.net/job/minecraftforge/', build_num, changelog_file, version_str)
        except HTTPError as e:
            print ('Changelog failed to generate: %s' % e)
            options.skip_changelog = True
    version_file = 'forgeversion.properties'
    if os.path.exists(version_file):
        os.remove(version_file)
    with open(version_file, 'wb') as fh:
        fh.write(('forge.major.number=%d\n' % version['major']))
        fh.write(('forge.minor.number=%d\n' % version['minor']))
        fh.write(('forge.revision.number=%d\n' % version['revision']))
        fh.write(('forge.build.number=%d\n' % version['build']))
    if (not (options.sign_jar is None)):
        sign_jar(forge_dir, options.sign_jar, client_dir, ('minecraftforge-universal-%s.jar' % version_str))
    else:
        zip_start(('minecraftforge-universal-%s.jar' % version_str))
        zip_folder(client_dir, '', zip)
        zip_add('MANIFEST.MF', 'META-INF/MANIFEST.MF')
    zip_add('client/forge_logo.png')
    zip_add('install/MinecraftForge-Credits.txt')
    zip_add('install/MinecraftForge-License.txt')
    zip_add('install/Paulscode IBXM Library License.txt')
    zip_add('install/Paulscode SoundSystem CodecIBXM License.txt')
    zip_add('common/forge_at.cfg')
    zip_add(version_file)
    if (not options.skip_changelog):
        zip_add(changelog_file, 'MinecraftForge-Changelog.txt')
    FML_FILES = ['CREDITS-fml.txt', 'LICENSE-fml.txt', 'README-fml.txt', 'common/fml_at.cfg', 'common/fml_marker.cfg', 'common/fmlversion.properties', 'common/mcpmod.info', 'client/mcp.png', ('common/deobfuscation_data-%s.lzma' % version_mc)]
    for file in FML_FILES:
        zip_add(os.path.join(fml_dir, file))
    zip_end()
    build_installer(forge_dir, version_str, version_forge, version_mc, out_folder)
    inject_version(os.path.join(forge_dir, 'common/net/minecraftforge/common/ForgeVersion.java'.replace('/', os.sep)), build_num)
    zip_start(('minecraftforge-src-%s.zip' % version_str), 'forge')
    zip_add('client', 'client')
    zip_add('common', 'common')
    zip_add('patches', 'patches')
    zip_add(fml_dir, 'fml')
    zip_add('install', '')
    zip_add('forge.py')
    zip_add(version_file)
    if (not options.skip_changelog):
        zip_add(changelog_file, 'MinecraftForge-Changelog.txt')
    zip_end()
    inject_version(os.path.join(forge_dir, 'common/net/minecraftforge/common/ForgeVersion.java'.replace('/', os.sep)), 0)
    if os.path.exists(version_file):
        os.remove(version_file)
    shutil.rmtree(temp_dir)
    if os.path.isfile('MANIFEST.MF'):
        os.remove('MANIFEST.MF')
    print ('=================================== Release Finished %d =================================' % error_level)
    sys.exit(error_level)
