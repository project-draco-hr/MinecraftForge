def main():
    global version_str
    global version_mc
    parser = OptionParser()
    parser.add_option('-m', '--mcp-dir', action='store', dest='mcp_dir', help='MCP Path', default=None)
    parser.add_option('-b', '--build', action='store', dest='build', help='Build number', default=None)
    parser.add_option('-s', '--skipchangelog', action='store', dest='skip_changelog', help='Skip Changelog', default=False)
    (options, _) = parser.parse_args()
    build_num = 0
    if (not (options.build is None)):
        try:
            build_num = int(options.build)
        except:
            pass
    mcp_dir = os.path.join(forge_dir, 'mcp')
    if (not (options.mcp_dir is None)):
        mcp_dir = os.path.abspath(options.mcp_dir)
    elif os.path.isfile(os.path.join('..', 'runtime', 'commands.py')):
        mcp_dir = os.path.abspath('..')
    ret = 0
    fml_dir = os.path.join(forge_dir, 'fml')
    build_forge_dev(mcp_dir, forge_dir, fml_dir, build_num)
    if (ret != 0):
        sys.exit(ret)
    print '=================================== Release Start ================================='
    error_level = 0
    try:
        sys.path.append(mcp_dir)
        from runtime.reobfuscate import reobfuscate
        os.chdir(mcp_dir)
        reset_logger()
        reobfuscate(None, False, True, True, True, False)
        reset_logger()
        os.chdir(forge_dir)
    except SystemExit as e:
        print ('Reobfusicate Exception: %d ' % e.code)
        error_level = e.code
    src_dir = os.path.join(mcp_dir, 'src')
    reobf_dir = os.path.join(mcp_dir, 'reobf')
    client_dir = os.path.join(reobf_dir, 'minecraft')
    extract_fml_obfed(mcp_dir, reobf_dir, client_dir)
    extract_paulscode(mcp_dir, client_dir)
    version = load_version(build_num)
    version_forge = ('%d.%d.%d.%d' % (version['major'], version['minor'], version['revision'], version['build']))
    version_mc = load_mc_version(forge_dir)
    branch = get_branch_name()
    version_str = ('%s-%s' % (version_mc, version_forge))
    if (not (branch == '')):
        version_str = ('%s-%s' % (version_str, branch))
    out_folder = os.path.join(forge_dir, ('forge-%s' % version_str))
    if os.path.isdir(out_folder):
        shutil.rmtree(out_folder)
    os.makedirs(out_folder)
    if (not options.skip_changelog):
        changelog_file = ('forge-%s/minecraftforge-changelog-%s.txt' % (version_str, version_str))
        make_changelog('http://jenkins.minecraftforge.net/job/minecraftforge/', build_num, changelog_file, version_str)
    version_file = 'forgeversion.properties'
    if os.path.exists(version_file):
        os.remove(version_file)
    with open(version_file, 'wb') as fh:
        fh.write(('forge.major.number=%d\n' % version['major']))
        fh.write(('forge.minor.number=%d\n' % version['minor']))
        fh.write(('forge.revision.number=%d\n' % version['revision']))
        fh.write(('forge.build.number=%d\n' % version['build']))
    zip_start(('minecraftforge-universal-%s.zip' % version_str))
    zip_folder(client_dir, '', zip)
    zip_add('client/forge_logo.png')
    zip_add('install/MinecraftForge-Credits.txt')
    zip_add('install/MinecraftForge-License.txt')
    zip_add('fml/CREDITS-fml.txt')
    zip_add('fml/LICENSE-fml.txt')
    zip_add('fml/README-fml.txt')
    zip_add('fml/common/fml_at.cfg')
    zip_add('fml/common/fml_marker.cfg')
    zip_add('fml/common/fmlversion.properties')
    zip_add('fml/common/mcpmod.info')
    zip_add('fml/client/mcp.png')
    zip_add('install/Paulscode IBXM Library License.txt')
    zip_add('install/Paulscode SoundSystem CodecIBXM License.txt')
    zip_add('common/forge_at.cfg')
    zip_add(version_file)
    zip_add(changelog_file, 'MinecraftForge-Changelog.txt')
    zip_add('MANIFEST.MF', 'META-INF/MANIFEST.MF')
    zip_end()
    zips = glob.glob('fml/mcp*.zip')
    for i in zips:
        print ('Removing MCP Zip: %s' % os.path.basename(i))
        os.remove(i)
    inject_version(os.path.join(forge_dir, 'common/net/minecraftforge/common/ForgeVersion.java'.replace('/', os.sep)), build_num)
    zip_start(('minecraftforge-src-%s.zip' % version_str), 'forge')
    zip_add('client', 'client')
    zip_add('common', 'common')
    zip_add('patches', 'patches')
    zip_add('fml', 'fml')
    zip_add('install', '')
    zip_add('forge.py')
    zip_add(version_file)
    zip_add(changelog_file, 'MinecraftForge-Changelog.txt')
    zip_end()
    inject_version(os.path.join(forge_dir, 'common/net/minecraftforge/common/ForgeVersion.java'.replace('/', os.sep)), 0)
    if os.path.exists(version_file):
        os.remove(version_file)
    print ('=================================== Release Finished %d =================================' % error_level)
    sys.exit(error_level)
